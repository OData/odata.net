<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.runner.utility.netcoreapp10</name>
    </assembly>
    <members>
        <member name="T:Xunit.ConfigReader">
            <summary>
            This class is used to read configuration information for a test assembly.
            </summary>
        </member>
        <member name="M:Xunit.ConfigReader.Load(System.String,System.String)">
            <summary>
            Loads the test assembly configuration for the given test assembly.
            </summary>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <returns>The test assembly configuration.</returns>
        </member>
        <member name="M:Xunit.ConfigReader.Load(System.IO.Stream)">
            <summary>
            Loads the test assembly configuration for the given test assembly from a JSON stream. Caller is responsible for opening the stream.
            </summary>
            <param name="configStream">Stream containing config for an assembly</param>
            <returns>The test assembly configuration.</returns>
        </member>
        <member name="T:Xunit.ConfigReader_Json">
            <summary>
            This class is used to read configuration information for a test assembly.
            </summary>
        </member>
        <member name="M:Xunit.ConfigReader_Json.Load(System.IO.Stream)">
            <summary>
            Loads the test assembly configuration for the given test assembly from a JSON stream. Caller is responsible for opening the stream.
            </summary>
            <param name="configStream">Stream containing config for an assembly</param>
            <returns>The test assembly configuration.</returns>
        </member>
        <member name="M:Xunit.ConfigReader_Json.Load(System.String,System.String)">
            <summary>
            Loads the test assembly configuration for the given test assembly.
            </summary>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <returns>The test assembly configuration.</returns>
        </member>
        <member name="T:Xunit.DefaultTestCaseBulkDeserializer">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.DefaultTestCaseBulkDeserializer.#ctor(Xunit.Abstractions.ITestFrameworkExecutor)">
            <summary/>
        </member>
        <member name="M:Xunit.DefaultTestCaseBulkDeserializer.BulkDeserialize(System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DefaultTestCaseDescriptorProvider">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.DefaultTestCaseDescriptorProvider.#ctor(Xunit.Abstractions.ITestFrameworkDiscoverer)">
            <summary/>
        </member>
        <member name="M:Xunit.DefaultTestCaseDescriptorProvider.GetTestCaseDescriptors(System.Collections.Generic.List{Xunit.Abstractions.ITestCase},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ITestCaseBulkDeserializer">
            <summary>
            INTERNAL INTERFACE. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.ITestCaseBulkDeserializer.BulkDeserialize(System.Collections.Generic.List{System.String})">
            <summary/>
        </member>
        <member name="T:Xunit.ITestCaseDescriptorProvider">
            <summary>
            INTERNAL INTERFACE. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.ITestCaseDescriptorProvider.GetTestCaseDescriptors(System.Collections.Generic.List{Xunit.Abstractions.ITestCase},System.Boolean)">
            <summary/>
        </member>
        <member name="T:Xunit.TestCaseDescriptor">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseDescriptor.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.TestCaseDescriptor.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.ClassName">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.DisplayName">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.MethodName">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.Serialization">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.SkipReason">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.SourceFileName">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.SourceLineNumber">
            <summary/>
        </member>
        <member name="F:Xunit.TestCaseDescriptor.Traits">
            <summary/>
        </member>
        <member name="P:Xunit.TestCaseDescriptor.UniqueID">
            <summary/>
        </member>
        <member name="T:Xunit.IRunnerLogger">
            <summary>
            Interface implemented by runners, passed to <see cref="T:Xunit.IRunnerReporter"/>, so that the
            report can log lines of text to the output device.
            </summary>
        </member>
        <member name="P:Xunit.IRunnerLogger.LockObject">
            <summary>
            Gets a lock object that can be used to ensure that multiple calls to
            log messages will always be grouped together.
            </summary>
        </member>
        <member name="M:Xunit.IRunnerLogger.LogMessage(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs a normal-priority message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.IRunnerLogger.LogImportantMessage(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs a high-priority message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.IRunnerLogger.LogWarning(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs a warning message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.IRunnerLogger.LogError(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs an error message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="T:Xunit.IRunnerReporter">
            <summary>
            This interface represents a reporter which is invoked by a test runner
            during test execution. The report can be explicitly invoked by a command
            line switch or implicitly invoked by being environmentally enabled (for
            example, a reporter that emits messages for TeamCity).
            </summary>
        </member>
        <member name="P:Xunit.IRunnerReporter.Description">
            <summary>
            Gets the description of the reporter. This is typically used when showing
            the user the invocation option for the reporter.
            </summary>
        </member>
        <member name="P:Xunit.IRunnerReporter.IsEnvironmentallyEnabled">
            <summary>
            Gets a value which indicates whether the reporter should be
            environmentally enabled.
            </summary>
        </member>
        <member name="P:Xunit.IRunnerReporter.RunnerSwitch">
            <summary>
            Gets a value which indicates a runner switch which can be used
            to explicitly enable the runner. If the return value is <c>null</c>,
            then the reported can only be environmentally enabled (implicitly).
            This value is used either as a command line switch (with the console or
            .NET CLI runner) or as a runner configuration value (with the MSBuild runner).
            </summary>
        </member>
        <member name="M:Xunit.IRunnerReporter.CreateMessageHandler(Xunit.IRunnerLogger)">
            <summary>
            Creates a message handler that will report messages for the given
            test assembly. Ideally, the handler should also implement <see cref="T:Xunit.IMessageSinkWithTypes"/>
            for optimal performance, but plain implementations of <see cref="T:Xunit.Abstractions.IMessageSink"/> are supported
            for backward compatibility reasons.
            </summary>
            <param name="logger">The logger used to send result messages to</param>
            <returns>The message handler that handles the messages</returns>
        </member>
        <member name="T:Xunit.ITestAssemblyDiscoveryFinished">
            <summary>
            A message sent to implementations of <see cref="T:Xunit.IRunnerReporter"/> when
            discovery is finished for a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryFinished.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryFinished.DiscoveryOptions">
            <summary>
            Gets the options that were used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryFinished.TestCasesDiscovered">
            <summary>
            Gets the number of test cases that were discovered. This is the raw
            number of test cases found before filtering is applied by the runner.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryFinished.TestCasesToRun">
            <summary>
            Gets the number of test cases that will be run. This is the number of
            test cases found after filtering is applied by the runner.
            </summary>
        </member>
        <member name="T:Xunit.ITestAssemblyDiscoveryStarting">
            <summary>
            A message sent to implementations of <see cref="T:Xunit.IRunnerReporter"/> when
            discovery is starting for a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryStarting.AppDomain">
            <summary>
            Gets a flag which indicates whether the tests will be discovered and run in a
            separate app domain.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryStarting.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryStarting.DiscoveryOptions">
            <summary>
            Gets the options that will be used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyDiscoveryStarting.ShadowCopy">
            <summary>
            Gets a flag which indicates whether shadow copies are being used. If app domains are
            not enabled, then this value is ignored.
            </summary>
        </member>
        <member name="T:Xunit.ITestAssemblyExecutionFinished">
            <summary>
            A message sent to implementations of <see cref="T:Xunit.IRunnerReporter"/> when
            execution is finished for a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyExecutionFinished.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyExecutionFinished.ExecutionOptions">
            <summary>
            Gets the options that were used during execution.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyExecutionFinished.ExecutionSummary">
            <summary>
            Gets the summary of the execution results for the test assembly.
            </summary>
        </member>
        <member name="T:Xunit.ITestAssemblyExecutionStarting">
            <summary>
            A message sent to implementations of <see cref="T:Xunit.IRunnerReporter"/> when
            execution is starting for a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyExecutionStarting.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.ITestAssemblyExecutionStarting.ExecutionOptions">
            <summary>
            Gets the options that will be used during execution.
            </summary>
        </member>
        <member name="T:Xunit.ITestExecutionSummary">
            <summary>
            A message sent to implementations of <see cref="T:Xunit.IRunnerReporter"/> when
            execution of all test assemblies has completed.
            </summary>
        </member>
        <member name="P:Xunit.ITestExecutionSummary.ElapsedClockTime">
            <summary>
            Gets the clock time elapsed when running the tests. This may different significantly
            from the sum of the times reported in the summaries, if the runner chose to run
            the test assemblies in parallel.
            </summary>
        </member>
        <member name="P:Xunit.ITestExecutionSummary.Summaries">
            <summary>
            Gets the summaries of all the tests run. The key is the display name of the test
            assembly; the value is the summary of test execution for that assembly.
            </summary>
        </member>
        <member name="T:Xunit.AppDomainSupport">
            <summary>
            Indicates the level of app domain support that the runner is requesting.
            </summary>
        </member>
        <member name="F:Xunit.AppDomainSupport.IfAvailable">
            <summary>
            Requests that app domains be used, if available; if app domains cannot be used, then
            the tests will be discovered and run in the runner's app domain.
            </summary>
        </member>
        <member name="F:Xunit.AppDomainSupport.Denied">
            <summary>
            Requires that tests be run in the runner's app domain. This is supported by all runners
            and all execution libraries.
            </summary>
        </member>
        <member name="T:Xunit.IFrontController">
            <summary>
            Represents a class which acts as a front controller for unit testing frameworks.
            This allows runners to run tests from multiple unit testing frameworks (in particular,
            hiding the differences between xUnit.net v1 and v2 tests).
            </summary>
        </member>
        <member name="P:Xunit.IFrontController.CanUseAppDomains">
            <summary>
            Gets a flag indicating whether this discovery/execution can use app domains.
            </summary>
        </member>
        <member name="T:Xunit.NullSourceInformationProvider">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/> that always returns no
            source information. Useful for test runners which don't need or cannot provide source
            information during discovery.
            </summary>
        </member>
        <member name="M:Xunit.NullSourceInformationProvider.GetSourceInformation(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.NullSourceInformationProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyConfiguration">
            <summary>
            Represents the configuration items set in the App.config file of a test assembly.
            Should be read with the <see cref="T:Xunit.ConfigReader"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.AppDomain">
            <summary>
            Gets or sets a flag indicating whether an app domain should be used to discover and run tests.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.AppDomainOrDefault">
            <summary>
            Gets or sets a flag indicating whether an app domain should be used to discover and run tests.
            If the flag is not set, returns the default value (<see cref="F:Xunit.AppDomainSupport.IfAvailable"/>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.DiagnosticMessages">
            <summary>
            Gets or sets a flag indicating that the end user wants diagnostic messages
            from the test framework.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.DiagnosticMessagesOrDefault">
            <summary>
            Gets a flag indicating that the end user wants diagnostic messages
            from the test framework. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.InternalDiagnosticMessages">
            <summary>
            Gets or sets a flag indicating that the end user wants internal diagnostic messages
            from the test framework.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.InternalDiagnosticMessagesOrDefault">
            <summary>
            Gets a flag indicating that the end user wants internal diagnostic messages
            from the test framework. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.LongRunningTestSeconds">
            <summary>
            Gets the number of seconds that a test can run before being considered "long running". Set to a positive
            value to enable the feature.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.LongRunningTestSecondsOrDefault">
            <summary>
            Gets the number of seconds that a test can run before being considered "long running". If the value is not
            set, returns the default value (-1).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MaxParallelThreads">
            <summary>
            Gets or sets the maximum number of thread to use when parallelizing this assembly.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MaxParallelThreadsOrDefault">
            <summary>
            Gets the maximum number of thread to use when parallelizing this assembly.
            If the value is not set, returns the default value (<see cref="P:System.Environment.ProcessorCount"/>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MethodDisplay">
            <summary>
            Gets or sets the default display name for test methods.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MethodDisplayOrDefault">
            <summary>
            Gets the default display name for test methods. If the value is not set, returns
            the default value (<see cref="F:Xunit.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MethodDisplayOptions">
            <summary>
            Gets or sets the default display options for test methods.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.MethodDisplayOptionsOrDefault">
            <summary>
            Gets the default display options for test methods. If the value is not set, returns
            the default value (<see cref="F:Xunit.TestMethodDisplayOptions.None"/>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ParallelizeAssembly">
            <summary>
            Gets or sets a flag indicating that this assembly is safe to parallelize against
            other assemblies.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ParallelizeAssemblyOrDefault">
            <summary>
            Gets a flag indicating that this assembly is safe to parallelize against
            other assemblies. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ParallelizeTestCollections">
            <summary>
            Gets or sets a flag indicating that this test assembly wants to run test collections
            in parallel against one another.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ParallelizeTestCollectionsOrDefault">
            <summary>
            Gets a flag indicating that this test assembly wants to run test collections
            in parallel against one another. If the flag is not set, returns the default
            value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.PreEnumerateTheories">
            <summary>
            Gets or sets a flag indicating whether theory data should be pre-enumerated during
            test discovery.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.PreEnumerateTheoriesOrDefault">
            <summary>
            Gets a flag indicating whether theory data should be pre-enumerated during
            test discovery. If the flag is not set, returns the default value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ShadowCopy">
            <summary>
            Gets or sets a flag indicating whether shadow copies should be used.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.ShadowCopyOrDefault">
            <summary>
            Gets a flag indicating whether shadow copies should be used. If the flag is not set,
            returns the default value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.StopOnFail">
            <summary>
            Gets or sets a flag indicating whether testing should stop on a failure.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyConfiguration.StopOnFailOrDefault">
            <summary>
            Gets a flag indicating whether testing should stop on a test failure. If the flag is not set,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="T:Xunit.TestFrameworkOptions">
            <summary>
            Represents options passed to a test framework for discovery or execution.
            </summary>
        </member>
        <member name="M:Xunit.TestFrameworkOptions.ForDiscovery(Xunit.TestAssemblyConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Xunit.TestFrameworkOptions"/>
            </summary>
            <param name="configuration">The optional configuration to copy values from.</param>
        </member>
        <member name="M:Xunit.TestFrameworkOptions.ForExecution(Xunit.TestAssemblyConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Xunit.TestFrameworkOptions"/>
            </summary>
            <param name="configuration">The optional configuration to copy values from.</param>
        </member>
        <member name="M:Xunit.TestFrameworkOptions.GetValue``1(System.String)">
            <summary>
            Gets a value from the options collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Xunit.TestFrameworkOptions.SetValue``1(System.String,``0)">
            <summary>
            Sets a value into the options collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Xunit.Xunit1AssemblyInfo">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/> for xUnit.net v1.
            </summary>
        </member>
        <member name="M:Xunit.Xunit1AssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit1AssemblyInfo" /> class.
            </summary>
            <param name="assemblyFileName">The filename of the test assembly.</param>
        </member>
        <member name="P:Xunit.Xunit1AssemblyInfo.AssemblyFileName">
            <summary>
            Gets the filename of the test assembly.
            </summary>
        </member>
        <member name="T:Xunit.Xunit1ReflectionWrapper">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>, <see cref="T:Xunit.Abstractions.ITypeInfo"/>
            and <see cref="T:Xunit.Abstractions.IMethodInfo"/> for xUnit.net v1 tests.
            </summary>
        </member>
        <member name="M:Xunit.Xunit1ReflectionWrapper.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit1ReflectionWrapper" /> class.
            </summary>
            <param name="assemblyFileName">The assembly under test.</param>
            <param name="typeName">The type under test.</param>
            <param name="methodName">The method under test.</param>
        </member>
        <member name="P:Xunit.Xunit1ReflectionWrapper.AssemblyFileName">
            <summary>
            Gets the name of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Xunit1ReflectionWrapper.MethodName">
            <summary>
            Gets the name of the method under test.
            </summary>
        </member>
        <member name="P:Xunit.Xunit1ReflectionWrapper.TypeName">
            <summary>
            Gets the name of the type under test.
            </summary>
        </member>
        <member name="P:Xunit.Xunit1ReflectionWrapper.UniqueID">
            <summary>
            Gets the unique ID for the test.
            </summary>
        </member>
        <member name="T:Xunit.Xunit1RunSummary">
            <summary>
            Collects statistics from running tests.
            </summary>
        </member>
        <member name="F:Xunit.Xunit1RunSummary.Continue">
            <summary>
            A flag that indicates whether or not to continue running tests.
            </summary>
        </member>
        <member name="F:Xunit.Xunit1RunSummary.Total">
            <summary>
            The total number of tests run.
            </summary>
        </member>
        <member name="F:Xunit.Xunit1RunSummary.Failed">
            <summary>
            The number of tests that failed.
            </summary>
        </member>
        <member name="F:Xunit.Xunit1RunSummary.Skipped">
            <summary>
            The number of tests that were skipped.
            </summary>
        </member>
        <member name="F:Xunit.Xunit1RunSummary.Time">
            <summary>
            The time spent running the tests.
            </summary>
        </member>
        <member name="M:Xunit.Xunit1RunSummary.Aggregate(Xunit.Xunit1RunSummary)">
            <summary>
            Aggregates the current results with the other results.
            </summary>
            <param name="other">The other result.</param>
        </member>
        <member name="M:Xunit.Xunit1RunSummary.Reset">
            <summary>
            Resets the counted results back to zero.
            </summary>
        </member>
        <member name="T:Xunit.Xunit1Test">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ITest"/> for xUnit v1.
            </summary>
        </member>
        <member name="M:Xunit.Xunit1Test.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit1Test"/> class.
            </summary>
            <param name="testCase">The test case this test belongs to.</param>
            <param name="displayName">The display name for this test.</param>
        </member>
        <member name="P:Xunit.Xunit1Test.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1Test.TestCase">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Xunit1TestCase">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ITestCase"/> that adapts xUnit.net v1's XML-based APIs
            into xUnit.net v2's object-based APIs.
            </summary>
        </member>
        <member name="M:Xunit.Xunit1TestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Xunit1TestCase.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            Initializes a new instance  of the <see cref="T:Xunit.Xunit1TestCase"/> class.
            </summary>
            <param name="assemblyFileName">The assembly under test.</param>
            <param name="configFileName">The configuration file name.</param>
            <param name="typeName">The type under test.</param>
            <param name="methodName">The method under test.</param>
            <param name="displayName">The display name of the unit test.</param>
            <param name="traits">The traits of the unit test.</param>
            <param name="skipReason">The skip reason, if the test is skipped.</param>
        </member>
        <member name="P:Xunit.Xunit1TestCase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.SourceInformation">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.TestMethod">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.TestMethodArguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit1TestCase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit1TestCase.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit1TestCase.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestAssembly#Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.ConfigFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestCollection#CollectionDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestCollection#DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestCollection#TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestCollection#UniqueID">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestClass#Class">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestClass#TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestMethod#Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit1TestCase.Xunit#Abstractions#ITestMethod#TestClass">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Xunit2">
            <summary>
            This class be used to do discovery and execution of xUnit.net v2 tests
            using a reflection-based implementation of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Xunit2.#ctor(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit2"/> class.
            </summary>
            <param name="appDomainSupport">Determines whether tests should be run in a separate app domain.</param>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="shadowCopy">If set to <c>true</c>, runs tests in a shadow copied app domain, which allows
            tests to be discovered and run without locking assembly files on disk.</param>
            <param name="shadowCopyFolder">The path on disk to use for shadow copying; if <c>null</c>, a folder
            will be automatically (randomly) generated</param>
            <param name="diagnosticMessageSink">The message sink which received <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.</param>
            <param name="verifyTestAssemblyExists">Determines whether or not the existence of the test assembly is verified.</param>
        </member>
        <member name="M:Xunit.Xunit2.BulkDeserialize(System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2.RunAll(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running all the xUnit.net v2 tests in the assembly.
            </summary>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options to be used during test discovery.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="M:Xunit.Xunit2.RunTests(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running the selected xUnit.net v2 tests.
            </summary>
            <param name="testCases">The test cases to run; if null, all tests in the assembly are run.</param>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="T:Xunit.Xunit2Discoverer">
            <summary>
            This class be used to do discovery of xUnit.net v2 tests, via any implementation
            of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>, including AST-based runners like CodeRush and
            Resharper. Runner authors who are not using AST-based discovery are strongly
            encouraged to use <see cref="T:Xunit.XunitFrontController"/> instead.
            </summary>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.#ctor(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IAssemblyInfo,System.String,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Xunit2Discoverer"/> class.
            </summary>
            <param name="appDomainSupport">Determines whether tests should be run in a separate app domain.</param>
            <param name="sourceInformationProvider">The source code information provider.</param>
            <param name="assemblyInfo">The assembly to use for discovery</param>
            <param name="xunitExecutionAssemblyPath">The path on disk of xunit.execution.dll; if <c>null</c>, then
            the location of xunit.execution.dll is implied based on the location of the test assembly</param>
            <param name="shadowCopyFolder">The path on disk to use for shadow copying; if <c>null</c>, a folder
            will be automatically (randomly) generated</param>
            <param name="diagnosticMessageSink">The message sink which received <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.</param>
            <param name="verifyAssembliesOnDisk">Determines whether or not to check for the existence of assembly files.</param>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.CanUseAppDomains">
            <summary>
            Gets a value indicating whether the tests can use app domains (must be linked against desktop execution library).
            </summary>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to report diagnostic messages.
            </summary>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.Framework">
            <summary>
            Returns the test framework from the remote app domain.
            </summary>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Xunit2Discoverer.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.CreateOptimizedRemoteMessageSink(Xunit.Abstractions.IMessageSink)">
            <summary>
            Creates a high performance cross AppDomain message sink that utilizes <see cref="T:Xunit.IMessageSinkWithTypes"/>
            which can be passed to <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> and <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/>.
            </summary>
            <param name="sink">The local message sink to receive the messages.</param>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all xUnit.net v2 tests in an assembly.
            </summary>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all xUnit.net v2 tests in a class.
            </summary>
            <param name="typeName">The fully qualified type name to find tests in.</param>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.GetTestCaseDescriptors(System.Collections.Generic.List{Xunit.Abstractions.ITestCase},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Xunit2Discoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.VisualStudioSourceInformationProvider">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/> that will provide source information
            when running inside of Visual Studio (via the DiaSession class).
            </summary>
        </member>
        <member name="M:Xunit.VisualStudioSourceInformationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.VisualStudioSourceInformationProvider" /> class.
            </summary>
            <param name="assemblyFileName">The assembly file name.</param>
        </member>
        <member name="M:Xunit.VisualStudioSourceInformationProvider.GetSourceInformation(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.VisualStudioSourceInformationProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.XunitFrontController">
            <summary>
            Default implementation of <see cref="T:Xunit.IFrontController"/> which supports running tests from
            both xUnit.net v1 and v2.
            </summary>
        </member>
        <member name="M:Xunit.XunitFrontController.#ctor">
            <summary>
            This constructor is for unit testing purposes only.
            </summary>
        </member>
        <member name="M:Xunit.XunitFrontController.#ctor(Xunit.AppDomainSupport,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.XunitFrontController"/> class.
            </summary>
            <param name="appDomainSupport">Determines whether tests should be run in a separate app domain.</param>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="shadowCopy">If set to <c>true</c>, runs tests in a shadow copied app domain, which allows
            tests to be discovered and run without locking assembly files on disk.</param>
            <param name="shadowCopyFolder">The path on disk to use for shadow copying; if <c>null</c>, a folder
            will be automatically (randomly) generated</param>
            <param name="sourceInformationProvider">The source information provider. If <c>null</c>, uses the default (<see cref="T:Xunit.VisualStudioSourceInformationProvider"/>).</param>
            <param name="diagnosticMessageSink">The message sink which received <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.</param>
        </member>
        <member name="P:Xunit.XunitFrontController.CanUseAppDomains">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.XunitFrontController.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.XunitFrontController.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.BulkDeserialize(System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.CreateInnerController">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:Xunit.XunitFrontController.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Find(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.GetTestCaseDescriptors(System.Collections.Generic.List{Xunit.Abstractions.ITestCase},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.RunAll(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.RunTests(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XunitFrontController.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.IMessageSinkMessageWithTypes">
            <summary>
            Identifies a message that can return its own type information.
            </summary>
        </member>
        <member name="P:Xunit.IMessageSinkMessageWithTypes.InterfaceTypes">
            <summary>
            Gets the interface type full names of the implemented interfaces.
            </summary>
        </member>
        <member name="T:Xunit.IMessageSinkWithTypes">
            <summary>
            Represents an endpoint for the reception of test messages. This endpoint can have the list of types
            of the message passed in to optimize the performance of message dispatching.
            </summary>
        </member>
        <member name="M:Xunit.IMessageSinkWithTypes.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reports the presence of a message on the message bus with an optional list of message types.
            This method should never throw exceptions.
            </summary>
            <param name="message">The message from the message bus.</param>
            <param name="messageTypes">The list of message types, or <c>null</c>.</param>
            <returns>Return <c>true</c> to continue running tests, or <c>false</c> to stop.</returns>
        </member>
        <member name="T:Xunit.LongRunningTestsSummary">
            <summary>
            Represents information about long running tests from <see cref="T:Xunit.DelegatingLongRunningTestDetectionSink"/>.
            </summary>
        </member>
        <member name="M:Xunit.LongRunningTestsSummary.#ctor(System.TimeSpan,System.Collections.Generic.IDictionary{Xunit.Abstractions.ITestCase,System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.LongRunningTestsSummary"/> class.
            </summary>
            <param name="configuredLongRunningTime">Configured notification time</param>
            <param name="testCases">Tests</param>
        </member>
        <member name="P:Xunit.LongRunningTestsSummary.ConfiguredLongRunningTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.LongRunningTestsSummary.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.MessageSinkAdapter">
            <summary>
            Adapts an implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/> to provide an implementation
            of <see cref="T:Xunit.Abstractions.IMessageSink"/>.
            </summary>
        </member>
        <member name="M:Xunit.MessageSinkAdapter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkAdapter.GetImplementedInterfaces(Xunit.Abstractions.IMessageSinkMessage)">
            <summary>
            Returns the implemented interface types, if known.
            </summary>
            <param name="message">The message interfaces to retrieve.</param>
            <returns>The hash set of interfaces, if known; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.MessageSinkAdapter.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkAdapter.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkAdapter.Wrap(Xunit.IMessageSinkWithTypes)">
            <summary>
            Determines whether the given sink is already an implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/>,
            and if not, creates a wrapper to adapt it.
            </summary>
            <param name="sink">The sink to test, and potentially adapt.</param>
        </member>
        <member name="T:Xunit.MessageSinkWithTypesAdapter">
            <summary>
            Adapts an implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> to provide an implementation
            of <see cref="T:Xunit.IMessageSinkWithTypes"/> (albeit one without the typical performance
            benefits associated with the latter interface).
            </summary>
        </member>
        <member name="M:Xunit.MessageSinkWithTypesAdapter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkWithTypesAdapter.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkWithTypesAdapter.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MessageSinkWithTypesAdapter.Wrap(Xunit.Abstractions.IMessageSink)">
            <summary>
            Determines whether the given sink is already an implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/>,
            and if not, creates a wrapper to adapt it.
            </summary>
            <param name="sink">The sink to test, and potentially adapt.</param>
        </member>
        <member name="T:Xunit.TestAssemblyDiscoveryFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestAssemblyDiscoveryFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyDiscoveryFinished.#ctor(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyDiscoveryFinished"/> class.
            </summary>
            <param name="assembly">Information about the assembly that is being discovered</param>
            <param name="discoveryOptions">The discovery options</param>
            <param name="testCasesDiscovered">The number of test cases discovered</param>
            <param name="testCasesToRun">The number of test cases to be run</param>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryFinished.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryFinished.DiscoveryOptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryFinished.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryFinished.TestCasesDiscovered">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryFinished.TestCasesToRun">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyDiscoveryStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestAssemblyDiscoveryStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyDiscoveryStarting.#ctor(Xunit.XunitProjectAssembly,System.Boolean,System.Boolean,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyDiscoveryStarting"/> class.
            </summary>
            <param name="assembly">Information about the assembly that is being discovered</param>
            <param name="appDomain">Indicates whether the tests will be discovered and run in a separate app domain</param>
            <param name="shadowCopy">Indicates whether shadow copying is being used</param>
            <param name="discoveryOptions">The discovery options</param>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryStarting.AppDomain">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryStarting.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryStarting.DiscoveryOptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryStarting.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyDiscoveryStarting.ShadowCopy">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyExecutionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestAssemblyExecutionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyExecutionFinished.#ctor(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkExecutionOptions,Xunit.ExecutionSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyExecutionFinished"/> class.
            </summary>
            <param name="assembly">Information about the assembly that is being discovered</param>
            <param name="executionOptions">The execution options</param>
            <param name="executionSummary">The execution summary</param>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionFinished.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionFinished.ExecutionOptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionFinished.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionFinished.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyExecutionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestAssemblyExecutionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyExecutionStarting.#ctor(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyExecutionStarting"/> class.
            </summary>
            <param name="assembly">Information about the assembly that is being discovered</param>
            <param name="executionOptions">The execution options</param>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionStarting.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionStarting.ExecutionOptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyExecutionStarting.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestExecutionSummary">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestExecutionSummary"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestExecutionSummary.#ctor(System.TimeSpan,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Xunit.ExecutionSummary}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestExecutionSummary.ElapsedClockTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestExecutionSummary.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestExecutionSummary.Summaries">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.XunitFilters">
            <summary>
            Represents a set of filters for an <see cref="T:Xunit.XunitProject"/>.
            </summary>
        </member>
        <member name="M:Xunit.XunitFilters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.XunitFilters"/> class.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.ExcludedTraits">
            <summary>
            Gets the set of trait filters for tests to exclude.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.IncludedTraits">
            <summary>
            Gets the set of trait filters for tests to include.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.ExcludedClasses">
            <summary>
            Gets the set of class filters for test classes to exclude.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.IncludedClasses">
            <summary>
            Gets the set of class filters for test classes to include.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.ExcludedMethods">
            <summary>
            Gets the set of method filters for tests to exclude.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.IncludedMethods">
            <summary>
            Gets the set of method filters for tests to include.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.ExcludedNamespaces">
            <summary>
            Gets the set of assembly filters for tests to exclude.
            </summary>
        </member>
        <member name="P:Xunit.XunitFilters.IncludedNamespaces">
            <summary>
            Gets the set of assembly filters for tests to include.
            </summary>
        </member>
        <member name="M:Xunit.XunitFilters.Filter(Xunit.Abstractions.ITestCase)">
            <summary>
            Filters the given method using the defined filter values.
            </summary>
            <param name="testCase">The test case to filter.</param>
            <returns>Returns <c>true</c> if the test case passed the filter; returns <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Xunit.XunitProject">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:Xunit.XunitProject.#ctor">
            <summary/>
        </member>
        <member name="P:Xunit.XunitProject.Assemblies">
            <summary/>
        </member>
        <member name="P:Xunit.XunitProject.Filters">
            <summary/>
        </member>
        <member name="P:Xunit.XunitProject.Output">
            <summary/>
        </member>
        <member name="M:Xunit.XunitProject.Add(Xunit.XunitProjectAssembly)">
            <summary/>
        </member>
        <member name="M:Xunit.XunitProject.GetEnumerator">
            <summary/>
        </member>
        <member name="T:Xunit.XunitProjectAssembly">
            <summary>
            Represents an assembly in an <see cref="T:Xunit.XunitProject"/>.
            </summary>
        </member>
        <member name="P:Xunit.XunitProjectAssembly.AssemblyFilename">
            <summary>
            Gets or sets the assembly filename.
            </summary>
        </member>
        <member name="P:Xunit.XunitProjectAssembly.ConfigFilename">
            <summary>
            Gets or sets the config filename.
            </summary>
        </member>
        <member name="P:Xunit.XunitProjectAssembly.Configuration">
            <summary>
            Gets the configuration values read from the test assembly configuration file.
            </summary>
        </member>
        <member name="P:Xunit.XunitProjectAssembly.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether to shadow copy the assembly
            when running the tests.
            </summary>
        </member>
        <member name="T:Xunit.DefaultRunnerReporter">
            <summary>
            The default implementation of <see cref="T:Xunit.IRunnerReporter"/>, used
            by runners when there is no other overridden reporter. It returns
            an instance of <see cref="T:Xunit.DefaultRunnerReporterMessageHandler"/>.
            </summary>
        </member>
        <member name="P:Xunit.DefaultRunnerReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DefaultRunnerReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DefaultRunnerReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporter.CreateMessageHandler(Xunit.IRunnerLogger)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DefaultRunnerReporterMessageHandler">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> used to report
            messages for test runners.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.#ctor(Xunit.IRunnerLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DefaultRunnerReporterMessageHandler"/> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="P:Xunit.DefaultRunnerReporterMessageHandler.Logger">
            <summary>
            Get the logger used to report messages.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Escape(System.String)">
            <summary>
            Escapes text for display purposes.
            </summary>
            <param name="text">The text to be escaped</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(Xunit.Abstractions.ITestAssemblyMessage)">
            <summary>
            Gets the display name of a test assembly from a test assembly message.
            </summary>
            <param name="assemblyMessage">The test assembly message</param>
            <returns>The assembly display name</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(Xunit.XunitProjectAssembly)">
            <summary>
            Gets the display name of a test assembly from a test assembly message.
            </summary>
            <param name="assembly">The test assembly</param>
            <returns>The assembly display name</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.GetExecutionOptions(System.String)">
            <summary>
            Get the test framework options for the given assembly. If it cannot find them, then it
            returns a default set of options.
            </summary>
            <param name="assemblyFilename">The test assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.LogError(System.String,Xunit.Abstractions.IFailureInformation)">
            <summary>
            Logs an error message to the logger.
            </summary>
            <param name="failureType">The type of the failure</param>
            <param name="failureInfo">The failure information</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.LogStackTrace(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs a stack trace to the logger.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.LogOutput(Xunit.StackFrameInfo,System.String)">
            <summary>
            Lots test output to the logger.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.IErrorMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.ITestAssemblyDiscoveryFinished)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.ITestAssemblyDiscoveryStarting)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.ITestAssemblyExecutionFinished)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.ITestAssemblyExecutionStarting)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestAssemblyCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestCaseCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestClassCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestCollectionCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.ITestExecutionSummary)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestFailed)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestMethodCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestPassed)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.Visit(Xunit.Abstractions.ITestSkipped)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterMessageHandler.WriteDefaultSummary(Xunit.IRunnerLogger,Xunit.ITestExecutionSummary)">
            <summary>
            Writes the default summary to the given logger. Can be used by other reporters who also wish to write the
            standard summary information.
            </summary>
            <param name="logger">The logger used to send result messages to.</param>
            <param name="executionSummary">The execution summary to display.</param>
        </member>
        <member name="T:Xunit.DefaultRunnerReporterWithTypes">
            <summary>
            The default implementation of <see cref="T:Xunit.IRunnerReporter"/>, used
            by runners when there is no other overridden reporter. It returns
            an instance of <see cref="T:Xunit.DefaultRunnerReporterWithTypesMessageHandler"/>.
            </summary>
        </member>
        <member name="P:Xunit.DefaultRunnerReporterWithTypes.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DefaultRunnerReporterWithTypes.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DefaultRunnerReporterWithTypes.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypes.CreateMessageHandler(Xunit.IRunnerLogger)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DefaultRunnerReporterWithTypesMessageHandler">
            <summary>
            Default implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/> used to report
            messages for test runners.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.#ctor(Xunit.IRunnerLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DefaultRunnerReporterWithTypesMessageHandler"/> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="P:Xunit.DefaultRunnerReporterWithTypesMessageHandler.Logger">
            <summary>
            Get the logger used to report messages.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.Escape(System.String)">
            <summary>
            Escapes text for display purposes.
            </summary>
            <param name="text">The text to be escaped</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.GetAssemblyDisplayName(Xunit.Abstractions.ITestAssemblyMessage)">
            <summary>
            Gets the display name of a test assembly from a test assembly message.
            </summary>
            <param name="assemblyMessage">The test assembly message</param>
            <returns>The assembly display name</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.GetAssemblyDisplayName(Xunit.XunitProjectAssembly)">
            <summary>
            Gets the display name of a test assembly from a test assembly message.
            </summary>
            <param name="assembly">The test assembly</param>
            <returns>The assembly display name</returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.GetExecutionOptions(System.String)">
            <summary>
            Get the test framework options for the given assembly. If it cannot find them, then it
            returns a default set of options.
            </summary>
            <param name="assemblyFilename">The test assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.LogError(System.String,Xunit.Abstractions.IFailureInformation)">
            <summary>
            Logs an error message to the logger.
            </summary>
            <param name="failureType">The type of the failure</param>
            <param name="failureInfo">The failure information</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.LogStackTrace(Xunit.StackFrameInfo,System.String)">
            <summary>
            Logs a stack trace to the logger.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.LogOutput(Xunit.StackFrameInfo,System.String)">
            <summary>
            Lots test output to the logger.
            </summary>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleErrorMessage(Xunit.MessageHandlerArgs{Xunit.Abstractions.IErrorMessage})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.IErrorMessage"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestAssemblyDiscoveryFinished(Xunit.MessageHandlerArgs{Xunit.ITestAssemblyDiscoveryFinished})">
            <summary>
            Called when <see cref="T:Xunit.ITestAssemblyDiscoveryFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestAssemblyDiscoveryStarting(Xunit.MessageHandlerArgs{Xunit.ITestAssemblyDiscoveryStarting})">
            <summary>
            Called when <see cref="T:Xunit.ITestAssemblyDiscoveryStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestAssemblyExecutionFinished(Xunit.MessageHandlerArgs{Xunit.ITestAssemblyExecutionFinished})">
            <summary>
            Called when <see cref="T:Xunit.ITestAssemblyExecutionFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestAssemblyExecutionStarting(Xunit.MessageHandlerArgs{Xunit.ITestAssemblyExecutionStarting})">
            <summary>
            Called when <see cref="T:Xunit.ITestAssemblyExecutionStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestAssemblyCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestAssemblyCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestAssemblyCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestCaseCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestCaseCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestCaseCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestClassCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestClassCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestClassCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestCollectionCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestCollectionCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestCollectionCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestExecutionSummary(Xunit.MessageHandlerArgs{Xunit.ITestExecutionSummary})">
            <summary>
            Called when <see cref="T:Xunit.ITestExecutionSummary"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestFailed(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestFailed})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestFailed"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestMethodCleanupFailure(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestMethodCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestMethodCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestPassed(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestPassed})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestPassed"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.HandleTestSkipped(Xunit.MessageHandlerArgs{Xunit.Abstractions.ITestSkipped})">
            <summary>
            Called when <see cref="T:Xunit.Abstractions.ITestSkipped"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.DefaultRunnerReporterWithTypesMessageHandler.WriteDefaultSummary(Xunit.IRunnerLogger,Xunit.ITestExecutionSummary)">
            <summary>
            Writes the default summary to the given logger. Can be used by other reporters who also wish to write the
            standard summary information.
            </summary>
            <param name="logger">The logger used to send result messages to.</param>
            <param name="executionSummary">The execution summary to display.</param>
        </member>
        <member name="T:Xunit.Runners.AssemblyRunner">
            <summary>
            A class which makes it simpler for casual runner authors to find and run tests and get results.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnDiagnosticMessage">
            <summary>
            Set to get notification of diagnostic messages.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnDiscoveryComplete">
            <summary>
            Set to get notification of when test discovery is complete.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnErrorMessage">
            <summary>
            Set to get notification of error messages (unhandled exceptions outside of tests).
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnExecutionComplete">
            <summary>
            Set to get notification of when test execution is complete.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestFailed">
            <summary>
            Set to get notification of failed tests.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestFinished">
            <summary>
            Set to get notification of finished tests (regardless of outcome).
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestOutput">
            <summary>
            Set to get real-time notification of test output (for xUnit.net v2 tests only).
            Note that output is captured and reported back to all the test completion Info>s
            in addition to being sent to this Info>.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestPassed">
            <summary>
            Set to get notification of passing tests.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestSkipped">
            <summary>
            Set to get notification of skipped tests.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.OnTestStarting">
            <summary>
            Set to get notification of when tests start running.
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.Status">
            <summary>
            Gets the current status of the assembly runner
            </summary>
        </member>
        <member name="P:Xunit.Runners.AssemblyRunner.TestCaseFilter">
            <summary>
            Set to be able to filter the test cases to decide which ones to run. If this is not set,
            then all test cases will be run.
            </summary>
        </member>
        <member name="M:Xunit.Runners.AssemblyRunner.Cancel">
            <summary>
            Call to request that the current run be cancelled. Note that cancellation may not be
            instantaneous, and even after cancellation has been acknowledged, you can expect to
            receive all the cleanup-related messages.
            </summary>
        </member>
        <member name="M:Xunit.Runners.AssemblyRunner.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runners.AssemblyRunner.Start(System.String,System.Nullable{System.Boolean},System.Nullable{Xunit.TestMethodDisplay},System.Nullable{Xunit.TestMethodDisplayOptions},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Starts running tests from a single type (if provided) or the whole assembly (if not). This call returns
            immediately, and status results are dispatched to the Info>s on this class. Callers can check <see cref="P:Xunit.Runners.AssemblyRunner.Status"/>
            to find out the current status.
            </summary>
            <param name="typeName">The (optional) type name of the single test class to run</param>
            <param name="diagnosticMessages">Set to <c>true</c> to enable diagnostic messages; set to <c>false</c> to disable them.
            By default, uses the value from the assembly configuration file.</param>
            <param name="methodDisplay">Set to choose the default display name style for test methods.
            By default, uses the value from the assembly configuration file. (This parameter is ignored for xUnit.net v1 tests.)</param>
            <param name="methodDisplayOptions">Set to choose the default display name style options for test methods.
            By default, uses the value from the assembly configuration file. (This parameter is ignored for xUnit.net v1 tests.)</param>
            <param name="preEnumerateTheories">Set to <c>true</c> to pre-enumerate individual theory tests; set to <c>false</c> to use
            a single test case for the theory. By default, uses the value from the assembly configuration file. (This parameter is ignored
            for xUnit.net v1 tests.)</param>
            <param name="parallel">Set to <c>true</c> to run test collections in parallel; set to <c>false</c> to run them sequentially.
            By default, uses the value from the assembly configuration file. (This parameter is ignored for xUnit.net v1 tests.)</param>
            <param name="maxParallelThreads">Set to 0 to use unlimited threads; set to any other positive integer to limit to an exact number
            of threads. By default, uses the value from the assembly configuration file. (This parameter is ignored for xUnit.net v1 tests.)</param>
            <param name="internalDiagnosticMessages">Set to <c>true</c> to enable internal diagnostic messages; set to <c>false</c> to disable them.
            By default, uses the value from the assembly configuration file.</param>
        </member>
        <member name="M:Xunit.Runners.AssemblyRunner.WithoutAppDomain(System.String)">
            <summary>
            Creates an assembly runner that discovers and runs tests without a separate app domain.
            </summary>
            <param name="assemblyFileName">The test assembly.</param>
        </member>
        <member name="T:Xunit.Runners.AssemblyRunnerStatus">
            <summary>
            An enumeration which describes the current state of the system
            </summary>
        </member>
        <member name="F:Xunit.Runners.AssemblyRunnerStatus.Idle">
            <summary>The system is not discovering or executing tests</summary>
        </member>
        <member name="F:Xunit.Runners.AssemblyRunnerStatus.Discovering">
            <summary>The system is discovering tests</summary>
        </member>
        <member name="F:Xunit.Runners.AssemblyRunnerStatus.Executing">
            <summary>The system is executing tests</summary>
        </member>
        <member name="T:Xunit.Runners.DiagnosticMessageInfo">
            <summary>
            Represents a diagnostic message from the xUnit.net system or third party extension.
            </summary>
        </member>
        <member name="M:Xunit.Runners.DiagnosticMessageInfo.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.DiagnosticMessageInfo.Message">
            <summary>
            The diagnostic message.
            </summary>
        </member>
        <member name="T:Xunit.Runners.DiscoveryCompleteInfo">
            <summary>
            Represents test discovery being completed.
            </summary>
        </member>
        <member name="M:Xunit.Runners.DiscoveryCompleteInfo.#ctor(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.DiscoveryCompleteInfo.TestCasesDiscovered">
            <summary>
            The number of test cases that were discovered.
            </summary>
        </member>
        <member name="P:Xunit.Runners.DiscoveryCompleteInfo.TestCasesToRun">
            <summary>
            The number of test cases that will be run, after filtering was applied.
            </summary>
        </member>
        <member name="T:Xunit.Runners.ErrorMessageInfo">
            <summary>
            Represents an error that happened outside the scope of a running test.
            </summary>
        </member>
        <member name="M:Xunit.Runners.ErrorMessageInfo.#ctor(Xunit.Runners.ErrorMessageType,System.String,System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.ErrorMessageInfo.MesssageType">
            <summary>
            The type of error condition that was encountered.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ErrorMessageInfo.ExceptionType">
            <summary>
            The exception that caused the test failure.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ErrorMessageInfo.ExceptionMessage">
            <summary>
            The message from the exception that caused the test failure.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ErrorMessageInfo.ExceptionStackTrace">
            <summary>
            The stack trace from the exception that caused the test failure.
            </summary>
        </member>
        <member name="T:Xunit.Runners.ErrorMessageType">
            <summary>
            An enumeration which indicates the type of error message (for <see cref="P:Xunit.Runners.AssemblyRunner.OnErrorMessage"/>).
            </summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.CatastrophicError">
            <summary>An unhandled exception occurred that disrupted the execution engine</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestAssemblyCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test assembly</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestCollectionCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test collection</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestClassCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test class</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestMethodCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test method</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestCaseCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test case</summary>
        </member>
        <member name="F:Xunit.Runners.ErrorMessageType.TestCleanupFailure">
            <summary>An unhandled exception happened while cleaning up from the test</summary>
        </member>
        <member name="T:Xunit.Runners.ExecutionCompleteInfo">
            <summary>
            Represents test assembly execution being finished.
            </summary>
        </member>
        <member name="M:Xunit.Runners.ExecutionCompleteInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.ExecutionCompleteInfo.TotalTests">
            <summary>
            The total number of tests in the assembly.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ExecutionCompleteInfo.TestsFailed">
            <summary>
            The number of the tests that failed.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ExecutionCompleteInfo.TestsSkipped">
            <summary>
            The number of tests that were skipped.
            </summary>
        </member>
        <member name="P:Xunit.Runners.ExecutionCompleteInfo.ExecutionTime">
            <summary>
            The total execution time spent running tests.
            </summary>
        </member>
        <member name="F:Xunit.Runners.ExecutionCompleteInfo.Empty">
            <summary>
            Used to report results when no tests are executed.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestExecutedInfo">
            <summary>
            Represents information about a test that was executed.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestExecutedInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.Decimal,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.TestExecutedInfo.ExecutionTime">
            <summary>
            The number of seconds the test spent executing.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestExecutedInfo.Output">
            <summary>
            The output from the test.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestFailedInfo">
            <summary>
            Represents a test that failed.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestFailedInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.TestFailedInfo.ExceptionType">
            <summary>
            The exception that caused the test failure.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestFailedInfo.ExceptionMessage">
            <summary>
            The message from the exception that caused the test failure.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestFailedInfo.ExceptionStackTrace">
            <summary>
            The stack trace from the exception that caused the test failure.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestFinishedInfo">
            <summary>
            Represents a test that finished, regardless of the result.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestFinishedInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.Decimal,System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.Runners.TestInfo">
            <summary>
            A base class which contains information about a test.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.TestInfo.TypeName">
            <summary>
            The fully qualified type name of the class that contains the test.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestInfo.MethodName">
            <summary>
            The name of the method that contains the test.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestInfo.Traits">
            <summary>
            The traits associated with the test.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestInfo.TestDisplayName">
            <summary>
            The display name for the test.
            </summary>
        </member>
        <member name="P:Xunit.Runners.TestInfo.TestCollectionDisplayName">
            <summary>
            The display name of the test collection the test belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestOutputInfo">
            <summary>
            Represents live test output.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestOutputInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.TestOutputInfo.Output">
            <summary>
            The output from the test.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestPassedInfo">
            <summary>
            Represents a test that passed.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestPassedInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.Decimal,System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.Runners.TestSkippedInfo">
            <summary>
            Represents a test that was skipped.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestSkippedInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Runners.TestSkippedInfo.SkipReason">
            <summary>
            Gets the reason that was given for skipping the test.
            </summary>
        </member>
        <member name="T:Xunit.Runners.TestStartingInfo">
            <summary>
            Represents a test that is starting.
            </summary>
        </member>
        <member name="M:Xunit.Runners.TestStartingInfo.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.AggregateMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/> which dispatches messages
            to one or more individual message sinks.
            </summary>
        </member>
        <member name="P:Xunit.AggregateMessageSink.AggregatedSinks">
            <summary>
            The list of event dispatchers that are registered with the system.
            </summary>
        </member>
        <member name="M:Xunit.AggregateMessageSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.AggregateMessageSink.GetOrCreateAggregatedSink``1(``0@)">
            <summary>
            Gets a dispatcher, optionally creating and registering it if it doesn't exist.
            </summary>
            <typeparam name="TDispatcher">The type of the dispatcher</typeparam>
            <param name="value">The dispatcher</param>
            <returns>The dispatcher</returns>
        </member>
        <member name="M:Xunit.AggregateMessageSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reports the presence of a message on the message bus with an optional list of message types.
            This method should never throw exceptions.
            </summary>
            <param name="message">The message from the message bus.</param>
            <param name="messageTypes">The list of message types, or <c>null</c>.</param>
            <returns>Return <c>true</c> to continue running tests, or <c>false</c> to stop.</returns>
        </member>
        <member name="T:Xunit.DelegatingExecutionSummarySink">
            <summary>
            A delegating implementation of <see cref="T:Xunit.IExecutionSink"/> which provides the execution
            summary and finished events when appropriate and cancellation support.
            </summary>
        </member>
        <member name="M:Xunit.DelegatingExecutionSummarySink.#ctor(Xunit.IMessageSinkWithTypes,System.Func{System.Boolean},System.Action{System.String,Xunit.ExecutionSummary})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DelegatingExecutionSummarySink"/> class.
            </summary>
            <param name="innerSink">The inner sink to pass messages to.</param>
            <param name="cancelThunk"></param>
            <param name="completionCallback"></param>
        </member>
        <member name="P:Xunit.DelegatingExecutionSummarySink.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DelegatingExecutionSummarySink.Finished">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingExecutionSummarySink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingExecutionSummarySink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DelegatingFailSkipSink">
            <summary>
            A delegating implementation of <see cref="T:Xunit.IExecutionSink"/> which converts all
            skipped tests into failures before passing them on to the inner sink.
            </summary>
        </member>
        <member name="M:Xunit.DelegatingFailSkipSink.#ctor(Xunit.IExecutionSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DelegatingFailSkipSink"/> class.
            </summary>
            <param name="innerSink">The sink to delegate messages to.</param>
        </member>
        <member name="P:Xunit.DelegatingFailSkipSink.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DelegatingFailSkipSink.Finished">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingFailSkipSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingFailSkipSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DelegatingLongRunningTestDetectionSink">
            <summary>
            A delegating implementation of <see cref="T:Xunit.IExecutionSink"/> which detects and reports when
            tests have become long-running (during otherwise idle time).
            </summary>
        </member>
        <member name="M:Xunit.DelegatingLongRunningTestDetectionSink.#ctor(Xunit.IExecutionSink,System.TimeSpan,Xunit.IMessageSinkWithTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DelegatingLongRunningTestDetectionSink"/> class, with
            long running test messages being delivered as <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> instances to the
            provided diagnostic message sink.
            </summary>
            <param name="innerSink">The inner sink to delegate to.</param>
            <param name="longRunningTestTime">The minimum amount of time a test runs to be considered long running.</param>
            <param name="diagnosticMessageSink">The message sink to send messages to.</param>
        </member>
        <member name="M:Xunit.DelegatingLongRunningTestDetectionSink.#ctor(Xunit.IExecutionSink,System.TimeSpan,System.Action{Xunit.LongRunningTestsSummary})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DelegatingLongRunningTestDetectionSink"/> class, with
            long running test messages being delivered as <see cref="T:Xunit.LongRunningTestsSummary"/> to the
            provided callback.
            </summary>
            <param name="innerSink">The inner sink to delegate to.</param>
            <param name="longRunningTestTime">The minimum amount of time a test runs to be considered long running.</param>
            <param name="callback">The callback to dispatch messages to.</param>
        </member>
        <member name="P:Xunit.DelegatingLongRunningTestDetectionSink.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DelegatingLongRunningTestDetectionSink.Finished">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DelegatingLongRunningTestDetectionSink.UtcNow">
            <summary>
            Returns the current time in UTC. Overrideable for testing purposes.
            </summary>
        </member>
        <member name="M:Xunit.DelegatingLongRunningTestDetectionSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingLongRunningTestDetectionSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingLongRunningTestDetectionSink.WaitForStopEvent(System.Int32)">
            <summary>
            Performs a Task-safe delay. Overrideable for testing purposes.
            </summary>
        </member>
        <member name="T:Xunit.DelegatingXmlCreationSink">
            <summary>
            A delegating implementation of <see cref="T:Xunit.IExecutionSink"/> which is responsible for
            creating the xUnit.net v2 XML output from the execution test results. This class is
            not available in .NET 3.5 because it relies upon XML LINQ.
            </summary>
        </member>
        <member name="M:Xunit.DelegatingXmlCreationSink.#ctor(Xunit.IExecutionSink,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DelegatingXmlCreationSink"/> class.
            </summary>
            <param name="innerSink"></param>
            <param name="assemblyElement"></param>
        </member>
        <member name="P:Xunit.DelegatingXmlCreationSink.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DelegatingXmlCreationSink.Finished">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingXmlCreationSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingXmlCreationSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DelegatingXmlCreationSink.XmlEscape(System.String)">
            <summary>
            Escapes a string for placing into the XML.
            </summary>
            <param name="value">The value to be escaped.</param>
            <returns>The escaped value.</returns>
        </member>
        <member name="T:Xunit.DiagnosticEventSink">
            <summary>
            Class that maps diagnostic messages to events.
            </summary>
        </member>
        <member name="E:Xunit.DiagnosticEventSink.DiagnosticMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.DiagnosticEventSink.ErrorMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IErrorMessage"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.DiagnosticEventSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DiagnosticEventSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DiscoveryEventSink">
            <summary>
            Class that maps test framework discovery messages to events.
            </summary>
        </member>
        <member name="E:Xunit.DiscoveryEventSink.DiscoveryCompleteMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.DiscoveryEventSink.TestCaseDiscoveryMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.DiscoveryEventSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DiscoveryEventSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ExecutionEventSink">
            <summary>
            Class that maps test framework execution messages to events.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.AfterTestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IAfterTestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.AfterTestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IAfterTestStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.BeforeTestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.BeforeTestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestAssemblyCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestAssemblyCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestAssemblyFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestAssemblyStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCaseCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCaseCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCaseFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCaseFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCaseStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCaseStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassConstructionFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassConstructionStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassDisposeFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassDisposeStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestClassStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestClassStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCollectionCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCollectionCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCollectionFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestCollectionStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestFailedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestFailed"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestMethodCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestMethodCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestMethodFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestMethodFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestMethodStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestMethodStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestOutputEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestOutput"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestPassedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestPassed"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestSkippedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestSkipped"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.ExecutionEventSink.TestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Abstractions.ITestStarting"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.ExecutionEventSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ExecutionEventSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.MessageHandler`1">
            <summary>
            Represents a handler for a specific <see cref="T:Xunit.Abstractions.IMessageSinkMessage"/>.
            </summary>
            <typeparam name="TMessage">The type of the message to be handled.</typeparam>
            <param name="args">The message.</param>
        </member>
        <member name="T:Xunit.MessageHandlerArgs">
            <summary>
            Allows cancellation during message handling.
            </summary>
        </member>
        <member name="P:Xunit.MessageHandlerArgs.IsStopped">
            <summary>
            Gets a value to indicate whether stop has been requested.
            </summary>
        </member>
        <member name="M:Xunit.MessageHandlerArgs.Stop">
            <summary>
            Call to indicate that execution should stop.
            </summary>
        </member>
        <member name="T:Xunit.MessageHandlerArgs`1">
            <summary>
            Wraps a specific <see cref="T:Xunit.Abstractions.IMessageSinkMessage"/> with the ability to cancel execution.
            </summary>
            <typeparam name="TMessage">The type of the message to be handled.</typeparam>
        </member>
        <member name="M:Xunit.MessageHandlerArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MessageHandlerArgs`1"/> class.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="P:Xunit.MessageHandlerArgs`1.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Xunit.RunnerEventSink">
            <summary>
            Class that maps test runner messages to events.
            </summary>
        </member>
        <member name="E:Xunit.RunnerEventSink.TestAssemblyDiscoveryFinishedEvent">
            <summary>
            Occurs when the runner is starting discovery for a given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.RunnerEventSink.TestAssemblyDiscoveryStartingEvent">
            <summary>
            Occurs when the runner has finished discovery for a given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.RunnerEventSink.TestAssemblyExecutionFinishedEvent">
            <summary>
            Occurs when the runner has finished executing the given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.RunnerEventSink.TestAssemblyExecutionStartingEvent">
            <summary>
            Occurs when the runner is starting to execution the given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.RunnerEventSink.TestExecutionSummaryEvent">
            <summary>
            Occurs when the runner has finished executing all test assemblies.
            </summary>
        </member>
        <member name="M:Xunit.RunnerEventSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.RunnerEventSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.IExecutionSink">
            <summary>
            Represents an <see cref="T:Xunit.IMessageSinkWithTypes"/> that can also provide execution
            information like an <see cref="T:Xunit.IExecutionVisitor"/>.
            </summary>
        </member>
        <member name="P:Xunit.IExecutionSink.ExecutionSummary">
            <summary>
            Gets the final execution summary, once the execution is finished.
            </summary>
        </member>
        <member name="P:Xunit.IExecutionSink.Finished">
            <summary>
            Gets an event which is signaled once execution is finished.
            </summary>
        </member>
        <member name="T:Xunit.TestDiscoverySink">
            <summary>
            An implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/> designed for test discovery for a
            single test assembly. The <see cref="P:Xunit.TestDiscoverySink.Finished"/> event is triggered when discovery is complete.
            </summary>
        </member>
        <member name="M:Xunit.TestDiscoverySink.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestDiscoverySink"/> class.
            </summary>
            <param name="cancelThunk">An optional thunk which can be used to control cancellation.</param>
        </member>
        <member name="P:Xunit.TestDiscoverySink.TestCases">
            <summary>
            The list of discovered test cases.
            </summary>
        </member>
        <member name="P:Xunit.TestDiscoverySink.Finished">
            <summary>
            Gets an event which is signaled once discovery is finished.
            </summary>
        </member>
        <member name="M:Xunit.TestDiscoverySink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestDiscoverySink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.IMessageSinkWithTypes"/> that provides access to events for all
            levels of reporting.
            </summary>
        </member>
        <member name="P:Xunit.TestMessageSink.Diagnostics">
            <summary>
            Gets a list of diagnostics events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.TestMessageSink.Discovery">
            <summary>
            Gets a list of discovery events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.TestMessageSink.Execution">
            <summary>
            Gets a list of execution events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.TestMessageSink.Runner">
            <summary>
            Gets a list of runner events that can be subscribed to.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ConsoleRunnerLogger">
            <summary>
            An implementation of <see cref="T:Xunit.IRunnerLogger"/> which logs messages
            to <see cref="T:System.Console"/> and <see cref="P:System.Console.Error"/>.
            </summary>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.ConsoleRunnerLogger"/> class.
            </summary>
            <param name="useColors">A flag to indicate whether colors should be used when
            logging messages.</param>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.#ctor(System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.ConsoleRunnerLogger"/> class.
            </summary>
            <param name="useColors">A flag to indicate whether colors should be used when
            logging messages.</param>
            <param name="lockObject">The lock object used to prevent console clashes.</param>
        </member>
        <member name="P:Xunit.ConsoleRunnerLogger.LockObject">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.LogError(Xunit.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.LogImportantMessage(Xunit.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.LogMessage(Xunit.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ConsoleRunnerLogger.LogWarning(Xunit.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ExecutionSummary">
            <summary>
            Collects execution totals for a group of test cases.
            </summary>
        </member>
        <member name="P:Xunit.ExecutionSummary.Total">
            <summary>
            Gets or set the total number of tests run.
            </summary>
        </member>
        <member name="P:Xunit.ExecutionSummary.Failed">
            <summary>
            Gets or sets the number of failed tests.
            </summary>
        </member>
        <member name="P:Xunit.ExecutionSummary.Skipped">
            <summary>
            Gets or sets the number of skipped tests.
            </summary>
        </member>
        <member name="P:Xunit.ExecutionSummary.Time">
            <summary>
            Gets or sets the total execution time for the tests.
            </summary>
        </member>
        <member name="P:Xunit.ExecutionSummary.Errors">
            <summary>
            Gets or sets the total errors (i.e., cleanup failures) for the tests.
            </summary>
        </member>
        <member name="T:Xunit.RemotingUtility">
            <summary>
            Internal helper class for remoting.
            </summary>
        </member>
        <member name="M:Xunit.RemotingUtility.CleanUpRegisteredChannels">
            <summary>
            Unregisters any remoting channels.
            </summary>
            <remarks>
            If there are any registered remoting channels, then MarshalByRefObjects
            don't work. Based on bug #9749, it's clear that MSTest (at least through
            Visual Studio 2010) registers remoting channels when it runs but doesn't
            clean them up when it's done. Right now, the only way to reliably surface
            this issue is through MSBuild (as per the bug repro), so for the moment
            this work-around code is limited to the MSBuild runner.
            </remarks>
        </member>
        <member name="T:Xunit.StackFrameInfo">
            <summary>
            Represents the top of a stack frame, typically taken from an exception or failure information.
            </summary>
        </member>
        <member name="M:Xunit.StackFrameInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.StackFrameInfo"/> class.
            </summary>
            <param name="fileName"></param>
            <param name="lineNumber"></param>
        </member>
        <member name="P:Xunit.StackFrameInfo.FileName">
            <summary>
            Gets the filename of the stack frame. May be <c>null</c> if the stack frame is not known.
            </summary>
        </member>
        <member name="P:Xunit.StackFrameInfo.IsEmpty">
            <summary>
            Returns <c>true</c> if this is an empty stack frame (e.g., <see cref="F:Xunit.StackFrameInfo.None"/>).
            </summary>
        </member>
        <member name="P:Xunit.StackFrameInfo.LineNumber">
            <summary>
            Gets the line number of the stack frame. May be 0 if the stack frame is not known.
            </summary>
        </member>
        <member name="F:Xunit.StackFrameInfo.None">
            <summary>
            Get a default (unknown) stack frame info.
            </summary>
        </member>
        <member name="M:Xunit.StackFrameInfo.FromFailure(Xunit.Abstractions.IFailureInformation)">
            <summary>
            Creates a stack frame info from failure information.
            </summary>
            <param name="failureInfo">The failure information to inspect</param>
            <returns>The stack frame info</returns>
        </member>
        <member name="M:Xunit.StackFrameInfo.FromSourceInformation(Xunit.Abstractions.ISourceInformation)">
            <summary>
            Creates a tack frame from source information. This can be useful when simulating a
            stack frame in a non-exceptional situation (f.e., for a skipped test).
            </summary>
            <param name="sourceInfo">The source information to inspect</param>
            <returns>The stack frame info</returns>
        </member>
        <member name="T:Xunit.StackFrameTransformer">
            <summary>
            Transforms stack frames and stack traces into compiler-like output
            so they can be double-clicked in Visual Studio.
            </summary>
        </member>
        <member name="M:Xunit.StackFrameTransformer.TransformFrame(System.String,System.String)">
            <summary>
            Transforms an individual stack frame.
            </summary>
            <param name="stackFrame">The stack frame to transform</param>
            <param name="defaultDirectory">The default directory used for computing relative paths</param>
            <returns>The transformed stack frame</returns>
        </member>
        <member name="M:Xunit.StackFrameTransformer.TransformStack(System.String,System.String)">
            <summary>
            Transforms a stack.
            </summary>
            <param name="stack">The stack to transform</param>
            <param name="defaultDirectory">The default directory used for computing relative paths</param>
            <returns>The transformed stack</returns>
        </member>
        <member name="T:Xunit.FailSkipVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.IExecutionVisitor"/> which converts all skipped
            tests into failures, wrapping an existing <see cref="T:Xunit.IExecutionVisitor"/>
            implementation.
            </summary>
        </member>
        <member name="M:Xunit.FailSkipVisitor.#ctor(Xunit.IExecutionVisitor)">
            <summary>
            Initializes a new instance of <see cref="T:Xunit.FailSkipVisitor"/>.
            </summary>
            <param name="visitor">The visitor to pass messages onto.</param>
        </member>
        <member name="P:Xunit.FailSkipVisitor.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.FailSkipVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.IExecutionVisitor">
            <summary>
            Represents an implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that is specifically used
            during test execution. Provides access to the final execution summary, as well as
            an event which is triggered when execution is finished.
            </summary>
        </member>
        <member name="P:Xunit.IExecutionVisitor.ExecutionSummary">
            <summary>
            Gets the final execution summary, once the execution is finished.
            </summary>
        </member>
        <member name="P:Xunit.IExecutionVisitor.Finished">
            <summary>
            Gets an event which is signaled once execution is finished.
            </summary>
        </member>
        <member name="T:Xunit.TestDiscoveryVisitor">
            <summary/>
        </member>
        <member name="M:Xunit.TestDiscoveryVisitor.#ctor">
            <summary/>
        </member>
        <member name="P:Xunit.TestDiscoveryVisitor.TestCases">
            <summary/>
        </member>
        <member name="M:Xunit.TestDiscoveryVisitor.Visit(Xunit.Abstractions.ITestCaseDiscoveryMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMessageVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that provides several Visit methods that
            can provide access to specific message types without the burden of casting.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor.DoVisit``1(Xunit.Abstractions.IMessageSinkMessage,System.Func{``0,System.Boolean})">
            <summary>
            Dispatches the message to the given callback, if it's of the correct type.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="message">The message</param>
            <param name="callback">The callback</param>
            <returns>The result of the callback, if called; <c>true</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.DoVisit``1(Xunit.Abstractions.IMessageSinkMessage,System.Func{Xunit.TestMessageVisitor,``0,System.Boolean})">
            <summary>
            Dispatches the message to the given callback, if it's of the correct type.
            The callback is provided with both the message and this instance of the visitor.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="message">The message</param>
            <param name="callback">The callback</param>
            <returns>The result of the callback, if called; <c>true</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.ITestAssemblyDiscoveryFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.ITestAssemblyDiscoveryFinished"/> is sent to the message sink.
            </summary>
            <param name="discoveryFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.ITestAssemblyDiscoveryStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.ITestAssemblyDiscoveryStarting"/> is sent to the message sink.
            </summary>
            <param name="discoveryStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.ITestAssemblyExecutionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.ITestAssemblyExecutionFinished"/> is sent to the message sink.
            </summary>
            <param name="executionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.ITestAssemblyExecutionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.ITestAssemblyExecutionStarting"/> is sent to the message sink.
            </summary>
            <param name="executionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.ITestExecutionSummary)">
            <summary>
            Called when an instance of <see cref="T:Xunit.ITestExecutionSummary"/> is sent to the message sink.
            </summary>
            <param name="executionSummary">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/> is sent to the message sink.
            </summary>
            <param name="afterTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/> is sent to the message sink.
            </summary>
            <param name="afterTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/> is sent to the message sink.
            </summary>
            <param name="beforeTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/> is sent to the message sink.
            </summary>
            <param name="beforeTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IDiagnosticMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> is sent to the message sink.
            </summary>
            <param name="diagnosticMessage">The message.</param>
            <returns>Return <c>true</c> to continue discovering/executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IDiscoveryCompleteMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/> is sent to the message sink.
            </summary>
            <param name="discoveryComplete">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IErrorMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IErrorMessage"/> is sent to the message sink.
            </summary>
            <param name="error">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/> is sent to the message sink.
            </summary>
            <param name="assemblyFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/> is sent to the message sink.
            </summary>
            <param name="assemblyStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseDiscoveryMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/> is sent to the message sink.
            </summary>
            <param name="testCaseDiscovered">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/> is sent to the message sink.
            </summary>
            <param name="testCaseFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestOutput)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestOutput"/> is sent to the message sink.
            </summary>
            <param name="testCaseOutput">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/> is sent to the message sink.
            </summary>
            <param name="testCaseStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposedFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposeStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/> is sent to the message sink.
            </summary>
            <param name="testCollectionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/> is sent to the message sink.
            </summary>
            <param name="testCollectionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFailed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFailed"/> is sent to the message sink.
            </summary>
            <param name="testFailed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFinished"/> is sent to the message sink.
            </summary>
            <param name="testFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodCleanupFailure)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodCleanupFailure"/> is sent to the message sink.
            </summary>
            <param name="cleanupFailure">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/> is sent to the message sink.
            </summary>
            <param name="testMethodFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/> is sent to the message sink.
            </summary>
            <param name="testMethodStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestPassed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestPassed"/> is sent to the message sink.
            </summary>
            <param name="testPassed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestSkipped)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestSkipped"/> is sent to the message sink.
            </summary>
            <param name="testSkipped">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestStarting"/> is sent to the message sink.
            </summary>
            <param name="testStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Xunit.TestMessageVisitor`1">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink" /> that provides several Visit methods that
            can provide access to specific message types without the burden of casting. It also records
            when it sees a completion message, and sets the <see cref="P:Xunit.TestMessageVisitor`1.Finished" /> event appropriately.
            </summary>
            <typeparam name="TCompleteMessage">The type of the completion message.</typeparam>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMessageVisitor`1"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestMessageVisitor`1.Finished">
            <summary>
            This event is triggered when the completion message has been seen.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.XmlAggregateVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.IExecutionVisitor"/> which records the
            execution summary for an assembly, as well as performing the XML aggregation
            duties of <see cref="T:Xunit.XmlTestExecutionVisitor"/>.
            </summary>
        </member>
        <member name="M:Xunit.XmlAggregateVisitor.#ctor(Xunit.Abstractions.IMessageSink,System.Collections.Concurrent.ConcurrentDictionary{System.String,Xunit.ExecutionSummary},System.Xml.Linq.XElement,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Xunit.XmlAggregateVisitor"/>.
            </summary>
            <param name="innerMessageSink">The inner message sink to pass messages to.</param>
            <param name="completionMessages">The dictionary which collects execution summaries for all assemblies.</param>
            <param name="assemblyElement">The root XML assembly element to collect the result XML.</param>
            <param name="cancelThunk">The callback used to determine when to cancel execution.</param>
        </member>
        <member name="P:Xunit.XmlAggregateVisitor.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlAggregateVisitor.Visit(Xunit.Abstractions.ITestAssemblyFinished)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlAggregateVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.XmlTestExecutionVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> which records all operations into
            xUnit.net v2 XML format.
            </summary>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.#ctor(System.Xml.Linq.XElement,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Xunit.XmlTestExecutionVisitor"/>.
            </summary>
            <param name="assemblyElement">The root XML assembly element to collect the result XML.</param>
            <param name="cancelThunk">The callback used to determine when to cancel execution.</param>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.CancelThunk">
            <summary>
            Gets the callback used to determine when to cancel execution.
            </summary>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.Errors">
            <summary>
            Gets or sets the number of errors that have occurred (outside of actual test execution).
            </summary>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.Failed">
            <summary>
            Gets or sets the number of tests which failed.
            </summary>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.Skipped">
            <summary>
            Gets or sets the number of tests which were skipped.
            </summary>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.Time">
            <summary>
            Gets or sets the time spent executing tests, in seconds.
            </summary>
        </member>
        <member name="P:Xunit.XmlTestExecutionVisitor.Total">
            <summary>
            Gets or sets the total number of tests, regardless of result.
            </summary>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestAssemblyFinished)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestAssemblyStarting)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestCollectionFinished)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestFailed)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestPassed)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestSkipped)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.IErrorMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestAssemblyCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestCaseCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestClassCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestCollectionCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.Visit(Xunit.Abstractions.ITestMethodCleanupFailure)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.XmlTestExecutionVisitor.XmlEscape(System.String)">
            <summary>
            Escapes a string for placing into the XML.
            </summary>
            <param name="value">The value to be escaped.</param>
            <returns>The escaped value.</returns>
        </member>
        <member name="T:Xunit.ExceptionUtility">
            <summary>
            Utility classes for dealing with Exception objects.
            </summary>
        </member>
        <member name="M:Xunit.ExceptionUtility.CombineMessages(Xunit.Abstractions.IFailureInformation)">
            <summary>
            Combines multiple levels of messages into a single message.
            </summary>
            <param name="failureInfo">The failure information from which to get the messages.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.ExceptionUtility.CombineStackTraces(Xunit.Abstractions.IFailureInformation)">
            <summary>
            Combines multiple levels of stack traces into a single stack trace.
            </summary>
            <param name="failureInfo">The failure information from which to get the stack traces.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.ExceptionUtility.ConvertExceptionToFailureInformation(System.Exception)">
            <summary>
            Unwraps exceptions and their inner exceptions.
            </summary>
            <param name="ex">The exception to be converted.</param>
            <returns>The failure information.</returns>
        </member>
        <member name="T:Xunit.Sdk.LongLivedMarshalByRefObject">
            <summary>
            Base class for all long-lived objects that may cross over an AppDomain.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.DisconnectAll">
            <summary>
            Disconnects all remote objects.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.SerializationHelper">
            <summary>
            Serializes and de-serializes objects
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            De-serializes an object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="serializedValue">The object's serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)">
            <summary>
            Serializes an object.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object)">
            <summary>Gets whether the specified <paramref name="value"/> is serializable with <see cref="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)"/>.</summary>
            <param name="value">The object to test for serializability.</param>
            <returns>true if the object can be serialized; otherwise, false.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetType(System.String)">
            <summary>
            Converts an assembly qualified type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetType(System.String,System.String)">
            <summary>
            Converts an assembly name + type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="typeName">The type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetTypeNameForSerialization(System.Type)">
            <summary>
            Gets an assembly qualified type name for serialization, with special dispensation for types which
            originate in the execution assembly.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.SubstringTrim(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from the string, with whitespace trimmed on both ends.
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The starting index.</param>
            <param name="length">The length.</param>
            <returns>
            A substring starting no earlier than startIndex and ending no later
            than startIndex + length.
            </returns>
        </member>
        <member name="T:Xunit.NullMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> and <see cref="T:Xunit.IMessageSinkWithTypes"/> that
            ignores all messages.
            </summary>
        </member>
        <member name="M:Xunit.NullMessageSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.NullMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.NullMessageSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.SourceInformation">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ISourceInformation"/>.
            </summary>
        </member>
        <member name="P:Xunit.SourceInformation.FileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.SourceInformation.LineNumber">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.SourceInformation.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.SourceInformation.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMethodDisplay">
            <summary>
            Indicates the default display name format for test methods.
            </summary>
        </member>
        <member name="F:Xunit.TestMethodDisplay.ClassAndMethod">
            <summary>
            Use a fully qualified name (namespace + class + method)
            </summary>
        </member>
        <member name="F:Xunit.TestMethodDisplay.Method">
            <summary>
            Use just the method name (without class)
            </summary>
        </member>
        <member name="T:Xunit.TestMethodDisplayOptions">
            <summary>
            Indicates the method display options for test methods.
            </summary>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.None">
            <summary>
            Indicates no additional method display options.
            </summary>
            <remarks>This is the default configuration option.</remarks>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.ReplaceUnderscoreWithSpace">
            <summary>
            Replace underscores in display names with a space.
            </summary>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.UseOperatorMonikers">
            <summary>
            Replace well-known monikers with their equivalent operator.
            </summary>
            <list type="bullet">
            <item><description>lt : &lt;</description></item>
            <item><description>le : &lt;=</description></item>
            <item><description>eq : =</description></item>
            <item><description>ne : !=</description></item>
            <item><description>gt : &gt;</description></item>
            <item><description>ge : &gt;=</description></item>
            </list>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.UseEscapeSequences">
            <summary>
            Replace supported escape sequences with their equivalent character.
            <list type="table">
            <listheader>
             <term>Encoding</term>
             <description>Format</description>
            </listheader>
            <item><term>ASCII</term><description>X hex-digit hex-digit (ex: X2C)</description></item>
            <item><term>Unicode</term><description>U hex-digit hex-digit hex-digit hex-digit (ex: U00A9)</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.ReplacePeriodWithComma">
            <summary>
            Replaces the period delimiter used in namespace and type references with a comma.
            </summary>
            <remarks>This option is only honored if the <see cref="F:Xunit.TestMethodDisplay.ClassAndMethod"/> setting is also enabled.</remarks>
        </member>
        <member name="F:Xunit.TestMethodDisplayOptions.All">
            <summary>
            Enables all method display options.
            </summary>
        </member>
        <member name="T:Xunit.Serialization.XunitSerializationInfo">
            <summary>
            A mirror class of the CLR's <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.#ctor(Xunit.Abstractions.IXunitSerializable)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Serialization.XunitSerializationInfo"/> class.
            </summary>
            <param name="object">The data to copy into the serialization info</param>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.AddValue(System.String,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.GetValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.GetValue(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.ToSerializedString">
            <summary>
            Returns BASE64 encoded string that represents the entirety of the data.
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.SerializeTriple(Xunit.Serialization.XunitSerializationTriple)">
            <summary>
            Returns a triple for a key/value pair of data in a complex object
            </summary>
            <param name="triple">The triple to be serialized</param>
            <returns>The serialized version of the triple</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.DeserializeTriple(System.String)">
            <summary>
            Returns the triple values out of a serialized triple.
            </summary>
            <param name="value">The serialized triple</param>
            <returns>The de-serialized triple</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.Deserialize(System.Type,System.String)">
            <summary>
            De-serializes a value that was serialized with <see cref="T:Xunit.Serialization.XunitSerializationInfo"/>.
            </summary>
            <param name="type">The type of the object to de-serialize into</param>
            <param name="serializedValue">The serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.Serialize(System.Object)">
            <summary>
            Serializes an object.
            </summary>
            <param name="value">The value to be serialized</param>
            <returns>The serialized object</returns>
        </member>
        <member name="T:Xunit.Serialization.XunitSerializationTriple">
            <summary>
            Represents a triple of information used when serializing complex types: the property name,
            the value to be serialized, and the value's type.
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Key">
            <summary>
            Gets the triple's key
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Value">
            <summary>
            Gets the triple's value
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Type">
            <summary>
            Gets the triple's value type
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationTriple.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Serialization.XunitSerializationTriple"/> class.
            </summary>
            <param name="key">The triple's key</param>
            <param name="value">The triple's value</param>
            <param name="type">The triple's value type</param>
        </member>
        <member name="M:Xunit._DiagnosticMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit._DiagnosticMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Xunit._DiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
            <param name="format">The format of the message to send</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="P:Xunit._DiagnosticMessage.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.AfterTestFinished.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.AfterTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.AfterTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.AfterTestStarting.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.AfterTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.AfterTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyMessage"/> and <see cref="T:Xunit.Abstractions.IExecutionMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyMessage.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyMessage.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCaseMessage.TestCase">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestClassMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestClassMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestClassMessage.TestClass">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCollectionMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCollectionMessage.TestCollection">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestMessage.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestMessage.Test">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMethodMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMethodMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMethodMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestMethodMessage.TestMethod">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestResultMessage.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestResultMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestResultMessage.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestResultMessage.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.BeforeTestFinished.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.BeforeTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.BeforeTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.BeforeTestStarting.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.BeforeTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.BeforeTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.DiagnosticMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.DiagnosticMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Xunit.DiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DiagnosticMessage"/> class.
            </summary>
            <param name="format">The format of the message to send</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="P:Xunit.DiagnosticMessage.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.DiagnosticMessage.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.DiscoveryCompleteMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/>.
            </summary>
        </member>
        <member name="T:Xunit.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IErrorMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.ErrorMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.ErrorMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.ErrorMessage.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.ErrorMessage.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.ErrorMessage.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.ErrorMessage.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.ErrorMessage.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.TestAssemblyCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestAssemblyStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestAssemblyStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestAssemblyStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseCleanupFailure.#ctor(Xunit.Abstractions.ITestCase,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseCleanupFailure.#ctor(Xunit.Abstractions.ITestCase,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCaseCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseDiscoveryMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseDiscoveryMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseDiscoveryMessage"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseFinished.#ctor(Xunit.Abstractions.ITestCase,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseStarting.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestClassCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestClassCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestClassCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassConstructionFinished.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassConstructionFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassConstructionStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassConstructionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassDisposeFinished.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassDisposeFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassDisposeStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassDisposeStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestClassFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestClassFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestClassStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCleanupFailure.#ctor(Xunit.Abstractions.ITest,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestCleanupFailure.#ctor(Xunit.Abstractions.ITest,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCollectionCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCollectionCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFailed"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestFailed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestFailed"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestFailed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestFailed"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestFailed.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestFailed.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestFailed.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestFailed.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestFinished.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestFinished.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMethodCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestMethodCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMethodFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestMethodFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMethodFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestMethodStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMethodStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestOutput">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestOutput"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestOutput.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestOutput"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestOutput.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestPassed"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestPassed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestPassed"/> class.
            </summary>
        </member>
        <member name="T:Xunit.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestSkipped"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestSkipped.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestSkipped"/> class.
            </summary>
        </member>
        <member name="P:Xunit.TestSkipped.Reason">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestStarting"/> class.
            </summary>
        </member>
        <member name="T:IRunnerLoggerExtensions">
            <summary>
            Extensions methods for <see cref="T:Xunit.IRunnerLogger"/>.
            </summary>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogMessage(Xunit.IRunnerLogger,System.String)">
            <summary>
            Logs a normal-priority message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogMessage(Xunit.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a normal-priority formatted message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogMessage(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a normal-priority formatted message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogImportantMessage(Xunit.IRunnerLogger,System.String)">
            <summary>
            Logs a high-priority message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogImportantMessage(Xunit.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a high-priority formatted message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogImportantMessage(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a high-priority formatted message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogWarning(Xunit.IRunnerLogger,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogWarning(Xunit.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogWarning(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogError(Xunit.IRunnerLogger,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogError(Xunit.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a formatted error message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:IRunnerLoggerExtensions.LogError(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a formatted error message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="T:MessageSinkMessageExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Abstractions.IMessageSinkMessage"/>.
            </summary>
        </member>
        <member name="M:MessageSinkMessageExtensions.Cast``1(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Attempts to optimally cast a message to the given message type, using the optional hash of
            interface types to improve casting performance.
            </summary>
            <typeparam name="TMessage">The desired destination message type.</typeparam>
            <param name="message">The message to test and cast.</param>
            <param name="typeNames">The implemented interfaces, if known.</param>
            <returns>The message as <typeparamref name="TMessage"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:MessageSinkMessageExtensions.Dispatch``1(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String},Xunit.MessageHandler{``0})">
            <summary>
            Handles a message of a specific type by testing it for the type, as well as verifying that there
            is a registered callback;
            </summary>
            <param name="message">The message to dispatch.</param>
            <param name="messageTypes">The implemented interfaces, if known.</param>
            <param name="callback">The callback to dispatch the message to.</param>
            <returns>Returns <c>true</c> if processing should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MessageSinkWithTypesExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.IMessageSinkWithTypes"/>.
            </summary>
        </member>
        <member name="M:MessageSinkWithTypesExtensions.OnMessage(Xunit.IMessageSinkWithTypes,Xunit.Abstractions.IMessageSinkMessage)">
            <summary>
            Provides a simulation of <see cref="M:Xunit.Abstractions.IMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)"/> for <see cref="T:Xunit.IMessageSinkWithTypes"/>,
            to make it easier to directly dispatch messages from the runner.
            </summary>
            <param name="messageSink">The message sink</param>
            <param name="message">The message to be dispatched</param>
            <returns>The result of calling the message sink</returns>
        </member>
        <member name="T:TestFrameworkExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> and <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/>.
            </summary>
        </member>
        <member name="M:TestFrameworkExtensions.Find(Xunit.Abstractions.ITestFrameworkDiscoverer,System.Boolean,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all tests in an assembly.
            </summary>
            <param name="discoverer">The discoverer.</param>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="discoveryMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:TestFrameworkExtensions.Find(Xunit.Abstractions.ITestFrameworkDiscoverer,System.String,System.Boolean,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all tests in a class.
            </summary>
            <param name="discoverer">The discoverer.</param>
            <param name="typeName">The fully qualified type name to find tests in.</param>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="discoveryMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:TestFrameworkExtensions.RunAll(Xunit.Abstractions.ITestFrameworkExecutor,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running all the tests in the assembly.
            </summary>
            <param name="executor">The executor.</param>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options to be used during test discovery.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="M:TestFrameworkExtensions.RunTests(Xunit.Abstractions.ITestFrameworkExecutor,System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running selected tests in the assembly.
            </summary>
            <param name="executor">The executor.</param>
            <param name="testCases">The test cases to run.</param>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="T:TestFrameworkOptionsReadWriteExtensions">
            <summary>
            Extension methods for reading and writing <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoveryOptions"/> and <see cref="T:Xunit.Abstractions.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not
            set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMethodDisplay(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptions(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format options for test methods.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptionsOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format options for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.TestMethodDisplayOptions.None"/>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheories(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheoriesOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory. If the flag is not present,
            returns the default value (<c>true</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetMethodDisplay(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{Xunit.TestMethodDisplay})">
            <summary>
            Sets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetMethodDisplayOptions(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{Xunit.TestMethodDisplayOptions})">
            <summary>
            Sets the flags that determine the default display options for test methods.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetPreEnumerateTheories(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDisableParallelization(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetDisableParallelizationOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreads(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreadsOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set),
            the value of <see cref="P:System.Environment.ProcessorCount"/> is used; if set to a value less
            than 0, does not limit the number of threads.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetStopOnTestFail(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net stop testing when a test fails.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetDisableParallelization(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetMaxParallelThreads(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum number of threads to use when running tests in parallel.
            If set to 0 (the default value), does not limit the number of threads.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Guard.FileExists(System.String,System.String)">
            <summary/>
        </member>
        <member name="T:NewReflectionExtensions">
            <summary>
            Methods which help bridge and contain the differences between Type and TypeInfo.
            </summary>
        </member>
    </members>
</doc>
