<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Test.OData.Services.Astoria</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.EFService">
            <summary>
            The EF service
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.#ctor">
            <summary>
            Create an instance of class EF Service
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.#cctor">
            <summary>
            The static constructor to ensure the database is deployed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.InitializeService(Microsoft.OData.Service.DataServiceConfiguration)">
            <summary>
            Initialize the service
            </summary>
            <param name="config">The data service configuration</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.CreateDataSource">
            <summary>
            Create the data source
            </summary>
            <returns>The current data source</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.GetEFPersonCount">
            <summary>
            Get EFPerson count
            </summary>
            <returns>The count of EFPerson</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.GetEFPersonByExactName(System.String)">
            <summary>
            Get EFPerson with the exact name match
            </summary>
            <param name="name">The name</param>
            <returns>The EFPerson</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.GetEFPersonsByName(System.String)">
            <summary>
            Get EFPersons with the partial name match
            </summary>
            <param name="name">The name</param>
            <returns>The EPPersons</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFService.GetService(System.Type)">
            <summary>
            Get service of specific type. Memeber of IServiceProvider
            </summary>
            <param name="serviceType">The service type</param>
            <returns>The service</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.HybridService">
            <summary>
            The hybrid service which merges a EF provider and Reflection provider
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.HybridService.EntityRegex">
            <summary>
            The regex to match the entity name from the query.
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridService.EntitySet">
            <summary>
            The current entity set
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.#cctor">
            <summary>
            The static constructor to ensure the database is deployed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.#ctor">
            <summary>
            Create an instance of class HybridService
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.InitializeService(Microsoft.OData.Service.DataServiceConfiguration)">
            <summary>
            Initialize the service
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.CreateDataSource">
            <summary>
            Create the data source
            </summary>
            <returns>The data source</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetEFPersonCount">
            <summary>
            Get EFPerson count
            </summary>
            <returns>The count of EFPerson</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetEFPersonByExactName(System.String)">
            <summary>
            Get EFPerson with the exact name match
            </summary>
            <param name="name">The name</param>
            <returns>The EFPerson</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetEFPersonsByName(System.String)">
            <summary>
            Get EFPersons with the partial name match
            </summary>
            <param name="name">The name</param>
            <returns>The EPPersons</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetPersonCount">
            <summary>
            Get Person count
            </summary>
            <returns>The count of Person</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetPersonByExactName(System.String)">
            <summary>
            Get Person with the exact name match
            </summary>
            <param name="name">The name</param>
            <returns>The Person</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetPersonsByName(System.String)">
            <summary>
            Get Persons with the partial name match
            </summary>
            <param name="name">The name</param>
            <returns>The Persons</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridService.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.ReflectionService">
            <summary>
            Reflection service
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.#ctor">
            <summary>
            Create an instance of Reflection Service
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.InitializeService(Microsoft.OData.Service.DataServiceConfiguration)">
            <summary>
            Initialize the service
            </summary>
            <param name="config">The data service configuration</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.CreateDataSource">
            <summary>
            Create the data source
            </summary>
            <returns>Data source</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.GetPersonCount">
            <summary>
            Get Person count
            </summary>
            <returns>The count of Person</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.GetPersonByExactName(System.String)">
            <summary>
            Get Person with the exact name match
            </summary>
            <param name="name">The name</param>
            <returns>The Person</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.GetPersonsByName(System.String)">
            <summary>
            Get Persons with the partial name match
            </summary>
            <param name="name">The name</param>
            <returns>The Persons</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionService.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1">
            <summary>
            EF Parameterized Query of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.objectQuery">
            <summary>
            The original EF ObjectQuery
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.queryProvider">
            <summary>
            The query provider
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.#ctor(System.Data.Objects.ObjectQuery{`0},System.Linq.IQueryProvider)">
            <summary>
            Create an instance of type EFParameterizedQuery
            </summary>
            <param name="objectQuery">The original EF ObjectQuery</param>
            <param name="queryProvider">The query provider</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.Expression">
            <summary>
            Get the current expression
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.ElementType">
            <summary>
            Get the element type
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.Provider">
            <summary>
            Get the query provider
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQuery`1.ObjectQuery">
            <summary>
            The original EF ObjectQuery
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedExpressionVisitor">
            <summary>
            EF parameterized expression visitor
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedExpressionVisitor.ParameterizableTypes">
            <summary>
            The parameterizable types to Tuple mapping
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedExpressionVisitor.Parameterize(System.Linq.Expressions.Expression)">
            <summary>
            Parameterize the expression.
            It will replace the ConstantExpression to PropertyExpression
            </summary>
            <param name="expression">The original expression</param>
            <returns>The parameterized expression</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit the constant expression
            </summary>
            <param name="node">The original expression node</param>
            <returns>The new PropertyExpression</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider">
            <summary>
            EFParameterizedQueryProvider
            It will visit the expression tree and replace the ConstantExpression with PropertyExpression before pass the expression to EF
            EF5 by default has execution plan cache enabled, and the compile plan will be parameterized.
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.CreateEFParameterizedQueryMethod">
            <summary>
            Cache the CreateEFParameterizedQuery generic methodinfo
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.underlyingQueryProvider">
            <summary>
            The underlying ef query provider
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.#ctor(System.Linq.IQueryProvider)">
            <summary>
            Create an instance of EFParameterizedQueryProvider
            </summary>
            <param name="underlyingQueryProvider">The underlying ef query providera</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.CreateQuery(System.Linq.IQueryable)">
            <summary>
            Craete a query from EF queryable
            </summary>
            <param name="underlyingQuery">The underlying EF query</param>
            <returns>The queryable EFParameterizedQuery</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Create a query from the expression
            </summary>
            <param name="expression">The expression</param>
            <returns>The queryable EFParameterizedQuery</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Create a query from the expression
            </summary>
            <typeparam name="TElement">The element type</typeparam>
            <param name="expression">The expression</param>
            <returns>The queryable EFParameterizedQuery</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.CreateEFParameterizedQuery``1(System.Linq.Expressions.Expression,System.Linq.IQueryable)">
            <summary>
            Create a EFParameterizedQuery from the expression and original IQueryable if we have
            </summary>
            <typeparam name="TElement">The element type</typeparam>
            <param name="expression">The expression</param>
            <param name="queryable">The original IQueryable</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Execute the expression
            </summary>
            <param name="expression">The expression</param>
            <returns>The result</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFParameterizedQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Execute the expression
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="expression">The expression</param>
            <returns>The result</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.ExpressionVisitor">
            <summary>
            A NOOP expression visitor
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedExpressionVisitor">
            <summary>
            Linq to object parameterized expression visitor
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedExpressionVisitor.parameters">
            <summary>
            The parameter expression list
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedExpressionVisitor.values">
            <summary>
            The parameter values
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedExpressionVisitor.Parameterize(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[]@,System.Object[]@)">
            <summary>
            Parameterize the expression
            </summary>
            <param name="expression">The original expression</param>
            <param name="parameterExpressions">The parameterExpressions which are converted from ConstantExpression</param>
            <param name="paraValues">The parameter values</param>
            <returns>The parameterized expression</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit the constantExpression
            </summary>
            <param name="node">The original expression</param>
            <returns>The ParameterExpression</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider">
            <summary>
            The linq to object query provider
            It will visit the expression tree and replace the constant expression with parameter expression as well as extract the parameter value
            Then it will tried to find the delegate for the parameteried expression.
            If the cache is miss hit, it will create a new LambaExpression and compile to delegate.
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.EnumerableRewriterVisit">
            <summary>
            The default linq to object Expression Visit
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.Cahce">
            <summary>
            The cache for the delegate compiled from expression
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.#cctor">
            <summary>
            Initialize the static readonlys
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.CreateQuery(System.Linq.IQueryable)">
            <summary>
            Create a query to wrap the default l2o IQueryable
            </summary>
            <param name="underlyingQuery">The underlying l2o queryable</param>
            <returns>The wrapped queryable</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Create a query from the expression
            </summary>
            <param name="expression">The expression</param>
            <returns>The wrapped expression</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Create a query from the expression
            </summary>
            <typeparam name="TElement">Expression element type</typeparam>
            <param name="expression">The expression</param>
            <returns>The wrapped expression</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Execute the expression
            </summary>
            <param name="expression">The expression</param>
            <returns>The result</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Execute the expression
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="expression">The expression</param>
            <returns>The result</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1">
            <summary>
            The ling to object parameterized query
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.queryProvider">
            <summary>
            The query provider
            </summary>
        </member>
        <member name="F:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.expression">
            <summary>
            The current expression
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.#ctor(System.Linq.Expressions.Expression,System.Linq.IQueryProvider)">
            <summary>
            Create an instance of L2OParameterizedQuery
            </summary>
            <param name="expression">The original expression</param>
            <param name="queryProvider">The query builder</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.Expression">
            <summary>
            The expression
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.ElementType">
            <summary>
            The expression element type
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.L2OParameterizedQuery`1.Provider">
            <summary>
            The query provider
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.TypeExtension">
            <summary>
            Extension method for type
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.TypeExtension.GetQueryElementType(System.Type)">
            <summary>
            Get query element type
            </summary>
            <param name="type">The type of the query</param>
            <returns>The element type</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Test.OData.Services.PublicProvider.TypeExtension.FindIEnumerable(System.Type)" -->
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.ProviderTypeAttribute">
            <summary>
            A custom attribute to mark whhich provider the service operation belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.DatabaseHelper">
            <summary>
            Helper to create the database for EF service
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.DatabaseHelper.EnsureDatabaseCreated">
            <summary>
            Ensure the database needed by EF and Hybrid service is created
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.HybridDataSource">
            <summary>
            Hybrid service data source
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridDataSource.DatabaseSource">
            <summary>
            The database source
            </summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridDataSource.ReflectionDataSource">
            <summary>
            The reflection source
            </summary>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.HybridProvider">
            <summary>
            The hybrid provider
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.#ctor(Microsoft.Test.OData.Services.PublicProvider.HybridService,Microsoft.Test.OData.Services.PublicProvider.HybridDataSource)">
            <summary>
            create an instance of class HybridProvider
            </summary>
            <param name="service">The hybrid service</param>
            <param name="dataSource">The hybrid datasource</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ResolveResourceType(System.Type)">
            <summary>
            Resolve resource type by clr type
            </summary>
            <param name="type">The clr type</param>
            <returns>The resource type</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ResolveResourceSet(Microsoft.OData.Service.Providers.ResourceType,System.Reflection.MethodInfo)">
            <summary>
            Resolve resourceset by resource type
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="method">The method</param>
            <returns>The resource type</returns>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ContainerNamespace">
            <summary>Namespace name for the EDM container.</summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ContainerName">
            <summary>Name of the EDM container</summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ResourceSets">
            <summary>Gets all available containers.</summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.Types">
            <summary>Returns all the types in this data source</summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ServiceOperations">
            <summary>Returns all the service operations in this data source</summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.TryResolveResourceSet(System.String,Microsoft.OData.Service.Providers.ResourceSet@)">
            <summary>Given the specified name, tries to find a resource set.</summary>
            <param name="name">Name of the resource set to resolve.</param>
            <param name="resourceSet">Returns the resolved resource set, null if no resource set for the given name was found.</param>
            <returns>True if resource set with the given name was found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetResourceAssociationSet(Microsoft.OData.Service.Providers.ResourceSet,Microsoft.OData.Service.Providers.ResourceType,Microsoft.OData.Service.Providers.ResourceProperty)">
            <summary>
            Gets the ResourceAssociationSet instance when given the source association end.
            </summary>
            <param name="resourceSet">Resource set of the source association end.</param>
            <param name="resourceType">Resource type of the source association end.</param>
            <param name="resourceProperty">Resource property of the source association end.</param>
            <returns>ResourceAssociationSet instance.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.TryResolveResourceType(System.String,Microsoft.OData.Service.Providers.ResourceType@)">
            <summary>Given the specified name, tries to find a type.</summary>
            <param name="name">Name of the type to resolve.</param>
            <param name="resourceType">Returns the resolved resource type, null if no resource type for the given name was found.</param>
            <returns>True if we found the resource type for the given name, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetDerivedTypes(Microsoft.OData.Service.Providers.ResourceType)">
            <summary>
            The method must return a collection of all the types derived from <paramref name="resourceType"/>.
            The collection returned should NOT include the type passed in as a parameter.
            An implementer of the interface should return null if the type does not have any derived types (ie. null == no derived types).
            </summary>
            <param name="resourceType">Resource to get derived resource types from.</param>
            <returns>
            A collection of resource types (<see cref="T:Microsoft.OData.Service.Providers.ResourceType"/>) derived from the specified <paramref name="resourceType"/> 
            or null if there no types derived from the specified <paramref name="resourceType"/> exist.
            </returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.HasDerivedTypes(Microsoft.OData.Service.Providers.ResourceType)">
            <summary>
            Returns true if <paramref name="resourceType"/> represents an Entity Type which has derived Entity Types, else false.
            </summary>
            <param name="resourceType">instance of the resource type in question.</param>
            <returns>True if <paramref name="resourceType"/> represents an Entity Type which has derived Entity Types, else false.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.TryResolveServiceOperation(System.String,Microsoft.OData.Service.Providers.ServiceOperation@)">
            <summary>Given the specified name, tries to find a service operation.</summary>
            <param name="name">Name of the service operation to resolve.</param>
            <param name="serviceOperation">Returns the resolved service operation, null if no service operation was found for the given name.</param>
            <returns>True if we found the service operation for the given name, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.CurrentDataSource">
            <summary>The data source from which data is provided.</summary>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.IsNullPropagationRequired">
            <summary>Gets a value indicating whether null propagation is required in expression trees.</summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetQueryRootForResourceSet(Microsoft.OData.Service.Providers.ResourceSet)">
            <summary>
            Returns the IQueryable that represents the resource set.
            </summary>
            <param name="resourceSet">resource set representing the entity set.</param>
            <returns>
            An IQueryable that represents the set; null if there is 
            no set for the specified name.
            </returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetResourceType(System.Object)">
            <summary>Gets the <see cref="T:Microsoft.OData.Service.Providers.ResourceType"/> for the specified <paramref name="target"/>.</summary>
            <param name="target">Target instance to extract a <see cref="T:Microsoft.OData.Service.Providers.ResourceType"/> from.</param>
            <returns>The <see cref="T:Microsoft.OData.Service.Providers.ResourceType"/> that describes this <paramref name="target"/> in this provider.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetPropertyValue(System.Object,Microsoft.OData.Service.Providers.ResourceProperty)">
            <summary>
            Get the value of the strongly typed property.
            </summary>
            <param name="target">instance of the type declaring the property.</param>
            <param name="resourceProperty">resource property describing the property.</param>
            <returns>value for the property.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetOpenPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of the open property.
            </summary>
            <param name="target">instance of the type declaring the open property.</param>
            <param name="propertyName">name of the open property.</param>
            <returns>value for the open property.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetOpenPropertyValues(System.Object)">
            <summary>
            Get the name and values of all the properties defined in the given instance of an open type.
            </summary>
            <param name="target">instance of a open type.</param>
            <returns>collection of name and values of all the open properties.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.InvokeServiceOperation(Microsoft.OData.Service.Providers.ServiceOperation,System.Object[])">
            <summary>
            Invoke the given service operation and returns the results.
            </summary>
            <param name="serviceOperation">service operation to invoke.</param>
            <param name="parameters">value of parameters to pass to the service operation.</param>
            <returns>returns the result of the service operation. If the service operation returns void, then this should return null.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.CreateResource(System.String,System.String)">
            <summary>
            Creates the resource of the given type and belonging to the given container
            </summary>
            <param name="containerName">container name to which the resource needs to be added</param>
            <param name="fullTypeName">full type name i.e. Namespace qualified type name of the resource</param>
            <returns>object representing a resource of given type and belonging to the given container</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetResource(System.Linq.IQueryable,System.String)">
            <summary>
            Gets the resource of the given type that the query points to
            </summary>
            <param name="query">query pointing to a particular resource</param>
            <param name="fullTypeName">full type name i.e. Namespace qualified type name of the resource</param>
            <returns>object representing a resource of given type and as referenced by the query</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ResetResource(System.Object)">
            <summary>
            Resets the value of the given resource to its default value
            </summary>
            <param name="resource">resource whose value needs to be reset</param>
            <returns>same resource with its value reset</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="propertyValue">value of the property</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of the given property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <returns>the value of the property for the given target resource</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.SetReference(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given reference property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="propertyValue">value of the property</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.AddReferenceToCollection(System.Object,System.String,System.Object)">
            <summary>
            Adds the given value to the collection
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="resourceToBeAdded">value of the property which needs to be added</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.RemoveReferenceFromCollection(System.Object,System.String,System.Object)">
            <summary>
            Removes the given value from the collection
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="resourceToBeRemoved">value of the property which needs to be removed</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.DeleteResource(System.Object)">
            <summary>
            Delete the given resource
            </summary>
            <param name="targetResource">resource that needs to be deleted</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.SaveChanges">
            <summary>
            Saves all the pending changes made till now
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ResolveResource(System.Object)">
            <summary>
            Returns the actual instance of the resource represented by the given resource object
            </summary>
            <param name="resource">object representing the resource whose instance needs to be fetched</param>
            <returns>The actual instance of the resource represented by the given resource object</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ClearChanges">
            <summary>
            Revert all the pending changes.
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.SetConcurrencyValues(System.Object,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Passes the etag value for the given resource.
            </summary>
            <param name="resourceCookie">cookie representing the resource.</param>
            <param name="checkForEquality">true if we need to compare the property values for equality. If false, then we need to compare values for non-equality.</param>
            <param name="concurrencyValues">list of the etag property names and its corresponding values.</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ScheduleInvokable(Microsoft.OData.Service.Providers.IDataServiceInvokable)">
            <summary>
            Queues up the <paramref name="invokable"/> to be invoked during IUpdatable.SaveChanges().
            </summary>
            <param name="invokable">The invokable instance whose Invoke() method will be called during IUpdatable.SaveChanges().</param>
        </member>
        <member name="P:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.ProviderBehavior">
            <summary>
            The kind of behavior service should assume from the provider.
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetETagProperties(System.String,Microsoft.OData.Service.Providers.ResourceType)">
            <summary>
            Given a resource container and resource type, gets the list of ResourceProperties that
            are part of the ETag.
            </summary>
            <param name="containerName">Resource set name.</param>
            <param name="resourceType">Resource type of entities in the resource container.</param>
            <returns>Collection of properties that are part of the ETag.</returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.Dispose(System.Boolean)">
            <summary>
            Dispose the object
            </summary>
            <param name="disposing">If it is already under disposing</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.HybridProvider.GetCurrentProvider``1">
            <summary>
            Get the current provider based on the entity set
            </summary>
            <typeparam name="T">The type of the provider</typeparam>
            <returns>The provider</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.EFProvider">
            <summary>
            The EF Provider which inherits from EntityFrameworkDataServiceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFProvider.#ctor(Microsoft.Test.OData.Services.PublicProvider.EFService,Microsoft.Test.OData.Services.Astoria.AstoriaDefaultServiceDBEntities)">
            <summary>
            Create an instance of type EFProvider
            </summary>
            <param name="service"></param>
            <param name="container"></param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFProvider.#ctor(Microsoft.OData.Service.Providers.DataServiceProviderArgs)">
            <summary>
            Create an instance of type EFProvider
            </summary>
            <param name="dataServiceProviderArgs"></param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFProvider.GetQueryRootForResourceSet(Microsoft.OData.Service.Providers.ResourceSet)">
            <summary>
            Override the query root
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.EFProvider.GetResource(System.Linq.IQueryable,System.String)">
            <summary>
            Override the get resource to get underlying ObjectQuery for base.GetResource
            </summary>
            <param name="query"></param>
            <param name="fullTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.Log">
            <summary>
            Log class
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.Log.Trace(System.Object[])">
            <summary>
            Trace to debug TraceSource
            </summary>
            <param name="args">The arguments to trace</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.Log.GetCallerIdentity(System.Int32)">
            <summary>
            Get the caller identity from the stacktrace
            </summary>
            <param name="skipFrames">The level of stack frame to skip</param>
            <returns>The caller function</returns>
        </member>
        <member name="T:Microsoft.Test.OData.Services.PublicProvider.ReflectionProvider">
            <summary>
            The reflection provider
            </summary>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionProvider.#ctor(Microsoft.Test.OData.Services.PublicProvider.ReflectionService,Microsoft.Test.OData.Services.AstoriaDefaultService.DefaultContainer)">
            <summary>
            Create an instance of class reflection provider
            </summary>
            <param name="service">The service</param>
            <param name="container">The reflection data source</param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionProvider.#ctor(Microsoft.OData.Service.Providers.DataServiceProviderArgs)">
            <summary>
            Create an instance of class reflection provider
            </summary>
            <param name="dataServiceProviderArgs"></param>
        </member>
        <member name="M:Microsoft.Test.OData.Services.PublicProvider.ReflectionProvider.GetQueryRootForResourceSet(Microsoft.OData.Service.Providers.ResourceSet)">
            <summary>
            Override the GetQueryRootForResourceSet to fix the expression tree for Geo types and enum
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
    </members>
</doc>
