//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 3/19/2015 5:05:02 PM
namespace Microsoft.Test.OData.Services.TestServices.OperationServiceReference
{
    /// <summary>
    /// There are no comments for OperationService in the schema.
    /// </summary>
    public partial class OperationService : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new OperationService object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public OperationService(global::System.Uri serviceRoot) :
            base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "Microsoft.Test.OData.Services.ODataOperationService", "Microsoft.Test.OData.Services.TestServices.OperationServiceReference");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            if (clientType.Namespace.Equals("Microsoft.Test.OData.Services.TestServices.OperationServiceReference", global::System.StringComparison.Ordinal))
            {
                return string.Concat("Microsoft.Test.OData.Services.ODataOperationService.", clientType.Name);
            }
            return clientType.FullName;
        }
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.OData.Client.DataServiceQuery<Customer> Customers
        {
            get
            {
                if ((this._Customers == null))
                {
                    this._Customers = base.CreateQuery<Customer>("Customers");
                }
                return this._Customers;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<Customer> _Customers;
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.OData.Client.DataServiceQuery<Order> Orders
        {
            get
            {
                if ((this._Orders == null))
                {
                    this._Orders = base.CreateQuery<Order>("Orders");
                }
                return this._Orders;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<Order> _Orders;
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public void AddToCustomers(Customer customer)
        {
            base.AddObject("Customers", customer);
        }
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public void AddToOrders(Order order)
        {
            base.AddObject("Orders", order);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""Microsoft.Test.OData.Services.ODataOperationService"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <ComplexType Name=""Address"">
        <Property Name=""Street"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""City"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""PostalCode"" Type=""Edm.String"" Nullable=""false"" />
      </ComplexType>
      <ComplexType Name=""HomeAddress"" BaseType=""Microsoft.Test.OData.Services.ODataOperationService.Address"">
        <Property Name=""FamilyName"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""CompanyAddress"" BaseType=""Microsoft.Test.OData.Services.ODataOperationService.Address"">
        <Property Name=""CompanyName"" Type=""Edm.String"" Nullable=""false"" />
      </ComplexType>
      <EnumType Name=""CustomerLevel"">
        <Member Name=""Common"" Value=""0"" />
        <Member Name=""Silver"" Value=""1"" />
        <Member Name=""Gold"" Value=""2"" />
      </EnumType>
      <EntityType Name=""Customer"">
        <Key>
          <PropertyRef Name=""ID"" />
        </Key>
        <Property Name=""ID"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""FirstName"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""LastName"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""Address"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Address"" />
        <Property Name=""Emails"" Type=""Collection(Edm.String)"" />
        <Property Name=""Level"" Type=""Microsoft.Test.OData.Services.ODataOperationService.CustomerLevel"" Nullable=""false"" />
        <NavigationProperty Name=""Orders"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
      </EntityType>
      <EntityType Name=""Order"">
        <Key>
          <PropertyRef Name=""ID"" />
        </Key>
        <Property Name=""ID"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""OrderDate"" Type=""Edm.DateTimeOffset"" Nullable=""false"" />
        <Property Name=""Notes"" Type=""Collection(Edm.String)"" />
        <NavigationProperty Name=""Customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" Nullable=""false"" />
      </EntityType>
      <Action Name=""ResetDataSource"" />
      <Function Name=""GetCustomerForAddress"" IsBound=""true"" EntitySetPath=""customers"" IsComposable=""true"">
        <Parameter Name=""customers"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
        <Parameter Name=""address"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Address"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""GetCustomersForAddresses"" IsBound=""true"" EntitySetPath=""customers"" IsComposable=""true"">
        <Parameter Name=""customers"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
        <Parameter Name=""addresses"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Address)"" />
        <ReturnType Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
      </Function>
      <Function Name=""GetCustomerForAddresses"" IsBound=""true"" EntitySetPath=""customers"" IsComposable=""true"">
        <Parameter Name=""customers"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
        <Parameter Name=""addresses"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Address)"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""GetCustomerAddress"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Address"" />
      </Function>
      <Function Name=""VerifyCustomerAddress"" IsBound=""true"" EntitySetPath=""customer"" IsComposable=""true"">
        <Parameter Name=""customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
        <Parameter Name=""addresses"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Address"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""VerifyCustomerByOrder"" IsBound=""true"" EntitySetPath=""customer"" IsComposable=""true"">
        <Parameter Name=""customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
        <Parameter Name=""order"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Order"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""GetOrdersFromCustomerByNotes"" IsBound=""true"" EntitySetPath=""customer/Orders"" IsComposable=""true"">
        <Parameter Name=""customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
        <Parameter Name=""notes"" Type=""Collection(Edm.String)"" />
        <ReturnType Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
      </Function>
      <Function Name=""GetOrdersByNote"" IsBound=""true"" EntitySetPath=""orders"" IsComposable=""true"">
        <Parameter Name=""orders"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
        <Parameter Name=""note"" Type=""Edm.String"" />
        <ReturnType Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
      </Function>
      <Function Name=""GetOrderByNote"" IsBound=""true"" EntitySetPath=""orders"" IsComposable=""true"">
        <Parameter Name=""orders"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
        <Parameter Name=""notes"" Type=""Collection(Edm.String)"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Order"" />
      </Function>
      <Function Name=""GetCustomersByOrders"" IsBound=""true"" EntitySetPath=""customers"" IsComposable=""true"">
        <Parameter Name=""customers"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
        <Parameter Name=""orders"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
        <ReturnType Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
      </Function>
      <Function Name=""GetCustomerByOrder"" IsBound=""true"" EntitySetPath=""customers"" IsComposable=""true"">
        <Parameter Name=""customers"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
        <Parameter Name=""order"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Order"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""GetCustomersByOrders"" IsComposable=""true"">
        <Parameter Name=""orders"" Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Order)"" />
        <ReturnType Type=""Collection(Microsoft.Test.OData.Services.ODataOperationService.Customer)"" />
      </Function>
      <Function Name=""GetCustomerByOrder"" IsComposable=""true"">
        <Parameter Name=""order"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Order"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
      </Function>
      <Function Name=""GetCustomerAddress"" IsComposable=""true"">
        <Parameter Name=""customer"" Type=""Microsoft.Test.OData.Services.ODataOperationService.Customer"" />
        <ReturnType Type=""Microsoft.Test.OData.Services.ODataOperationService.Address"" />
      </Function>
      <EntityContainer Name=""OperationService"">
        <EntitySet Name=""Customers"" EntityType=""Microsoft.Test.OData.Services.ODataOperationService.Customer"">
          <NavigationPropertyBinding Path=""Orders"" Target=""Orders"" />
        </EntitySet>
        <EntitySet Name=""Orders"" EntityType=""Microsoft.Test.OData.Services.ODataOperationService.Order"">
          <NavigationPropertyBinding Path=""Customer"" Target=""Customers"" />
        </EntitySet>
        <ActionImport Name=""ResetDataSource"" Action=""Microsoft.Test.OData.Services.ODataOperationService.ResetDataSource"" />
        <FunctionImport Name=""GetCustomersByOrders"" Function=""Microsoft.Test.OData.Services.ODataOperationService.GetCustomersByOrders"" EntitySet=""Customers"" />
        <FunctionImport Name=""GetCustomerByOrder"" Function=""Microsoft.Test.OData.Services.ODataOperationService.GetCustomerByOrder"" EntitySet=""Customers"" />
        <FunctionImport Name=""GetCustomerAddress"" Function=""Microsoft.Test.OData.Services.ODataOperationService.GetCustomerAddress"" />
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.EdmxReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
        /// <summary>
        /// There are no comments for GetCustomersByOrders in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> GetCustomersByOrders(global::System.Collections.Generic.ICollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> orders, bool useEntityReference = false)
        {
            return this.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("", "GetCustomersByOrders", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("orders", orders, useEntityReference));
        }
        /// <summary>
        /// There are no comments for GetCustomerByOrder in the schema.
        /// </summary>
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle GetCustomerByOrder(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order order, bool useEntityReference = false)
        {
            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(this.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("", "GetCustomerByOrder", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("order", order, useEntityReference)));
        }
        /// <summary>
        /// There are no comments for GetCustomerAddress in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address> GetCustomerAddress(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer customer, bool useEntityReference = false)
        {
            return this.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address>("", "GetCustomerAddress", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("customer", customer, useEntityReference));
        }
        /// <summary>
        /// There are no comments for ResetDataSource in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceActionQuery ResetDataSource()
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuery(this, this.BaseUri.OriginalString.Trim('/') + "/ResetDataSource");
        }
    }
    /// <summary>
    /// There are no comments for Address in the schema.
    /// </summary>
    public partial class Address : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="street">Initial value of Street.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="postalCode">Initial value of PostalCode.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public static Address CreateAddress(string street, string city, string postalCode)
        {
            Address address = new Address();
            address.Street = street;
            address.City = city;
            address.PostalCode = postalCode;
            return address;
        }
        /// <summary>
        /// There are no comments for Property Street in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string Street
        {
            get
            {
                return this._Street;
            }
            set
            {
                this.OnStreetChanging(value);
                this._Street = value;
                this.OnStreetChanged();
                this.OnPropertyChanged("Street");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _Street;
        partial void OnStreetChanging(string value);
        partial void OnStreetChanged();
        /// <summary>
        /// There are no comments for Property City in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                this.OnCityChanging(value);
                this._City = value;
                this.OnCityChanged();
                this.OnPropertyChanged("City");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _City;
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        /// <summary>
        /// There are no comments for Property PostalCode in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                this.OnPostalCodeChanging(value);
                this._PostalCode = value;
                this.OnPostalCodeChanged();
                this.OnPropertyChanged("PostalCode");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _PostalCode;
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for HomeAddress in the schema.
    /// </summary>
    public partial class HomeAddress : Address
    {
        /// <summary>
        /// Create a new HomeAddress object.
        /// </summary>
        /// <param name="street">Initial value of Street.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="postalCode">Initial value of PostalCode.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public static HomeAddress CreateHomeAddress(string street, string city, string postalCode)
        {
            HomeAddress homeAddress = new HomeAddress();
            homeAddress.Street = street;
            homeAddress.City = city;
            homeAddress.PostalCode = postalCode;
            return homeAddress;
        }
        /// <summary>
        /// There are no comments for Property FamilyName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string FamilyName
        {
            get
            {
                return this._FamilyName;
            }
            set
            {
                this.OnFamilyNameChanging(value);
                this._FamilyName = value;
                this.OnFamilyNameChanged();
                this.OnPropertyChanged("FamilyName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _FamilyName;
        partial void OnFamilyNameChanging(string value);
        partial void OnFamilyNameChanged();
    }
    /// <summary>
    /// There are no comments for CompanyAddress in the schema.
    /// </summary>
    public partial class CompanyAddress : Address
    {
        /// <summary>
        /// Create a new CompanyAddress object.
        /// </summary>
        /// <param name="street">Initial value of Street.</param>
        /// <param name="city">Initial value of City.</param>
        /// <param name="postalCode">Initial value of PostalCode.</param>
        /// <param name="companyName">Initial value of CompanyName.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public static CompanyAddress CreateCompanyAddress(string street, string city, string postalCode, string companyName)
        {
            CompanyAddress companyAddress = new CompanyAddress();
            companyAddress.Street = street;
            companyAddress.City = city;
            companyAddress.PostalCode = postalCode;
            companyAddress.CompanyName = companyName;
            return companyAddress;
        }
        /// <summary>
        /// There are no comments for Property CompanyName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                this.OnCompanyNameChanging(value);
                this._CompanyName = value;
                this.OnCompanyNameChanged();
                this.OnPropertyChanged("CompanyName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _CompanyName;
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
    }
    /// <summary>
    /// There are no comments for CustomerSingle in the schema.
    /// </summary>
    public partial class CustomerSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Customer>
    {
        /// <summary>
        /// Initialize a new CustomerSingle object.
        /// </summary>
        public CustomerSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new CustomerSingle object.
        /// </summary>
        public CustomerSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new CustomerSingle object.
        /// </summary>
        public CustomerSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Customer> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> Orders
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Orders == null))
                {
                    this._Orders = Context.CreateQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>(GetPath("Orders"));
                }
                return this._Orders;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> _Orders;
    }
    /// <summary>
    /// There are no comments for Customer in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("ID")]
    [global::Microsoft.OData.Client.EntitySet("Customers")]
    public partial class Customer : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new Customer object.
        /// </summary>
        /// <param name="ID">Initial value of ID.</param>
        /// <param name="firstName">Initial value of FirstName.</param>
        /// <param name="lastName">Initial value of LastName.</param>
        /// <param name="level">Initial value of Level.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public static Customer CreateCustomer(int ID, string firstName, string lastName, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerLevel level)
        {
            Customer customer = new Customer();
            customer.ID = ID;
            customer.FirstName = firstName;
            customer.LastName = lastName;
            customer.Level = level;
            return customer;
        }
        /// <summary>
        /// There are no comments for Property ID in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                this.OnIDChanging(value);
                this._ID = value;
                this.OnIDChanged();
                this.OnPropertyChanged("ID");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private int _ID;
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        /// <summary>
        /// There are no comments for Property FirstName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                this.OnFirstNameChanging(value);
                this._FirstName = value;
                this.OnFirstNameChanged();
                this.OnPropertyChanged("FirstName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _FirstName;
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        /// <summary>
        /// There are no comments for Property LastName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                this.OnLastNameChanging(value);
                this._LastName = value;
                this.OnLastNameChanged();
                this.OnPropertyChanged("LastName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private string _LastName;
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        /// <summary>
        /// There are no comments for Property Address in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                this.OnAddressChanging(value);
                this._Address = value;
                this.OnAddressChanged();
                this.OnPropertyChanged("Address");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address _Address;
        partial void OnAddressChanging(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address value);
        partial void OnAddressChanged();
        /// <summary>
        /// There are no comments for Property Emails in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::System.Collections.ObjectModel.ObservableCollection<string> Emails
        {
            get
            {
                return this._Emails;
            }
            set
            {
                this.OnEmailsChanging(value);
                this._Emails = value;
                this.OnEmailsChanged();
                this.OnPropertyChanged("Emails");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::System.Collections.ObjectModel.ObservableCollection<string> _Emails = new global::System.Collections.ObjectModel.ObservableCollection<string>();
        partial void OnEmailsChanging(global::System.Collections.ObjectModel.ObservableCollection<string> value);
        partial void OnEmailsChanged();
        /// <summary>
        /// There are no comments for Property Level in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerLevel Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                this.OnLevelChanging(value);
                this._Level = value;
                this.OnLevelChanged();
                this.OnPropertyChanged("Level");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerLevel _Level;
        partial void OnLevelChanging(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerLevel value);
        partial void OnLevelChanged();
        /// <summary>
        /// There are no comments for Property Orders in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this.OnOrdersChanging(value);
                this._Orders = value;
                this.OnOrdersChanged();
                this.OnPropertyChanged("Orders");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> _Orders = new global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>(null, global::Microsoft.OData.Client.TrackingMode.None);
        partial void OnOrdersChanging(global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> value);
        partial void OnOrdersChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
        /// <summary>
        /// There are no comments for GetCustomerAddress in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address> GetCustomerAddress()
        {
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);

            return this.Context.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address>(string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))), "Microsoft.Test.OData.Services.ODataOperationService.GetCustomerAddress", true);
        }
        /// <summary>
        /// There are no comments for VerifyCustomerAddress in the schema.
        /// </summary>
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle VerifyCustomerAddress(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address addresses)
        {
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(this.Context.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>(string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))), "Microsoft.Test.OData.Services.ODataOperationService.VerifyCustomerAddress", true, new global::Microsoft.OData.Client.UriOperationParameter("addresses", addresses)));
        }
        /// <summary>
        /// There are no comments for VerifyCustomerByOrder in the schema.
        /// </summary>
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle VerifyCustomerByOrder(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order order, bool useEntityReference = false)
        {
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(this.Context.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>(string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))), "Microsoft.Test.OData.Services.ODataOperationService.VerifyCustomerByOrder", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("order", order, useEntityReference)));
        }
        /// <summary>
        /// There are no comments for GetOrdersFromCustomerByNotes in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> GetOrdersFromCustomerByNotes(global::System.Collections.Generic.ICollection<string> notes)
        {
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return this.Context.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>(string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))), "Microsoft.Test.OData.Services.ODataOperationService.GetOrdersFromCustomerByNotes", true, new global::Microsoft.OData.Client.UriOperationParameter("notes", notes));
        }
    }
    /// <summary>
    /// There are no comments for OrderSingle in the schema.
    /// </summary>
    public partial class OrderSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Order>
    {
        /// <summary>
        /// Initialize a new OrderSingle object.
        /// </summary>
        public OrderSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new OrderSingle object.
        /// </summary>
        public OrderSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new OrderSingle object.
        /// </summary>
        public OrderSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Order> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Customer in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle Customer
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Customer == null))
                {
                    this._Customer = new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(this.Context, GetPath("Customer"));
                }
                return this._Customer;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle _Customer;
    }
    /// <summary>
    /// There are no comments for Order in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("ID")]
    [global::Microsoft.OData.Client.EntitySet("Orders")]
    public partial class Order : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new Order object.
        /// </summary>
        /// <param name="ID">Initial value of ID.</param>
        /// <param name="orderDate">Initial value of OrderDate.</param>
        /// <param name="customer">Initial value of Customer.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public static Order CreateOrder(int ID, global::System.DateTimeOffset orderDate, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer customer)
        {
            Order order = new Order();
            order.ID = ID;
            order.OrderDate = orderDate;
            if ((customer == null))
            {
                throw new global::System.ArgumentNullException("customer");
            }
            order.Customer = customer;
            return order;
        }
        /// <summary>
        /// There are no comments for Property ID in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                this.OnIDChanging(value);
                this._ID = value;
                this.OnIDChanged();
                this.OnPropertyChanged("ID");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private int _ID;
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        /// <summary>
        /// There are no comments for Property OrderDate in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::System.DateTimeOffset OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                this.OnOrderDateChanging(value);
                this._OrderDate = value;
                this.OnOrderDateChanged();
                this.OnPropertyChanged("OrderDate");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::System.DateTimeOffset _OrderDate;
        partial void OnOrderDateChanging(global::System.DateTimeOffset value);
        partial void OnOrderDateChanged();
        /// <summary>
        /// There are no comments for Property Notes in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::System.Collections.ObjectModel.ObservableCollection<string> Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                this.OnNotesChanging(value);
                this._Notes = value;
                this.OnNotesChanged();
                this.OnPropertyChanged("Notes");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::System.Collections.ObjectModel.ObservableCollection<string> _Notes = new global::System.Collections.ObjectModel.ObservableCollection<string>();
        partial void OnNotesChanging(global::System.Collections.ObjectModel.ObservableCollection<string> value);
        partial void OnNotesChanged();
        /// <summary>
        /// There are no comments for Property Customer in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer Customer
        {
            get
            {
                return this._Customer;
            }
            set
            {
                this.OnCustomerChanging(value);
                this._Customer = value;
                this.OnCustomerChanged();
                this.OnPropertyChanged("Customer");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        private global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer _Customer;
        partial void OnCustomerChanging(global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer value);
        partial void OnCustomerChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.3.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for CustomerLevel in the schema.
    /// </summary>
    public enum CustomerLevel
    {
        Common = 0,
        Silver = 1,
        Gold = 2
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer as global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer as global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="iD">The value of iD</param>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source,
            int iD)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "ID", iD }
            };
            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order as global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order as global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="iD">The value of iD</param>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> source,
            int iD)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "ID", iD }
            };
            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// There are no comments for GetCustomerForAddress in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle GetCustomerForAddress(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address address)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerForAddress", true, new global::Microsoft.OData.Client.UriOperationParameter("address", address)));
        }
        /// <summary>
        /// There are no comments for GetCustomersForAddresses in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> GetCustomersForAddresses(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::System.Collections.Generic.ICollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address> addresses)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return source.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomersForAddresses", true, new global::Microsoft.OData.Client.UriOperationParameter("addresses", addresses));
        }
        /// <summary>
        /// There are no comments for GetCustomerForAddresses in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle GetCustomerForAddresses(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::System.Collections.Generic.ICollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address> addresses)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerForAddresses", true, new global::Microsoft.OData.Client.UriOperationParameter("addresses", addresses)));
        }
        /// <summary>
        /// There are no comments for GetCustomerAddress in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address> GetCustomerAddress(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerAddress", true);
        }
        /// <summary>
        /// There are no comments for VerifyCustomerAddress in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle VerifyCustomerAddress(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Address addresses)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.VerifyCustomerAddress", true, new global::Microsoft.OData.Client.UriOperationParameter("addresses", addresses)));
        }
        /// <summary>
        /// There are no comments for VerifyCustomerByOrder in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle VerifyCustomerByOrder(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order order, bool useEntityReference = false)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.VerifyCustomerByOrder", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("order", order, useEntityReference)));
        }
        /// <summary>
        /// There are no comments for GetOrdersFromCustomerByNotes in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> GetOrdersFromCustomerByNotes(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::System.Collections.Generic.ICollection<string> notes)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return source.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>("Microsoft.Test.OData.Services.ODataOperationService.GetOrdersFromCustomerByNotes", true, new global::Microsoft.OData.Client.UriOperationParameter("notes", notes));
        }
        /// <summary>
        /// There are no comments for GetOrdersByNote in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> GetOrdersByNote(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> source, string note)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return source.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>("Microsoft.Test.OData.Services.ODataOperationService.GetOrdersByNote", true, new global::Microsoft.OData.Client.UriOperationParameter("note", note));
        }
        /// <summary>
        /// There are no comments for GetOrderByNote in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle GetOrderByNote(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> source, global::System.Collections.Generic.ICollection<string> notes)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.OrderSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order>("Microsoft.Test.OData.Services.ODataOperationService.GetOrderByNote", true, new global::Microsoft.OData.Client.UriOperationParameter("notes", notes)));
        }
        /// <summary>
        /// There are no comments for GetCustomersByOrders in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> GetCustomersByOrders(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::System.Collections.Generic.ICollection<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order> orders, bool useEntityReference = true)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return source.CreateFunctionQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomersByOrders", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("orders", orders, useEntityReference));
        }
        /// <summary>
        /// There are no comments for GetCustomerByOrder in the schema.
        /// </summary>
        public static global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle GetCustomerByOrder(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer> source, global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Order order, bool useEntityReference = false)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.CustomerSingle(source.CreateFunctionQuerySingle<global::Microsoft.Test.OData.Services.TestServices.OperationServiceReference.Customer>("Microsoft.Test.OData.Services.ODataOperationService.GetCustomerByOrder", true, new global::Microsoft.OData.Client.UriEntityOperationParameter("order", order, useEntityReference)));
        }
    }
}

