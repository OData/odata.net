//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 6/18/2024 1:11:10 PM
namespace Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client
{
    /// <summary>
    /// There are no comments for ProductSingle in the schema.
    /// </summary>
    public partial class ProductSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Product>
    {
        /// <summary>
        /// Initialize a new ProductSingle object.
        /// </summary>
        public ProductSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new ProductSingle object.
        /// </summary>
        public ProductSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new ProductSingle object.
        /// </summary>
        public ProductSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Product> query)
            : base(query) { }

    }
    /// <summary>
    /// There are no comments for Product in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ProductId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("ProductId")]
    public partial class Product : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new Product object.
        /// </summary>
        /// <param name="productId">Initial value of ProductId.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static Product CreateProduct(int productId)
        {
            Product product = new Product();
            product.ProductId = productId;
            return product;
        }
        /// <summary>
        /// There are no comments for Property ProductId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                this.OnProductIdChanging(value);
                this._ProductId = value;
                this.OnProductIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _ProductId;
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        /// <summary>
        /// There are no comments for Property Description in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                this.OnDescriptionChanging(value);
                this._Description = value;
                this.OnDescriptionChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _Description;
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        /// <summary>
        /// There are no comments for Property BaseConcurrency in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string BaseConcurrency
        {
            get
            {
                return this._BaseConcurrency;
            }
            set
            {
                this.OnBaseConcurrencyChanging(value);
                this._BaseConcurrency = value;
                this.OnBaseConcurrencyChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _BaseConcurrency;
        partial void OnBaseConcurrencyChanging(string value);
        partial void OnBaseConcurrencyChanged();
    }
    /// <summary>
    /// There are no comments for OrderLineSingle in the schema.
    /// </summary>
    public partial class OrderLineSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<OrderLine>
    {
        /// <summary>
        /// Initialize a new OrderLineSingle object.
        /// </summary>
        public OrderLineSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new OrderLineSingle object.
        /// </summary>
        public OrderLineSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new OrderLineSingle object.
        /// </summary>
        public OrderLineSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<OrderLine> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle Product
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Product == null))
                {
                    this._Product = new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle(this.Context, GetPath("Product"));
                }
                return this._Product;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle _Product;
    }
    /// <summary>
    /// There are no comments for OrderLine in the schema.
    /// </summary>
    /// <KeyProperties>
    /// OrderId
    /// ProductId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("OrderId", "ProductId")]
    public partial class OrderLine : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new OrderLine object.
        /// </summary>
        /// <param name="orderId">Initial value of OrderId.</param>
        /// <param name="quantity">Initial value of Quantity.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static OrderLine CreateOrderLine(int orderId, int quantity)
        {
            OrderLine orderLine = new OrderLine();
            orderLine.OrderId = orderId;
            orderLine.Quantity = quantity;
            return orderLine;
        }
        /// <summary>
        /// There are no comments for Property OrderId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                this.OnOrderIdChanging(value);
                this._OrderId = value;
                this.OnOrderIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _OrderId;
        partial void OnOrderIdChanging(int value);
        partial void OnOrderIdChanged();
        /// <summary>
        /// There are no comments for Property ProductId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                this.OnProductIdChanging(value);
                this._ProductId = value;
                this.OnProductIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::System.Nullable<int> _ProductId;
        partial void OnProductIdChanging(global::System.Nullable<int> value);
        partial void OnProductIdChanged();
        /// <summary>
        /// There are no comments for Property Quantity in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                this.OnQuantityChanging(value);
                this._Quantity = value;
                this.OnQuantityChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _Quantity;
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        /// <summary>
        /// There are no comments for Property Product in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                this.OnProductChanging(value);
                this._Product = value;
                this.OnProductChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product _Product;
        partial void OnProductChanging(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product value);
        partial void OnProductChanged();
    }
    /// <summary>
    /// There are no comments for PersonSingle in the schema.
    /// </summary>
    public partial class PersonSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Person>
    {
        /// <summary>
        /// Initialize a new PersonSingle object.
        /// </summary>
        public PersonSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new PersonSingle object.
        /// </summary>
        public PersonSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new PersonSingle object.
        /// </summary>
        public PersonSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Person> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for PersonMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonMetadata
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._PersonMetadata == null))
                {
                    this._PersonMetadata = Context.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>(GetPath("PersonMetadata"));
                }
                return this._PersonMetadata;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonMetadata;
    }
    /// <summary>
    /// There are no comments for Person in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PersonId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("PersonId")]
    public partial class Person : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="personId">Initial value of PersonId.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static Person CreatePerson(int personId)
        {
            Person person = new Person();
            person.PersonId = personId;
            return person;
        }
        /// <summary>
        /// There are no comments for Property PersonId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int PersonId
        {
            get
            {
                return this._PersonId;
            }
            set
            {
                this.OnPersonIdChanging(value);
                this._PersonId = value;
                this.OnPersonIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _PersonId;
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        /// <summary>
        /// There are no comments for Property Name in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this._Name = value;
                this.OnNameChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// There are no comments for Property PersonMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::System.Collections.ObjectModel.Collection<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonMetadata
        {
            get
            {
                return this._PersonMetadata;
            }
            set
            {
                this.OnPersonMetadataChanging(value);
                this._PersonMetadata = value;
                this.OnPersonMetadataChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::System.Collections.ObjectModel.Collection<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonMetadata = new global::System.Collections.ObjectModel.Collection<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>();
        partial void OnPersonMetadataChanging(global::System.Collections.ObjectModel.Collection<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> value);
        partial void OnPersonMetadataChanged();
    }
    /// <summary>
    /// There are no comments for PersonMetadataSingle in the schema.
    /// </summary>
    public partial class PersonMetadataSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<PersonMetadata>
    {
        /// <summary>
        /// Initialize a new PersonMetadataSingle object.
        /// </summary>
        public PersonMetadataSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new PersonMetadataSingle object.
        /// </summary>
        public PersonMetadataSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new PersonMetadataSingle object.
        /// </summary>
        public PersonMetadataSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<PersonMetadata> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Person in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle Person
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Person == null))
                {
                    this._Person = new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle(this.Context, GetPath("Person"));
                }
                return this._Person;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle _Person;
    }
    /// <summary>
    /// There are no comments for PersonMetadata in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PersonMetadataId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("PersonMetadataId")]
    public partial class PersonMetadata : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new PersonMetadata object.
        /// </summary>
        /// <param name="personMetadataId">Initial value of PersonMetadataId.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static PersonMetadata CreatePersonMetadata(int personMetadataId)
        {
            PersonMetadata personMetadata = new PersonMetadata();
            personMetadata.PersonMetadataId = personMetadataId;
            return personMetadata;
        }
        /// <summary>
        /// There are no comments for Property PersonMetadataId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int PersonMetadataId
        {
            get
            {
                return this._PersonMetadataId;
            }
            set
            {
                this.OnPersonMetadataIdChanging(value);
                this._PersonMetadataId = value;
                this.OnPersonMetadataIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _PersonMetadataId;
        partial void OnPersonMetadataIdChanging(int value);
        partial void OnPersonMetadataIdChanged();
        /// <summary>
        /// There are no comments for Property PersonId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::System.Nullable<int> PersonId
        {
            get
            {
                return this._PersonId;
            }
            set
            {
                this.OnPersonIdChanging(value);
                this._PersonId = value;
                this.OnPersonIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::System.Nullable<int> _PersonId;
        partial void OnPersonIdChanging(global::System.Nullable<int> value);
        partial void OnPersonIdChanged();
        /// <summary>
        /// There are no comments for Property PropertyName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string PropertyName
        {
            get
            {
                return this._PropertyName;
            }
            set
            {
                this.OnPropertyNameChanging(value);
                this._PropertyName = value;
                this.OnPropertyNameChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _PropertyName;
        partial void OnPropertyNameChanging(string value);
        partial void OnPropertyNameChanged();
        /// <summary>
        /// There are no comments for Property PropertyValue in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string PropertyValue
        {
            get
            {
                return this._PropertyValue;
            }
            set
            {
                this.OnPropertyValueChanging(value);
                this._PropertyValue = value;
                this.OnPropertyValueChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _PropertyValue;
        partial void OnPropertyValueChanging(string value);
        partial void OnPropertyValueChanged();
        /// <summary>
        /// There are no comments for Property Person in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person Person
        {
            get
            {
                return this._Person;
            }
            set
            {
                this.OnPersonChanging(value);
                this._Person = value;
                this.OnPersonChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person _Person;
        partial void OnPersonChanging(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person value);
        partial void OnPersonChanged();
    }
    /// <summary>
    /// There are no comments for EmployeeSingle in the schema.
    /// </summary>
    public partial class EmployeeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Employee>
    {
        /// <summary>
        /// Initialize a new EmployeeSingle object.
        /// </summary>
        public EmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new EmployeeSingle object.
        /// </summary>
        public EmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new EmployeeSingle object.
        /// </summary>
        public EmployeeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Employee> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Manager in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle Manager
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Manager == null))
                {
                    this._Manager = new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle(this.Context, GetPath("Manager"));
                }
                return this._Manager;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle _Manager;
        /// <summary>
        /// There are no comments for PersonMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonMetadata
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._PersonMetadata == null))
                {
                    this._PersonMetadata = Context.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>(GetPath("PersonMetadata"));
                }
                return this._PersonMetadata;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonMetadata;
    }
    /// <summary>
    /// There are no comments for Employee in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PersonId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("PersonId")]
    public partial class Employee : Person
    {
        /// <summary>
        /// Create a new Employee object.
        /// </summary>
        /// <param name="personId">Initial value of PersonId.</param>
        /// <param name="managersPersonId">Initial value of ManagersPersonId.</param>
        /// <param name="salary">Initial value of Salary.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static Employee CreateEmployee(int personId, int managersPersonId, int salary)
        {
            Employee employee = new Employee();
            employee.PersonId = personId;
            employee.ManagersPersonId = managersPersonId;
            employee.Salary = salary;
            return employee;
        }
        /// <summary>
        /// There are no comments for Property ManagersPersonId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int ManagersPersonId
        {
            get
            {
                return this._ManagersPersonId;
            }
            set
            {
                this.OnManagersPersonIdChanging(value);
                this._ManagersPersonId = value;
                this.OnManagersPersonIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _ManagersPersonId;
        partial void OnManagersPersonIdChanging(int value);
        partial void OnManagersPersonIdChanged();
        /// <summary>
        /// There are no comments for Property Salary in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int Salary
        {
            get
            {
                return this._Salary;
            }
            set
            {
                this.OnSalaryChanging(value);
                this._Salary = value;
                this.OnSalaryChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _Salary;
        partial void OnSalaryChanging(int value);
        partial void OnSalaryChanged();
        /// <summary>
        /// There are no comments for Property Title in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                this.OnTitleChanging(value);
                this._Title = value;
                this.OnTitleChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _Title;
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        /// <summary>
        /// There are no comments for Property Manager in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee Manager
        {
            get
            {
                return this._Manager;
            }
            set
            {
                this.OnManagerChanging(value);
                this._Manager = value;
                this.OnManagerChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee _Manager;
        partial void OnManagerChanging(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee value);
        partial void OnManagerChanged();
    }
    /// <summary>
    /// There are no comments for SpecialEmployeeSingle in the schema.
    /// </summary>
    public partial class SpecialEmployeeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<SpecialEmployee>
    {
        /// <summary>
        /// Initialize a new SpecialEmployeeSingle object.
        /// </summary>
        public SpecialEmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new SpecialEmployeeSingle object.
        /// </summary>
        public SpecialEmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new SpecialEmployeeSingle object.
        /// </summary>
        public SpecialEmployeeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<SpecialEmployee> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for Manager in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle Manager
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Manager == null))
                {
                    this._Manager = new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle(this.Context, GetPath("Manager"));
                }
                return this._Manager;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle _Manager;
        /// <summary>
        /// There are no comments for PersonMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonMetadata
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._PersonMetadata == null))
                {
                    this._PersonMetadata = Context.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>(GetPath("PersonMetadata"));
                }
                return this._PersonMetadata;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonMetadata;
    }
    /// <summary>
    /// There are no comments for SpecialEmployee in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PersonId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("PersonId")]
    public partial class SpecialEmployee : Employee
    {
        /// <summary>
        /// Create a new SpecialEmployee object.
        /// </summary>
        /// <param name="personId">Initial value of PersonId.</param>
        /// <param name="managersPersonId">Initial value of ManagersPersonId.</param>
        /// <param name="salary">Initial value of Salary.</param>
        /// <param name="carsVIN">Initial value of CarsVIN.</param>
        /// <param name="bonus">Initial value of Bonus.</param>
        /// <param name="isFullyVested">Initial value of IsFullyVested.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static SpecialEmployee CreateSpecialEmployee(int personId,
                    int managersPersonId,
                    int salary,
                    int carsVIN,
                    int bonus,
                    bool isFullyVested)
        {
            SpecialEmployee specialEmployee = new SpecialEmployee();
            specialEmployee.PersonId = personId;
            specialEmployee.ManagersPersonId = managersPersonId;
            specialEmployee.Salary = salary;
            specialEmployee.CarsVIN = carsVIN;
            specialEmployee.Bonus = bonus;
            specialEmployee.IsFullyVested = isFullyVested;
            return specialEmployee;
        }
        /// <summary>
        /// There are no comments for Property CarsVIN in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int CarsVIN
        {
            get
            {
                return this._CarsVIN;
            }
            set
            {
                this.OnCarsVINChanging(value);
                this._CarsVIN = value;
                this.OnCarsVINChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _CarsVIN;
        partial void OnCarsVINChanging(int value);
        partial void OnCarsVINChanged();
        /// <summary>
        /// There are no comments for Property Bonus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int Bonus
        {
            get
            {
                return this._Bonus;
            }
            set
            {
                this.OnBonusChanging(value);
                this._Bonus = value;
                this.OnBonusChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _Bonus;
        partial void OnBonusChanging(int value);
        partial void OnBonusChanged();
        /// <summary>
        /// There are no comments for Property IsFullyVested in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual bool IsFullyVested
        {
            get
            {
                return this._IsFullyVested;
            }
            set
            {
                this.OnIsFullyVestedChanging(value);
                this._IsFullyVested = value;
                this.OnIsFullyVestedChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private bool _IsFullyVested;
        partial void OnIsFullyVestedChanging(bool value);
        partial void OnIsFullyVestedChanged();
    }
    /// <summary>
    /// There are no comments for ContractorSingle in the schema.
    /// </summary>
    public partial class ContractorSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Contractor>
    {
        /// <summary>
        /// Initialize a new ContractorSingle object.
        /// </summary>
        public ContractorSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new ContractorSingle object.
        /// </summary>
        public ContractorSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }

        /// <summary>
        /// Initialize a new ContractorSingle object.
        /// </summary>
        public ContractorSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<Contractor> query)
            : base(query) { }

        /// <summary>
        /// There are no comments for PersonMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonMetadata
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._PersonMetadata == null))
                {
                    this._PersonMetadata = Context.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>(GetPath("PersonMetadata"));
                }
                return this._PersonMetadata;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonMetadata;
    }
    /// <summary>
    /// There are no comments for Contractor in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PersonId
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("PersonId")]
    public partial class Contractor : Person
    {
        /// <summary>
        /// Create a new Contractor object.
        /// </summary>
        /// <param name="personId">Initial value of PersonId.</param>
        /// <param name="contratorCompanyId">Initial value of ContratorCompanyId.</param>
        /// <param name="billingRate">Initial value of BillingRate.</param>
        /// <param name="teamContactPersonId">Initial value of TeamContactPersonId.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static Contractor CreateContractor(int personId, int contratorCompanyId, int billingRate, int teamContactPersonId)
        {
            Contractor contractor = new Contractor();
            contractor.PersonId = personId;
            contractor.ContratorCompanyId = contratorCompanyId;
            contractor.BillingRate = billingRate;
            contractor.TeamContactPersonId = teamContactPersonId;
            return contractor;
        }
        /// <summary>
        /// There are no comments for Property ContratorCompanyId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int ContratorCompanyId
        {
            get
            {
                return this._ContratorCompanyId;
            }
            set
            {
                this.OnContratorCompanyIdChanging(value);
                this._ContratorCompanyId = value;
                this.OnContratorCompanyIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _ContratorCompanyId;
        partial void OnContratorCompanyIdChanging(int value);
        partial void OnContratorCompanyIdChanged();
        /// <summary>
        /// There are no comments for Property BillingRate in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int BillingRate
        {
            get
            {
                return this._BillingRate;
            }
            set
            {
                this.OnBillingRateChanging(value);
                this._BillingRate = value;
                this.OnBillingRateChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _BillingRate;
        partial void OnBillingRateChanging(int value);
        partial void OnBillingRateChanged();
        /// <summary>
        /// There are no comments for Property TeamContactPersonId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual int TeamContactPersonId
        {
            get
            {
                return this._TeamContactPersonId;
            }
            set
            {
                this.OnTeamContactPersonIdChanging(value);
                this._TeamContactPersonId = value;
                this.OnTeamContactPersonIdChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _TeamContactPersonId;
        partial void OnTeamContactPersonIdChanging(int value);
        partial void OnTeamContactPersonIdChanged();
        /// <summary>
        /// There are no comments for Property JobDescription in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual string JobDescription
        {
            get
            {
                return this._JobDescription;
            }
            set
            {
                this.OnJobDescriptionChanging(value);
                this._JobDescription = value;
                this.OnJobDescriptionChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _JobDescription;
        partial void OnJobDescriptionChanging(string value);
        partial void OnJobDescriptionChanged();
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="productId">The value of productId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product> source,
            int productId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "ProductId", productId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ProductSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="orderId">The value of orderId</param>
        /// <param name="productId">The value of productId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine> source,
            int orderId,
            global::System.Nullable<int> productId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "OrderId", orderId },
                { "ProductId", productId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLineSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="personId">The value of personId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source,
            int personId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "PersonId", personId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="personMetadataId">The value of personMetadataId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> source,
            int personMetadataId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "PersonMetadataId", personMetadataId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadataSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="personId">The value of personId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source,
            int personId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "PersonId", personId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person to its derived type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle CastToEmployee(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> query = source.CastTo<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee>();
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.EmployeeSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="personId">The value of personId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> source,
            int personId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "PersonId", personId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee to its derived type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle CastToSpecialEmployee(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> query = source.CastTo<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee>();
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person to its derived type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle CastToSpecialEmployee(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> query = source.CastTo<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee>();
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployeeSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor> source, global::System.Collections.Generic.IDictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor as global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="personId">The value of personId</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor> source,
            int personId)
        {
            global::System.Collections.Generic.IDictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "PersonId", personId }
            };
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person to its derived type global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle CastToContractor(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor> query = source.CastTo<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor>();
            return new global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.ContractorSingle(source.Context, query.GetPath(null));
        }
    }
}
namespace Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Default
{
    /// <summary>
    /// There are no comments for Container in the schema.
    /// </summary>
    public partial class Container : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new Container object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public Container(global::System.Uri serviceRoot) :
                base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server", "Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            resolvedType = this.DefaultResolveType(typeName, "Default", "Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Default");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            if (clientType.Namespace.Equals("Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client", global::System.StringComparison.Ordinal))
            {
                return string.Concat("Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.", clientType.Name);
            }
            if (clientType.Namespace.Equals("Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Default", global::System.StringComparison.Ordinal))
            {
                return string.Concat("Default.", clientType.Name);
            }
            return clientType.FullName;
        }
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product> Products
        {
            get
            {
                if ((this._Products == null))
                {
                    this._Products = base.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product>("Products");
                }
                return this._Products;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product> _Products;
        /// <summary>
        /// There are no comments for OrderLines in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine> OrderLines
        {
            get
            {
                if ((this._OrderLines == null))
                {
                    this._OrderLines = base.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine>("OrderLines");
                }
                return this._OrderLines;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine> _OrderLines;
        /// <summary>
        /// There are no comments for People in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> People
        {
            get
            {
                if ((this._People == null))
                {
                    this._People = base.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person>("People");
                }
                return this._People;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> _People;
        /// <summary>
        /// There are no comments for PersonsMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> PersonsMetadata
        {
            get
            {
                if ((this._PersonsMetadata == null))
                {
                    this._PersonsMetadata = base.CreateQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata>("PersonsMetadata");
                }
                return this._PersonsMetadata;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata> _PersonsMetadata;
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual void AddToProducts(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product product)
        {
            base.AddObject("Products", product);
        }
        /// <summary>
        /// There are no comments for OrderLines in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual void AddToOrderLines(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine orderLine)
        {
            base.AddObject("OrderLines", orderLine);
        }
        /// <summary>
        /// There are no comments for People in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual void AddToPeople(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person person)
        {
            base.AddObject("People", person);
        }
        /// <summary>
        /// There are no comments for PersonsMetadata in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public virtual void AddToPersonsMetadata(global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.PersonMetadata personMetadata)
        {
            base.AddObject("PersonsMetadata", personMetadata);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityType Name=""Product"">
        <Key>
          <PropertyRef Name=""ProductId"" />
        </Key>
        <Property Name=""ProductId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Description"" Type=""Edm.String"" />
        <Property Name=""BaseConcurrency"" Type=""Edm.String"" />
      </EntityType>
      <EntityType Name=""OrderLine"">
        <Key>
          <PropertyRef Name=""OrderId"" />
          <PropertyRef Name=""ProductId"" />
        </Key>
        <Property Name=""OrderId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""ProductId"" Type=""Edm.Int32"" />
        <Property Name=""Quantity"" Type=""Edm.Int32"" Nullable=""false"" />
        <NavigationProperty Name=""Product"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Product"">
          <ReferentialConstraint Property=""ProductId"" ReferencedProperty=""ProductId"" />
        </NavigationProperty>
      </EntityType>
      <EntityType Name=""Person"">
        <Key>
          <PropertyRef Name=""PersonId"" />
        </Key>
        <Property Name=""PersonId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Name"" Type=""Edm.String"" />
        <NavigationProperty Name=""PersonMetadata"" Type=""Collection(Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.PersonMetadata)"" />
      </EntityType>
      <EntityType Name=""PersonMetadata"">
        <Key>
          <PropertyRef Name=""PersonMetadataId"" />
        </Key>
        <Property Name=""PersonMetadataId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""PersonId"" Type=""Edm.Int32"" />
        <Property Name=""PropertyName"" Type=""Edm.String"" />
        <Property Name=""PropertyValue"" Type=""Edm.String"" />
        <NavigationProperty Name=""Person"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Person"">
          <ReferentialConstraint Property=""PersonId"" ReferencedProperty=""PersonId"" />
        </NavigationProperty>
      </EntityType>
      <EntityType Name=""Employee"" BaseType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Person"">
        <Property Name=""ManagersPersonId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Salary"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Title"" Type=""Edm.String"" />
        <NavigationProperty Name=""Manager"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee"" />
      </EntityType>
      <EntityType Name=""SpecialEmployee"" BaseType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee"">
        <Property Name=""CarsVIN"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Bonus"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""IsFullyVested"" Type=""Edm.Boolean"" Nullable=""false"" />
      </EntityType>
      <EntityType Name=""Contractor"" BaseType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Person"">
        <Property Name=""ContratorCompanyId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""BillingRate"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""TeamContactPersonId"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""JobDescription"" Type=""Edm.String"" />
      </EntityType>
    </Schema>
    <Schema Namespace=""Default"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <Action Name=""RetrieveProduct"">
        <ReturnType Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <Action Name=""RetrieveProduct"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Product"" />
        <ReturnType Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <Action Name=""RetrieveProduct"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.OrderLine"" />
        <ReturnType Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <Action Name=""UpdatePersonInfo"" />
      <Action Name=""UpdatePersonInfo"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Person"" />
      </Action>
      <Action Name=""UpdatePersonInfo"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee"" />
      </Action>
      <Action Name=""UpdatePersonInfo"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.SpecialEmployee"" />
      </Action>
      <Action Name=""UpdatePersonInfo"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Contractor"" />
      </Action>
      <Action Name=""IncreaseEmployeeSalary"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee"" />
        <Parameter Name=""n"" Type=""Edm.Int32"" Nullable=""false"" />
        <ReturnType Type=""Edm.Boolean"" Nullable=""false"" />
      </Action>
      <Action Name=""IncreaseEmployeeSalary"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.SpecialEmployee"" />
        <ReturnType Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <Action Name=""IncreaseSalaries"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Collection(Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee)"" />
        <Parameter Name=""n"" Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <Action Name=""IncreaseSalaries"" IsBound=""true"">
        <Parameter Name=""bindingParameter"" Type=""Collection(Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.SpecialEmployee)"" />
        <Parameter Name=""n"" Type=""Edm.Int32"" Nullable=""false"" />
      </Action>
      <EntityContainer Name=""Container"">
        <EntitySet Name=""Products"" EntityType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Product"" />
        <EntitySet Name=""OrderLines"" EntityType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.OrderLine"">
          <NavigationPropertyBinding Path=""Product"" Target=""Products"" />
        </EntitySet>
        <EntitySet Name=""People"" EntityType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Person"">
          <NavigationPropertyBinding Path=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.Employee/Manager"" Target=""People"" />
          <NavigationPropertyBinding Path=""PersonMetadata"" Target=""PersonsMetadata"" />
        </EntitySet>
        <EntitySet Name=""PersonsMetadata"" EntityType=""Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Server.PersonMetadata"">
          <NavigationPropertyBinding Path=""Person"" Target=""People"" />
        </EntitySet>
        <ActionImport Name=""RetrieveProduct"" Action=""Default.RetrieveProduct"" />
        <ActionImport Name=""UpdatePersonInfo"" Action=""Default.UpdatePersonInfo"" />
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    global::System.Collections.Generic.IEnumerable<global::Microsoft.OData.Edm.Validation.EdmError> errors;
                    global::Microsoft.OData.Edm.IEdmModel edmModel;

                    if (!global::Microsoft.OData.Edm.Csdl.CsdlReader.TryParse(reader, false, out edmModel, out errors))
                    {
                        global::System.Text.StringBuilder errorMessages = new System.Text.StringBuilder();
                        foreach (var error in errors)
                        {
                            errorMessages.Append(error.ErrorMessage);
                            errorMessages.Append("; ");
                        }
                        throw new global::System.InvalidOperationException(errorMessages.ToString());
                    }

                    return edmModel;
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }

        }
        /// <summary>
        /// There are no comments for RetrieveProduct in the schema.
        /// </summary>
        public virtual global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> RetrieveProduct()
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(this, this.BaseUri.OriginalString.Trim('/') + "/RetrieveProduct");
        }
        /// <summary>
        /// There are no comments for UpdatePersonInfo in the schema.
        /// </summary>
        public virtual global::Microsoft.OData.Client.DataServiceActionQuery UpdatePersonInfo()
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuery(this, this.BaseUri.OriginalString.Trim('/') + "/UpdatePersonInfo");
        }
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// There are no comments for RetrieveProduct in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> RetrieveProduct(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Product> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(source.Context, source.AppendRequestUri("Default.RetrieveProduct"));
        }
        /// <summary>
        /// There are no comments for RetrieveProduct in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> RetrieveProduct(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.OrderLine> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(source.Context, source.AppendRequestUri("Default.RetrieveProduct"));
        }
        /// <summary>
        /// There are no comments for UpdatePersonInfo in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery UpdatePersonInfo(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Person> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.UpdatePersonInfo"));
        }
        /// <summary>
        /// There are no comments for UpdatePersonInfo in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery UpdatePersonInfo(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.UpdatePersonInfo"));
        }
        /// <summary>
        /// There are no comments for UpdatePersonInfo in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery UpdatePersonInfo(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.UpdatePersonInfo"));
        }
        /// <summary>
        /// There are no comments for UpdatePersonInfo in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery UpdatePersonInfo(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Contractor> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.UpdatePersonInfo"));
        }
        /// <summary>
        /// There are no comments for IncreaseEmployeeSalary in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<bool> IncreaseEmployeeSalary(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source, int n)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<bool>(source.Context, source.AppendRequestUri("Default.IncreaseEmployeeSalary"), new global::Microsoft.OData.Client.BodyOperationParameter("n", n));
        }
        /// <summary>
        /// There are no comments for IncreaseEmployeeSalary in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> IncreaseEmployeeSalary(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(source.Context, source.AppendRequestUri("Default.IncreaseEmployeeSalary"));
        }
        /// <summary>
        /// There are no comments for IncreaseSalaries in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery IncreaseSalaries(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.Employee> source, int n)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.IncreaseSalaries"), new global::Microsoft.OData.Client.BodyOperationParameter("n", n));
        }
        /// <summary>
        /// There are no comments for IncreaseSalaries in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuery IncreaseSalaries(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.E2E.Tests.ActionOverloadingTests.Client.SpecialEmployee> source, int n)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("Default.IncreaseSalaries"), new global::Microsoft.OData.Client.BodyOperationParameter("n", n));
        }
    }
}
