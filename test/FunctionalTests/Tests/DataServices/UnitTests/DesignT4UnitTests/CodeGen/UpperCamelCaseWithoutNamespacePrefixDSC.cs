//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 2/10/2015 2:53:45 PM
namespace Namespace.Foo.DSC
{
    /// <summary>
    /// There are no comments for BaseTypeSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("baseTypeSingle")]
    public partial class BaseTypeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<BaseType>
    {
        /// <summary>
        /// Initialize a new BaseTypeSingle object.
        /// </summary>
        public BaseTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new BaseTypeSingle object.
        /// </summary>
        public BaseTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new BaseTypeSingle object.
        /// </summary>
        public BaseTypeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<BaseType> query)
            : base(query) {}

    }
    /// <summary>
    /// There are no comments for BaseType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// KeyProp
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("keyProp")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("baseType")]
    public partial class BaseType : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new BaseType object.
        /// </summary>
        /// <param name="keyProp">Initial value of KeyProp.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static BaseType CreateBaseType(int keyProp)
        {
            BaseType baseType = new BaseType();
            baseType.KeyProp = keyProp;
            return baseType;
        }
        /// <summary>
        /// There are no comments for Property KeyProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("keyProp")]
        public int KeyProp
        {
            get
            {
                return this._KeyProp;
            }
            set
            {
                this.OnKeyPropChanging(value);
                this._KeyProp = value;
                this.OnKeyPropChanged();
                this.OnPropertyChanged("keyProp");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private int _KeyProp;
        partial void OnKeyPropChanging(int value);
        partial void OnKeyPropChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for TestTypeSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("testTypeSingle")]
    public partial class TestTypeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<TestType>
    {
        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<TestType> query)
            : base(query) {}

        /// <summary>
        /// There are no comments for SingleType in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("singleType")]
        public global::Namespace.Foo.DSC.SingleTypeSingle SingleType
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._SingleType == null))
                {
                    this._SingleType = new global::Namespace.Foo.DSC.SingleTypeSingle(this.Context, GetPath("singleType"));
                }
                return this._SingleType;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Namespace.Foo.DSC.SingleTypeSingle _SingleType;
    }
    /// <summary>
    /// There are no comments for TestType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// KeyProp
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("keyProp")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("testType")]
    public partial class TestType : BaseType
    {
        /// <summary>
        /// Create a new TestType object.
        /// </summary>
        /// <param name="keyProp">Initial value of KeyProp.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static TestType CreateTestType(int keyProp)
        {
            TestType testType = new TestType();
            testType.KeyProp = keyProp;
            return testType;
        }
        /// <summary>
        /// There are no comments for Property SingleType in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("singleType")]
        public global::Namespace.Foo.DSC.SingleType SingleType
        {
            get
            {
                return this._SingleType;
            }
            set
            {
                this.OnSingleTypeChanging(value);
                this._SingleType = value;
                this.OnSingleTypeChanged();
                this.OnPropertyChanged("singleType");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Namespace.Foo.DSC.SingleType _SingleType;
        partial void OnSingleTypeChanging(global::Namespace.Foo.DSC.SingleType value);
        partial void OnSingleTypeChanged();
    }
    /// <summary>
    /// There are no comments for SingleTypeSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("singleTypeSingle")]
    public partial class SingleTypeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<SingleType>
    {
        /// <summary>
        /// Initialize a new SingleTypeSingle object.
        /// </summary>
        public SingleTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new SingleTypeSingle object.
        /// </summary>
        public SingleTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new SingleTypeSingle object.
        /// </summary>
        public SingleTypeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<SingleType> query)
            : base(query) {}

        /// <summary>
        /// There are no comments for BaseSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("baseSet")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> BaseSet
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._BaseSet == null))
                {
                    this._BaseSet = Context.CreateQuery<global::Namespace.Foo.DSC.TestType>(GetPath("baseSet"));
                }
                return this._BaseSet;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> _BaseSet;
    }
    /// <summary>
    /// There are no comments for SingleType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// KeyProp
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("keyProp")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("singleType")]
    public partial class SingleType : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new SingleType object.
        /// </summary>
        /// <param name="keyProp">Initial value of KeyProp.</param>
        /// <param name="colorProp">Initial value of ColorProp.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static SingleType CreateSingleType(int keyProp, global::Namespace.Foo.DSC.Color colorProp)
        {
            SingleType singleType = new SingleType();
            singleType.KeyProp = keyProp;
            singleType.ColorProp = colorProp;
            return singleType;
        }
        /// <summary>
        /// There are no comments for Property KeyProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("keyProp")]
        public int KeyProp
        {
            get
            {
                return this._KeyProp;
            }
            set
            {
                this.OnKeyPropChanging(value);
                this._KeyProp = value;
                this.OnKeyPropChanged();
                this.OnPropertyChanged("keyProp");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private int _KeyProp;
        partial void OnKeyPropChanging(int value);
        partial void OnKeyPropChanged();
        /// <summary>
        /// There are no comments for Property ColorProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("colorProp")]
        public global::Namespace.Foo.DSC.Color ColorProp
        {
            get
            {
                return this._ColorProp;
            }
            set
            {
                this.OnColorPropChanging(value);
                this._ColorProp = value;
                this.OnColorPropChanged();
                this.OnPropertyChanged("colorProp");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Namespace.Foo.DSC.Color _ColorProp;
        partial void OnColorPropChanging(global::Namespace.Foo.DSC.Color value);
        partial void OnColorPropChanged();
        /// <summary>
        /// There are no comments for Property BaseSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("baseSet")]
        public global::Microsoft.OData.Client.DataServiceCollection<global::Namespace.Foo.DSC.TestType> BaseSet
        {
            get
            {
                return this._BaseSet;
            }
            set
            {
                this.OnBaseSetChanging(value);
                this._BaseSet = value;
                this.OnBaseSetChanged();
                this.OnPropertyChanged("baseSet");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceCollection<global::Namespace.Foo.DSC.TestType> _BaseSet = new global::Microsoft.OData.Client.DataServiceCollection<global::Namespace.Foo.DSC.TestType>(null, global::Microsoft.OData.Client.TrackingMode.None);
        partial void OnBaseSetChanging(global::Microsoft.OData.Client.DataServiceCollection<global::Namespace.Foo.DSC.TestType> value);
        partial void OnBaseSetChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
        /// <summary>
        /// There are no comments for Foo7 in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("foo7")]
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::System.Nullable<int>> Foo7()
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::System.Nullable<int>>(this.Context, resource.EditLink.OriginalString.Trim('/') + "/namespace.foo.DSC.foo7");
        }
    }
    /// <summary>
    /// There are no comments for Color in the schema.
    /// </summary>
    [global::System.Flags]
    [global::Microsoft.OData.Client.OriginalNameAttribute("color")]
    public enum Color
    {
        [global::Microsoft.OData.Client.OriginalNameAttribute("red")]
        Red = 0,
        [global::Microsoft.OData.Client.OriginalNameAttribute("white")]
        White = 1,
        [global::Microsoft.OData.Client.OriginalNameAttribute("blue")]
        Blue = 2
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.BaseType as global::Namespace.Foo.DSC.BaseTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Namespace.Foo.DSC.BaseTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.BaseType> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Namespace.Foo.DSC.BaseTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.BaseType as global::Namespace.Foo.DSC.BaseTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keyProp">The value of keyProp</param>
        public static global::Namespace.Foo.DSC.BaseTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.BaseType> source,
            int keyProp)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "keyProp", keyProp }
            };
            return new global::Namespace.Foo.DSC.BaseTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.TestType as global::Namespace.Foo.DSC.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Namespace.Foo.DSC.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Namespace.Foo.DSC.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.TestType as global::Namespace.Foo.DSC.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keyProp">The value of keyProp</param>
        public static global::Namespace.Foo.DSC.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> source,
            int keyProp)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "keyProp", keyProp }
            };
            return new global::Namespace.Foo.DSC.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Namespace.Foo.DSC.BaseType to its derived type global::Namespace.Foo.DSC.TestType
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Namespace.Foo.DSC.TestTypeSingle CastToTestType(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Namespace.Foo.DSC.BaseType> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Namespace.Foo.DSC.TestType> query = source.CastTo<global::Namespace.Foo.DSC.TestType>();
            return new global::Namespace.Foo.DSC.TestTypeSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.SingleType as global::Namespace.Foo.DSC.SingleTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Namespace.Foo.DSC.SingleTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.SingleType> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Namespace.Foo.DSC.SingleTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Namespace.Foo.DSC.SingleType as global::Namespace.Foo.DSC.SingleTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keyProp">The value of keyProp</param>
        public static global::Namespace.Foo.DSC.SingleTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.SingleType> source,
            int keyProp)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "keyProp", keyProp }
            };
            return new global::Namespace.Foo.DSC.SingleTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// There are no comments for Foo7 in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("foo7")]
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::System.Nullable<int>> Foo7(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Namespace.Foo.DSC.SingleType> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::System.Nullable<int>>(source.Context, source.AppendRequestUri("namespace.foo.DSC.foo7"));
        }
    }
}
namespace Namespace.Bar.DSC
{
    /// <summary>
    /// There are no comments for SingletonContainer in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("singletonContainer")]
    public partial class SingletonContainer : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new SingletonContainer object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public SingletonContainer(global::System.Uri serviceRoot) : 
                base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "namespace.bar.DSC", "Namespace.Bar.DSC");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            resolvedType = this.DefaultResolveType(typeName, "namespace.foo.DSC", "Namespace.Foo.DSC");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType, typeof(global::Microsoft.OData.Client.OriginalNameAttribute), true));
            if (clientType.Namespace.Equals("Namespace.Bar.DSC", global::System.StringComparison.Ordinal))
            {
                if (originalNameAttribute != null)
                {
                    return string.Concat("namespace.bar.DSC.", originalNameAttribute.OriginalName);
                }
                return string.Concat("namespace.bar.DSC.", clientType.Name);
            }
            if (clientType.Namespace.Equals("Namespace.Foo.DSC", global::System.StringComparison.Ordinal))
            {
                if (originalNameAttribute != null)
                {
                    return string.Concat("namespace.foo.DSC.", originalNameAttribute.OriginalName);
                }
                return string.Concat("namespace.foo.DSC.", clientType.Name);
            }
            if (originalNameAttribute != null)
            {
                return clientType.Namespace + "." + originalNameAttribute.OriginalName;
            }
            return clientType.FullName;
        }
        /// <summary>
        /// There are no comments for TestTypeSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("testTypeSet")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> TestTypeSet
        {
            get
            {
                if ((this._TestTypeSet == null))
                {
                    this._TestTypeSet = base.CreateQuery<global::Namespace.Foo.DSC.TestType>("testTypeSet");
                }
                return this._TestTypeSet;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.TestType> _TestTypeSet;
        /// <summary>
        /// There are no comments for BaseTypeSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("baseTypeSet")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.BaseType> BaseTypeSet
        {
            get
            {
                if ((this._BaseTypeSet == null))
                {
                    this._BaseTypeSet = base.CreateQuery<global::Namespace.Foo.DSC.BaseType>("baseTypeSet");
                }
                return this._BaseTypeSet;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Namespace.Foo.DSC.BaseType> _BaseTypeSet;
        /// <summary>
        /// There are no comments for TestTypeSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public void AddToTestTypeSet(global::Namespace.Foo.DSC.TestType testType)
        {
            base.AddObject("testTypeSet", testType);
        }
        /// <summary>
        /// There are no comments for BaseTypeSet in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public void AddToBaseTypeSet(global::Namespace.Foo.DSC.BaseType baseType)
        {
            base.AddObject("baseTypeSet", baseType);
        }
        /// <summary>
        /// There are no comments for SuperType in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("superType")]
        public global::Namespace.Foo.DSC.TestTypeSingle SuperType
        {
            get
            {
                if ((this._SuperType == null))
                {
                    this._SuperType = new global::Namespace.Foo.DSC.TestTypeSingle(this, "superType");
                }
                return this._SuperType;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Namespace.Foo.DSC.TestTypeSingle _SuperType;
        /// <summary>
        /// There are no comments for Single in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("single")]
        public global::Namespace.Foo.DSC.SingleTypeSingle Single
        {
            get
            {
                if ((this._Single == null))
                {
                    this._Single = new global::Namespace.Foo.DSC.SingleTypeSingle(this, "single");
                }
                return this._Single;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Namespace.Foo.DSC.SingleTypeSingle _Single;
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""namespace.foo.DSC"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityType Name=""baseType"">
        <Key>
          <PropertyRef Name=""keyProp"" />
        </Key>
        <Property Name=""keyProp"" Type=""Edm.Int32"" Nullable=""false"" />
      </EntityType>
      <EntityType Name=""testType"" BaseType=""namespace.foo.DSC.baseType"">
        <NavigationProperty Name=""singleType"" Type=""namespace.foo.DSC.singleType"" />
      </EntityType>
      <EntityType Name=""singleType"">
        <Key>
          <PropertyRef Name=""keyProp"" />
        </Key>
        <Property Name=""keyProp"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""colorProp"" Type=""namespace.foo.DSC.color"" Nullable=""false"" />
        <NavigationProperty Name=""baseSet"" Type=""Collection(namespace.foo.DSC.testType)"" />
      </EntityType>
      <EnumType Name=""color"" UnderlyingType=""Edm.Int32"" IsFlags=""true"">
        <Member Name=""red"" />
        <Member Name=""white"" />
        <Member Name=""blue"" />
      </EnumType>
      <Function Name=""foo6"">
        <Parameter Name=""p1"" Type=""Collection(namespace.foo.DSC.testType)"" />
        <ReturnType Type=""Edm.String"" />
      </Function>
      <Action Name=""foo7"" IsBound=""True"">
        <Parameter Name=""p1"" Type=""namespace.foo.DSC.singleType"" />
        <ReturnType Type=""Edm.Int32"" />
      </Action>
    </Schema>
    <Schema Namespace=""namespace.bar.DSC"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityContainer Name=""singletonContainer"">
        <EntitySet Name=""testTypeSet"" EntityType=""namespace.foo.DSC.testType"" />
        <EntitySet Name=""baseTypeSet"" EntityType=""namespace.foo.DSC.baseType"" />
        <Singleton Name=""superType"" Type=""namespace.foo.DSC.testType"" />
        <Singleton Name=""single"" Type=""namespace.foo.DSC.singleType"" />
        <FunctionImport Name=""foo6"" Function=""namespace.foo.DSC.foo6"" />
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.CsdlReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
        /// <summary>
        /// There are no comments for Foo6 in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("foo6")]
        public global::Microsoft.OData.Client.DataServiceQuerySingle<string> Foo6(global::System.Collections.Generic.ICollection<global::Namespace.Foo.DSC.TestType> p1, bool useEntityReference = false)
        {
            return this.CreateFunctionQuerySingle<string>("", "foo6", false, new global::Microsoft.OData.Client.UriEntityOperationParameter("p1", p1, useEntityReference));
        }
    }
}
