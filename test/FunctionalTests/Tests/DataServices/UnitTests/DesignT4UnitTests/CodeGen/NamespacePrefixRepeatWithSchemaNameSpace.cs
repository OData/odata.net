//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 6/23/2018 3:55:16 PM
namespace NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11
{
    /// <summary>
    /// There are no comments for MyContainer in the schema.
    /// </summary>
    public partial class MyContainer : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new MyContainer object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public MyContainer(global::System.Uri serviceRoot) : 
                base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11", "NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            resolvedType = this.DefaultResolveType(typeName, "NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12", "NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            if (clientType.Namespace.Equals("NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11", global::System.StringComparison.Ordinal))
            {
                return string.Concat("NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.", clientType.Name);
            }
            if (clientType.Namespace.Equals("NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12", global::System.StringComparison.Ordinal))
            {
                return string.Concat("NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.", clientType.Name);
            }
            return null;
        }
        /// <summary>
        /// There are no comments for Items in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public global::Microsoft.OData.Client.DataServiceQuery<TestType> Items
        {
            get
            {
                if ((this._Items == null))
                {
                    this._Items = base.CreateQuery<TestType>("Items");
                }
                return this._Items;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<TestType> _Items;
        /// <summary>
        /// There are no comments for Items2 in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType> Items2
        {
            get
            {
                if ((this._Items2 == null))
                {
                    this._Items2 = base.CreateQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType>("Items2");
                }
                return this._Items2;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType> _Items2;
        /// <summary>
        /// There are no comments for Items in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public void AddToItems(TestType testType)
        {
            base.AddObject("Items", testType);
        }
        /// <summary>
        /// There are no comments for Items2 in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public void AddToItems2(global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType testType)
        {
            base.AddObject("Items2", testType);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityType Name=""TestType"">
        <Key>
          <PropertyRef Name=""KeyProp"" />
        </Key>
        <Property Name=""KeyProp"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""ValueProp"" Type=""Edm.String"" Nullable=""false"" />
      </EntityType>
      <EntityContainer Name=""MyContainer"">
        <EntitySet Name=""Items"" EntityType=""NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestType"" />
        <EntitySet Name=""Items2"" EntityType=""NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType"" />
      </EntityContainer>
    </Schema>
    <Schema Namespace=""NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityType Name=""TestType"">
        <Key>
          <PropertyRef Name=""KeyProp"" />
        </Key>
        <Property Name=""KeyProp"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""ValueProp"" Type=""Edm.String"" Nullable=""false"" />
      </EntityType>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    global::System.Collections.Generic.IEnumerable<global::Microsoft.OData.Edm.Validation.EdmError> errors;
                    global::Microsoft.OData.Edm.IEdmModel edmModel;
                    
                    if (!global::Microsoft.OData.Edm.Csdl.CsdlReader.TryParse(reader, false, out edmModel, out errors))
                    {
                        global::System.Text.StringBuilder errorMessages = new System.Text.StringBuilder();
                        foreach (var error in errors)
                        {
                            errorMessages.Append(error.ErrorMessage);
                            errorMessages.Append("; ");
                        }
                        throw new global::System.InvalidOperationException(errorMessages.ToString());
                    }

                    return edmModel;
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
    }
    /// <summary>
    /// There are no comments for TestTypeSingle in the schema.
    /// </summary>
    public partial class TestTypeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<TestType>
    {
        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<TestType> query)
            : base(query) {}

    }
    /// <summary>
    /// There are no comments for TestType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// KeyProp
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("KeyProp")]
    public partial class TestType : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new TestType object.
        /// </summary>
        /// <param name="keyProp">Initial value of KeyProp.</param>
        /// <param name="valueProp">Initial value of ValueProp.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static TestType CreateTestType(int keyProp, string valueProp)
        {
            TestType testType = new TestType();
            testType.KeyProp = keyProp;
            testType.ValueProp = valueProp;
            return testType;
        }
        /// <summary>
        /// There are no comments for Property KeyProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public int KeyProp
        {
            get
            {
                return this._KeyProp;
            }
            set
            {
                this.OnKeyPropChanging(value);
                this._KeyProp = value;
                this.OnKeyPropChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _KeyProp;
        partial void OnKeyPropChanging(int value);
        partial void OnKeyPropChanged();
        /// <summary>
        /// There are no comments for Property ValueProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public string ValueProp
        {
            get
            {
                return this._ValueProp;
            }
            set
            {
                this.OnValuePropChanging(value);
                this._ValueProp = value;
                this.OnValuePropChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _ValueProp;
        partial void OnValuePropChanging(string value);
        partial void OnValuePropChanged();
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestType as global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestType> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestType as global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keyProp">The value of keyProp</param>
        public static global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestType> source,
            int keyProp)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "KeyProp", keyProp }
            };
            return new global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
    }
}
namespace NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12
{
    /// <summary>
    /// There are no comments for TestTypeSingle in the schema.
    /// </summary>
    public partial class TestTypeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<TestType>
    {
        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new TestTypeSingle object.
        /// </summary>
        public TestTypeSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<TestType> query)
            : base(query) {}

    }
    /// <summary>
    /// There are no comments for TestType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// KeyProp
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("KeyProp")]
    public partial class TestType : global::Microsoft.OData.Client.BaseEntityType
    {
        /// <summary>
        /// Create a new TestType object.
        /// </summary>
        /// <param name="keyProp">Initial value of KeyProp.</param>
        /// <param name="valueProp">Initial value of ValueProp.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public static TestType CreateTestType(int keyProp, string valueProp)
        {
            TestType testType = new TestType();
            testType.KeyProp = keyProp;
            testType.ValueProp = valueProp;
            return testType;
        }
        /// <summary>
        /// There are no comments for Property KeyProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public int KeyProp
        {
            get
            {
                return this._KeyProp;
            }
            set
            {
                this.OnKeyPropChanging(value);
                this._KeyProp = value;
                this.OnKeyPropChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private int _KeyProp;
        partial void OnKeyPropChanging(int value);
        partial void OnKeyPropChanged();
        /// <summary>
        /// There are no comments for Property ValueProp in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        public string ValueProp
        {
            get
            {
                return this._ValueProp;
            }
            set
            {
                this.OnValuePropChanging(value);
                this._ValueProp = value;
                this.OnValuePropChanged();
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")]
        private string _ValueProp;
        partial void OnValuePropChanging(string value);
        partial void OnValuePropChanged();
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType as global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType as global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keyProp">The value of keyProp</param>
        public static global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestType> source,
            int keyProp)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "KeyProp", keyProp }
            };
            return new global::NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo11.Foo12.NamespacePrefixRepeatWithSchemaNameSpace.Foo1.Foo12.TestTypeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
    }
}
