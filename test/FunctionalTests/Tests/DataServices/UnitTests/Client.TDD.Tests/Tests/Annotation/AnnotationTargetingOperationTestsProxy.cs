//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 2/2/2015 10:49:33 AM
namespace Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy
{
    /// <summary>
    /// There are no comments for OperationTestServiceContainerPlus in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("OperationTestServiceContainer")]
    public partial class OperationTestServiceContainerPlus : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new OperationTestServiceContainerPlus object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public OperationTestServiceContainerPlus(global::System.Uri serviceRoot) :
            base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected new global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "OperationTestService", "Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType, typeof(global::Microsoft.OData.Client.OriginalNameAttribute), true));
            if (clientType.Namespace.Equals("Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy", global::System.StringComparison.Ordinal))
            {
                if (originalNameAttribute != null)
                {
                    return string.Concat("OperationTestService.", originalNameAttribute.OriginalName);
                }
                return string.Concat("OperationTestService.", clientType.Name);
            }
            if (originalNameAttribute != null)
            {
                return clientType.Namespace + "." + originalNameAttribute.OriginalName;
            }
            return clientType.FullName;
        }
        /// <summary>
        /// There are no comments for ETSetsPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("ETSets")]
        public global::Microsoft.OData.Client.DataServiceQuery<ETPlus> ETSetsPlus
        {
            get
            {
                if ((this._ETSetsPlus == null))
                {
                    this._ETSetsPlus = base.CreateQuery<ETPlus>("ETSets");
                }
                return this._ETSetsPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<ETPlus> _ETSetsPlus;
        /// <summary>
        /// There are no comments for DerivedETSetsPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("DerivedETSets")]
        public global::Microsoft.OData.Client.DataServiceQuery<DerivedETPlus> DerivedETSetsPlus
        {
            get
            {
                if ((this._DerivedETSetsPlus == null))
                {
                    this._DerivedETSetsPlus = base.CreateQuery<DerivedETPlus>("DerivedETSets");
                }
                return this._DerivedETSetsPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<DerivedETPlus> _DerivedETSetsPlus;
        /// <summary>
        /// There are no comments for ETSetsPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public void AddToETSetsPlus(ETPlus eT)
        {
            base.AddObject("ETSets", eT);
        }
        /// <summary>
        /// There are no comments for DerivedETSetsPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public void AddToDerivedETSetsPlus(DerivedETPlus derivedET)
        {
            base.AddObject("DerivedETSets", derivedET);
        }
        /// <summary>
        /// There are no comments for SingleETPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("SingleET")]
        public ETPlusSingle SingleETPlus
        {
            get
            {
                if ((this._SingleETPlus == null))
                {
                    this._SingleETPlus = new ETPlusSingle(this, "SingleET");
                }
                return this._SingleETPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private ETPlusSingle _SingleETPlus;
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""OperationTestService"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <Term Name=""RecordAnnotation"" Type=""OperationTestService.RecordAnnotationType"" />
      <Term Name=""NavAnnotation"" Type=""Collection(OperationTestService.ET)"" />
      <Term Name=""NavCountAnnotation"" Type=""Edm.Int32"" />
      <Term Name=""TermCastAnnotation"" Type=""Edm.String"" />
      <Term Name=""NonExistingTermName"" Type=""Edm.String"" />
      <Term Name=""NavOfDerivedETAnnotation"" Type=""Collection(OperationTestService.DerivedET)"" />
      <Term Name=""CollectionOfCTPropertyAnnotation"" Type=""Collection(OperationTestService.CT)"" />
      <Term Name=""CollectionOfDerviedCTAnnotation"" Type=""Collection(OperationTestService.DerivedCT)"" />
      <Annotations Target=""OperationTestService.ET"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""OperationTestService.CollectionOfCTPropertyAnnotation"">
          <Collection>
            <Path>ComplexP</Path>
          </Collection>
        </Annotation>
      </Annotations>
      <Annotations Target=""OperationTestService.ET/ComplexP"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""OperationTestService.CollectionOfDerviedCTAnnotation"">
          <Collection>
            <Path>ComplexP/OperationTestService.DerivedCT</Path>
          </Collection>
        </Annotation>
      </Annotations>
      <Annotations Target=""OperationTestService.OperationTestServiceContainer/UnboundFunctionWithParameter"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""TestExternalTargetingAnnotationOnFunctionImport"" />
      </Annotations>
      <Annotations Target=""OperationTestService.OperationTestServiceContainer/UnboundActionWithParameter"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""TestExternalTargetingAnnotationOnActionImport"" />
      </Annotations>
      <Annotations Target=""OperationTestService.OperationTestServiceContainer/DerivedETSets"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""TestExternalTargetingAnnotationOnDerivedEntitySets"" />
      </Annotations>
      <Annotations Target=""OperationTestService.OperationTestServiceContainer/SingleET"" Qualifier=""ExternalTargeting"">
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""TestExternalTargetingAnnotationOnSingleton"" />
      </Annotations>
      <ComplexType Name=""RecordAnnotationType"">
        <Property Name=""Name"" Type=""Edm.String"" />
        <Property Name=""OtherProperties"" Type=""Collection(Edm.String)"" />
        <Property Name=""CollectionOfCTP"" Type=""Collection(OperationTestService.CT)"" />
        <Property Name=""CollectionOfDerivedCTP"" Type=""Collection(OperationTestService.DerivedCT)"" />
      </ComplexType>
      <EntityType Name=""ET"">
        <Key>
          <PropertyRef Name=""UserName"" />
        </Key>
        <Property Name=""UserName"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""ComplexP"" Type=""OperationTestService.CT"">
          <Annotation Term=""OperationTestService.RecordAnnotation"">
            <Record>
              <PropertyValue Property=""Name"" Path=""UserName"" />
              <PropertyValue Property=""OtherProperties"">
                <Collection />
              </PropertyValue>
              <PropertyValue Property=""CollectionOfCTP"">
                <Collection>
                  <Path>ComplexP</Path>
                </Collection>
              </PropertyValue>
              <PropertyValue Property=""CollectionOfDerivedCTP"">
                <Collection>
                  <Path>ComplexP/OperationTestService.DerivedCT</Path>
                </Collection>
              </PropertyValue>
            </Record>
          </Annotation>
        </Property>
        <NavigationProperty Name=""NavP"" Type=""Collection(OperationTestService.ET)"">
          <Annotation Term=""OperationTestService.NavOfDerivedETAnnotation"">
            <Path>NavP/OperationTestService.DerivedET</Path>
          </Annotation>
        </NavigationProperty>
        <Annotation Term=""OperationTestService.RecordAnnotation"">
          <Record>
            <PropertyValue Property=""Name"" Path=""UserName"" />
            <PropertyValue Property=""OtherProperties"">
              <Collection>
                <Path>ComplexP/Name</Path>
              </Collection>
            </PropertyValue>
            <PropertyValue Property=""CollectionOfCTP"">
              <Collection />
            </PropertyValue>
            <PropertyValue Property=""CollectionOfDerivedCTP"">
              <Collection>
                <Path>ComplexP/OperationTestService.DerivedCT</Path>
              </Collection>
            </PropertyValue>
          </Record>
        </Annotation>
        <Annotation Term=""OperationTestService.NavAnnotation"">
          <Path>NavP</Path>
        </Annotation>
        <Annotation Term=""OperationTestService.NavCountAnnotation"">
          <Path>NavP/$count</Path>
        </Annotation>
        <Annotation Term=""OperationTestService.TermCastAnnotation"">
          <Path>@OperationTestService.RecordAnnotation/Name</Path>
        </Annotation>
        <Annotation Term=""OperationTestService.NavOfDerivedETAnnotation"" Qualifier=""EntityType"">
          <Path>NavP@OperationTestService.NavOfDerivedETAnnotation</Path>
        </Annotation>
      </EntityType>
      <EntityType Name=""DerivedET"" BaseType=""OperationTestService.ET"">
        <Property Name=""DerivedComplexP"" Type=""OperationTestService.DerivedCT"">
          <Annotation Term=""OperationTestService.RecordAnnotation"">
            <Record>
              <PropertyValue Property=""Name"" Path=""UserName"" />
              <PropertyValue Property=""OtherProperties"">
                <Collection>
                  <Path>ComplexP/Name</Path>
                </Collection>
              </PropertyValue>
              <PropertyValue Property=""CollectionOfCTP"">
                <Collection>
                  <Path>ComplexP</Path>
                </Collection>
              </PropertyValue>
              <PropertyValue Property=""CollectionOfDerivedCTP"">
                <Collection>
                  <Path>ComplexP/OperationTestService.DerivedCT</Path>
                </Collection>
              </PropertyValue>
            </Record>
          </Annotation>
        </Property>
        <NavigationProperty Name=""SingleNavP"" Type=""OperationTestService.ET"">
          <Annotation Term=""OperationTestService.NavOfDerivedETAnnotation"">
            <Collection>
              <Path>SingleNavP/OperationTestService.DerivedET</Path>
            </Collection>
          </Annotation>
        </NavigationProperty>
        <Annotation Term=""OperationTestService.RecordAnnotation"">
          <Record>
            <PropertyValue Property=""Name"" Path=""UserName"" />
            <PropertyValue Property=""OtherProperties"">
              <Collection>
                <Path>ComplexP/Name</Path>
                <Path>DerivedComplexP/Name</Path>
                <Path>DerivedComplexP/Description</Path>
              </Collection>
            </PropertyValue>
            <PropertyValue Property=""CollectionOfCTP"">
              <Collection>
                <Path>ComplexP</Path>
                <Path>DerivedComplexP</Path>
              </Collection>
            </PropertyValue>
            <PropertyValue Property=""CollectionOfDerivedCTP"">
              <Collection>
                <Path>DerivedComplexP</Path>
              </Collection>
            </PropertyValue>
          </Record>
        </Annotation>
        <Annotation Term=""OperationTestService.NavAnnotation"">
          <Collection>
            <Path>SingleNavP</Path>
          </Collection>
        </Annotation>
      </EntityType>
      <ComplexType Name=""CT"">
        <Property Name=""Name"" Type=""Edm.String"" Nullable=""false"" />
      </ComplexType>
      <ComplexType Name=""DerivedCT"" BaseType=""OperationTestService.CT"">
        <Property Name=""Description"" Type=""Edm.String"" Nullable=""false"" />
        <Annotation Term=""OperationTestService.RecordAnnotation"">
          <Record />
        </Annotation>
      </ComplexType>
      <Function Name=""FunctionWithoutParameter"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionWithoutParameter"" />
      </Function>
      <Function Name=""FunctionWithoutParameter"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.DerivedET"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionWithoutParameterBoundToDerivedET"" />
      </Function>
      <Function Name=""FunctionWithParameter"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.ET"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionWithOneParameter"" />
      </Function>
      <Function Name=""FunctionWithParameter"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.DerivedET"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.ET"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionWithOneParameterBoundToDerivedET"" />
      </Function>
      <Function Name=""FunctionWithParameter"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <Parameter Name=""p2"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.ET"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionWithTwoParameters"" />
      </Function>
      <Function Name=""FunctionBoundToCollectionOfEntity"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionBoundToCollectionOfEntity"" />
      </Function>
      <Function Name=""FunctionBoundToCollectionOfEntity"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""Collection(OperationTestService.DerivedET)"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionBoundToCollectionOfDerivedEntity"" />
      </Function>
      <Function Name=""FunctionBoundToCollectionOfBaseEntity"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""entity"" Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionBoundToCollectionOfBaseEntity"" />
      </Function>
      <Action Name=""ActionWithoutReturnType"" IsBound=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionWithoutReturnType"" />
      </Action>
      <Action Name=""ActionWithParameterWithoutReturnType"" IsBound=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionWithParameterWithoutReturnType"" />
      </Action>
      <Action Name=""ActionWithoutParameter"" IsBound=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionWithoutParameter"" />
      </Action>
      <Action Name=""ActionWithParameter"" IsBound=""true"">
        <Parameter Name=""entity"" Type=""OperationTestService.ET"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionWithOneParameter"" />
      </Action>
      <Action Name=""ActionBoundToCollectionOfEntity"" IsBound=""true"">
        <Parameter Name=""entity"" Type=""Collection(OperationTestService.ET)"" Nullable=""false"" />
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""Collection(OperationTestService.CT)"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionBoundToCollectionOfEntity"" />
      </Action>
      <Function Name=""UnboundFunctionWithParameter"" IsComposable=""true"">
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""UnboundFunctionWithOneParameter"" />
      </Function>
      <Action Name=""UnboundActionWithParameter"">
        <Parameter Name=""p1"" Type=""Edm.String"" Nullable=""false"" />
        <ReturnType Type=""OperationTestService.CT"" Nullable=""false"" />
        <Annotation Term=""Org.OData.Core.V1.Description"" String=""UnboundActionWithOneParameter"" />
      </Action>
      <EntityContainer Name=""OperationTestServiceContainer"">
        <EntitySet Name=""ETSets"" EntityType=""OperationTestService.ET"">
          <NavigationPropertyBinding Path=""NavP"" Target=""ETSets"" />
        </EntitySet>
        <EntitySet Name=""DerivedETSets"" EntityType=""OperationTestService.DerivedET"">
          <NavigationPropertyBinding Path=""SingleNavP"" Target=""SingleET"" />
        </EntitySet>
        <Singleton Name=""SingleET"" Type=""OperationTestService.ET"" />
        <FunctionImport Name=""UnboundFunctionWithParameter"" Function=""OperationTestService.UnboundFunctionWithParameter"" IncludeInServiceDocument=""true"">
          <Annotation Term=""Org.OData.Core.V1.Description"" String=""FunctionImportWithParameter"" />
        </FunctionImport>
        <ActionImport Name=""UnboundActionWithParameter"" Action=""OperationTestService.UnboundActionWithParameter"">
          <Annotation Term=""Org.OData.Core.V1.Description"" String=""ActionImportWithParameter"" />
        </ActionImport>
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.CsdlReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
        /// <summary>
        /// There are no comments for UnboundFunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("UnboundFunctionWithParameter")]
        public global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> UnboundFunctionWithParameterPlus(string p1)
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this, "/UnboundFunctionWithParameter" + parameterString, true);
        }
        /// <summary>
        /// There are no comments for UnboundActionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("UnboundActionWithParameter")]
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> UnboundActionWithParameterPlus(string p1)
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this, this.BaseUri.OriginalString.Trim('/') + "/UnboundActionWithParameter", new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
    }
    /// <summary>
    /// There are no comments for RecordAnnotationTypePlus in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("RecordAnnotationType")]
    public partial class RecordAnnotationTypePlus : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// There are no comments for Property NamePlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Name")]
        public string NamePlus
        {
            get
            {
                return this._NamePlus;
            }
            set
            {
                this.OnNamePlusChanging(value);
                this._NamePlus = value;
                this.OnNamePlusChanged();
                this.OnPropertyChanged("Name");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private string _NamePlus;
        partial void OnNamePlusChanging(string value);
        partial void OnNamePlusChanged();
        /// <summary>
        /// There are no comments for Property OtherPropertiesPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("OtherProperties")]
        public global::System.Collections.ObjectModel.ObservableCollection<string> OtherPropertiesPlus
        {
            get
            {
                return this._OtherPropertiesPlus;
            }
            set
            {
                this.OnOtherPropertiesPlusChanging(value);
                this._OtherPropertiesPlus = value;
                this.OnOtherPropertiesPlusChanged();
                this.OnPropertyChanged("OtherProperties");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::System.Collections.ObjectModel.ObservableCollection<string> _OtherPropertiesPlus = new global::System.Collections.ObjectModel.ObservableCollection<string>();
        partial void OnOtherPropertiesPlusChanging(global::System.Collections.ObjectModel.ObservableCollection<string> value);
        partial void OnOtherPropertiesPlusChanged();
        /// <summary>
        /// There are no comments for Property CollectionOfCTPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("CollectionOfCTP")]
        public global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> CollectionOfCTPPlus
        {
            get
            {
                return this._CollectionOfCTPPlus;
            }
            set
            {
                this.OnCollectionOfCTPPlusChanging(value);
                this._CollectionOfCTPPlus = value;
                this.OnCollectionOfCTPPlusChanged();
                this.OnPropertyChanged("CollectionOfCTP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> _CollectionOfCTPPlus = new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>();
        partial void OnCollectionOfCTPPlusChanging(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> value);
        partial void OnCollectionOfCTPPlusChanged();
        /// <summary>
        /// There are no comments for Property CollectionOfDerivedCTPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("CollectionOfDerivedCTP")]
        public global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus> CollectionOfDerivedCTPPlus
        {
            get
            {
                return this._CollectionOfDerivedCTPPlus;
            }
            set
            {
                this.OnCollectionOfDerivedCTPPlusChanging(value);
                this._CollectionOfDerivedCTPPlus = value;
                this.OnCollectionOfDerivedCTPPlusChanged();
                this.OnPropertyChanged("CollectionOfDerivedCTP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus> _CollectionOfDerivedCTPPlus = new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus>();
        partial void OnCollectionOfDerivedCTPPlusChanging(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus> value);
        partial void OnCollectionOfDerivedCTPPlusChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for ETPlusSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("ETSingle")]
    public partial class ETPlusSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<ETPlus>
    {
        /// <summary>
        /// Initialize a new ETPlusSingle object.
        /// </summary>
        public ETPlusSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new ETPlusSingle object.
        /// </summary>
        public ETPlusSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }
        /// <summary>
        /// There are no comments for NavPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("NavP")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> NavPPlus
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._NavPPlus == null))
                {
                    this._NavPPlus = Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(GetPath("NavP"));
                }
                return this._NavPPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> _NavPPlus;
    }
    /// <summary>
    /// There are no comments for ETPlus in the schema.
    /// </summary>
    /// <KeyProperties>
    /// UserNamePlus
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("UserName")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("ET")]
    public partial class ETPlus : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new ETPlus object.
        /// </summary>
        /// <param name="userName">Initial value of UserNamePlus.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static ETPlus CreateETPlus(string userName)
        {
            ETPlus eTPlus = new ETPlus();
            eTPlus.UserNamePlus = userName;
            return eTPlus;
        }
        /// <summary>
        /// There are no comments for Property UserNamePlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("UserName")]
        public string UserNamePlus
        {
            get
            {
                return this._UserNamePlus;
            }
            set
            {
                this.OnUserNamePlusChanging(value);
                this._UserNamePlus = value;
                this.OnUserNamePlusChanged();
                this.OnPropertyChanged("UserName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private string _UserNamePlus;
        partial void OnUserNamePlusChanging(string value);
        partial void OnUserNamePlusChanged();
        /// <summary>
        /// There are no comments for Property ComplexPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("ComplexP")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus ComplexPPlus
        {
            get
            {
                return this._ComplexPPlus;
            }
            set
            {
                this.OnComplexPPlusChanging(value);
                this._ComplexPPlus = value;
                this.OnComplexPPlusChanged();
                this.OnPropertyChanged("ComplexP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus _ComplexPPlus;
        partial void OnComplexPPlusChanging(global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus value);
        partial void OnComplexPPlusChanged();
        /// <summary>
        /// There are no comments for Property NavPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("NavP")]
        public global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> NavPPlus
        {
            get
            {
                return this._NavPPlus;
            }
            set
            {
                this.OnNavPPlusChanging(value);
                this._NavPPlus = value;
                this.OnNavPPlusChanged();
                this.OnPropertyChanged("NavP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> _NavPPlus = new global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(null, global::Microsoft.OData.Client.TrackingMode.None);
        partial void OnNavPPlusChanging(global::Microsoft.OData.Client.DataServiceCollection<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> value);
        partial void OnNavPPlusChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
        /// <summary>
        /// There are no comments for FunctionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithoutParameter")]
        public global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> FunctionWithoutParameterPlus()
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context);
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/OperationTestService.FunctionWithoutParameter" + parameterString, true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(string p1)
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/OperationTestService.FunctionWithParameter" + parameterString, true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(string p1, string p2)
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1),
                    new global::Microsoft.OData.Client.UriOperationParameter("p2", p2));
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/OperationTestService.FunctionWithParameter" + parameterString, true);
        }
        /// <summary>
        /// There are no comments for ActionWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutReturnType")]
        public global::Microsoft.OData.Client.DataServiceActionQuery ActionWithoutReturnTypePlus()
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(this.Context, resource.EditLink.OriginalString.Trim('/') + "/OperationTestService.ActionWithoutReturnType");
        }
        /// <summary>
        /// There are no comments for ActionWithParameterWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameterWithoutReturnType")]
        public global::Microsoft.OData.Client.DataServiceActionQuery ActionWithParameterWithoutReturnTypePlus(string p1)
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(this.Context, resource.EditLink.OriginalString.Trim('/') + "/OperationTestService.ActionWithParameterWithoutReturnType", new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutParameter")]
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithoutParameterPlus()
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this.Context, resource.EditLink.OriginalString.Trim('/') + "/OperationTestService.ActionWithoutParameter");
        }
        /// <summary>
        /// There are no comments for ActionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameter")]
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithParameterPlus(string p1)
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this.Context, resource.EditLink.OriginalString.Trim('/') + "/OperationTestService.ActionWithParameter", new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
    }
    /// <summary>
    /// There are no comments for DerivedETPlusSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("DerivedETSingle")]
    public partial class DerivedETPlusSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<DerivedETPlus>
    {
        /// <summary>
        /// Initialize a new DerivedETPlusSingle object.
        /// </summary>
        public DerivedETPlusSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) { }

        /// <summary>
        /// Initialize a new DerivedETPlusSingle object.
        /// </summary>
        public DerivedETPlusSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) { }
        /// <summary>
        /// There are no comments for SingleNavPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("SingleNavP")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle SingleNavPPlus
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._SingleNavPPlus == null))
                {
                    this._SingleNavPPlus = new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(this.Context, GetPath("SingleNavP"));
                }
                return this._SingleNavPPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle _SingleNavPPlus;
        /// <summary>
        /// There are no comments for NavPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("NavP")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> NavPPlus
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._NavPPlus == null))
                {
                    this._NavPPlus = Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(GetPath("NavP"));
                }
                return this._NavPPlus;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> _NavPPlus;
    }
    /// <summary>
    /// There are no comments for DerivedETPlus in the schema.
    /// </summary>
    /// <KeyProperties>
    /// UserNamePlus
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("UserName")]
    [global::Microsoft.OData.Client.EntitySet("DerivedETSets")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("DerivedET")]
    public partial class DerivedETPlus : ETPlus
    {
        /// <summary>
        /// Create a new DerivedETPlus object.
        /// </summary>
        /// <param name="userName">Initial value of UserNamePlus.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static DerivedETPlus CreateDerivedETPlus(string userName)
        {
            DerivedETPlus derivedETPlus = new DerivedETPlus();
            derivedETPlus.UserNamePlus = userName;
            return derivedETPlus;
        }
        /// <summary>
        /// There are no comments for Property DerivedComplexPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("DerivedComplexP")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus DerivedComplexPPlus
        {
            get
            {
                return this._DerivedComplexPPlus;
            }
            set
            {
                this.OnDerivedComplexPPlusChanging(value);
                this._DerivedComplexPPlus = value;
                this.OnDerivedComplexPPlusChanged();
                this.OnPropertyChanged("DerivedComplexP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus _DerivedComplexPPlus;
        partial void OnDerivedComplexPPlusChanging(global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedCTPlus value);
        partial void OnDerivedComplexPPlusChanged();
        /// <summary>
        /// There are no comments for Property SingleNavPPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("SingleNavP")]
        public global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus SingleNavPPlus
        {
            get
            {
                return this._SingleNavPPlus;
            }
            set
            {
                this.OnSingleNavPPlusChanging(value);
                this._SingleNavPPlus = value;
                this.OnSingleNavPPlusChanged();
                this.OnPropertyChanged("SingleNavP");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus _SingleNavPPlus;
        partial void OnSingleNavPPlusChanging(global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus value);
        partial void OnSingleNavPPlusChanged();
        /// <summary>
        /// There are no comments for FunctionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithoutParameter")]
        public new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> FunctionWithoutParameterPlus()
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context);
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/OperationTestService.FunctionWithoutParameter" + parameterString, true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(string p1)
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/OperationTestService.FunctionWithParameter" + parameterString, true);
        }
    }
    /// <summary>
    /// There are no comments for CTPlus in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("CT")]
    public partial class CTPlus : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new CTPlus object.
        /// </summary>
        /// <param name="name">Initial value of NamePlus.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static CTPlus CreateCTPlus(string name)
        {
            CTPlus cTPlus = new CTPlus();
            cTPlus.NamePlus = name;
            return cTPlus;
        }
        /// <summary>
        /// There are no comments for Property NamePlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Name")]
        public string NamePlus
        {
            get
            {
                return this._NamePlus;
            }
            set
            {
                this.OnNamePlusChanging(value);
                this._NamePlus = value;
                this.OnNamePlusChanged();
                this.OnPropertyChanged("Name");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private string _NamePlus;
        partial void OnNamePlusChanging(string value);
        partial void OnNamePlusChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for DerivedCTPlus in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("DerivedCT")]
    public partial class DerivedCTPlus : CTPlus
    {
        /// <summary>
        /// Create a new DerivedCTPlus object.
        /// </summary>
        /// <param name="name">Initial value of NamePlus.</param>
        /// <param name="description">Initial value of DescriptionPlus.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        public static DerivedCTPlus CreateDerivedCTPlus(string name, string description)
        {
            DerivedCTPlus derivedCTPlus = new DerivedCTPlus();
            derivedCTPlus.NamePlus = name;
            derivedCTPlus.DescriptionPlus = description;
            return derivedCTPlus;
        }
        /// <summary>
        /// There are no comments for Property DescriptionPlus in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Description")]
        public string DescriptionPlus
        {
            get
            {
                return this._DescriptionPlus;
            }
            set
            {
                this.OnDescriptionPlusChanging(value);
                this._DescriptionPlus = value;
                this.OnDescriptionPlusChanged();
                this.OnPropertyChanged("Description");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.2.0")]
        private string _DescriptionPlus;
        partial void OnDescriptionPlusChanging(string value);
        partial void OnDescriptionPlusChanged();
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus as global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus as global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="userName">The value of userName</param>
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source,
            string userName)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "UserName", userName }
            };
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus as global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus as global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="userName">The value of userName</param>
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source,
            string userName)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "UserName", userName }
            };
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus to its derived type global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle CastToDerivedETPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> query = source.CastTo<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus>();
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlusSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// There are no comments for FunctionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithoutParameter")]
        public static global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> FunctionWithoutParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.GetPath("OperationTestService.FunctionWithoutParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithoutParameter")]
        public static global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> FunctionWithoutParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.GetPath("OperationTestService.FunctionWithoutParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetPath("OperationTestService.FunctionWithParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetPath("OperationTestService.FunctionWithParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1, string p2)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1),
                    new global::Microsoft.OData.Client.UriOperationParameter("p2", p2));
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetPath("OperationTestService.FunctionWithParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionWithParameter")]
        public static global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle FunctionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1, string p2)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1),
                    new global::Microsoft.OData.Client.UriOperationParameter("p2", p2));
            return new global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlusSingle(source.Context, source.GetPath("OperationTestService.FunctionWithParameter" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionBoundToCollectionOfEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionBoundToCollectionOfEntity")]
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> FunctionBoundToCollectionOfEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return source.Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(source.GetPath("OperationTestService.FunctionBoundToCollectionOfEntity" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionBoundToCollectionOfEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionBoundToCollectionOfEntity")]
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> FunctionBoundToCollectionOfEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return source.Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(source.GetPath("OperationTestService.FunctionBoundToCollectionOfEntity" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionBoundToCollectionOfBaseEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionBoundToCollectionOfBaseEntity")]
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> FunctionBoundToCollectionOfBaseEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return source.Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(source.GetPath("OperationTestService.FunctionBoundToCollectionOfBaseEntity" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for FunctionBoundToCollectionOfBaseEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("FunctionBoundToCollectionOfBaseEntity")]
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> FunctionBoundToCollectionOfBaseEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context, new global::Microsoft.OData.Client.UriOperationParameter("p1", p1));
            return source.Context.CreateQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus>(source.GetPath("OperationTestService.FunctionBoundToCollectionOfBaseEntity" + parameterString), true);
        }
        /// <summary>
        /// There are no comments for ActionWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutReturnType")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery ActionWithoutReturnTypePlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("OperationTestService.ActionWithoutReturnType"));
        }
        /// <summary>
        /// There are no comments for ActionWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutReturnType")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery ActionWithoutReturnTypePlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("OperationTestService.ActionWithoutReturnType"));
        }
        /// <summary>
        /// There are no comments for ActionWithParameterWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameterWithoutReturnType")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery ActionWithParameterWithoutReturnTypePlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("OperationTestService.ActionWithParameterWithoutReturnType"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionWithParameterWithoutReturnTypePlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameterWithoutReturnType")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery ActionWithParameterWithoutReturnTypePlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery(source.Context, source.AppendRequestUri("OperationTestService.ActionWithParameterWithoutReturnType"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutParameter")]
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithoutParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionWithoutParameter"));
        }
        /// <summary>
        /// There are no comments for ActionWithoutParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithoutParameter")]
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithoutParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionWithoutParameter"));
        }
        /// <summary>
        /// There are no comments for ActionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameter")]
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionWithParameter"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionWithParameterPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionWithParameter")]
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionWithParameterPlus(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionWithParameter"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionBoundToCollectionOfEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionBoundToCollectionOfEntity")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionBoundToCollectionOfEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.ETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionBoundToCollectionOfEntity"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
        /// <summary>
        /// There are no comments for ActionBoundToCollectionOfEntityPlus in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("ActionBoundToCollectionOfEntity")]
        public static global::Microsoft.OData.Client.DataServiceActionQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus> ActionBoundToCollectionOfEntityPlus(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.DerivedETPlus> source, string p1)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuery<global::Microsoft.OData.Client.TDDUnitTests.Tests.Annotation.AnnotationTargetingOperationTestsProxy.CTPlus>(source.Context, source.AppendRequestUri("OperationTestService.ActionBoundToCollectionOfEntity"), new global::Microsoft.OData.Client.BodyOperationParameter("p1", p1));
        }
    }
}
