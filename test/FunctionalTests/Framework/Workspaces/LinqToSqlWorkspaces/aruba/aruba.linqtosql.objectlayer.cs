//---------------------------------------------------------------------
// <copyright file="aruba.linqtosql.objectlayer.cs" company="Microsoft">
//      Copyright (C) Microsoft Corporation. All rights reserved. See License.txt in the project root for license information.
// </copyright>
//---------------------------------------------------------------------

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/*command line to generate file
 * sqlmetal /server:{serverName} /database:{dbname} /user:{username} /password:{password} 
 * /code:Aruba.LinqToSql.ObjectLayer.cs /namespace:Aruba 
 * /entitybase:System.Data.Test.AstoriaTestLinqToSqlEntityBase /context:ArubaDataContext
 */
namespace Aruba
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Xml.Linq;
    using System.Configuration;
	
	public partial class ArubaDataContext : System.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAllTypes(AllTypes instance);
    partial void UpdateAllTypes(AllTypes instance);
    partial void DeleteAllTypes(AllTypes instance);
    partial void InsertAllTypesComplex(AllTypesComplex instance);
    partial void UpdateAllTypesComplex(AllTypesComplex instance);
    partial void DeleteAllTypesComplex(AllTypesComplex instance);
    partial void InsertBugsDefectTracking(BugsDefectTracking instance);
    partial void UpdateBugsDefectTracking(BugsDefectTracking instance);
    partial void DeleteBugsDefectTracking(BugsDefectTracking instance);
    partial void InsertBugsProjectTracking(BugsProjectTracking instance);
    partial void UpdateBugsProjectTracking(BugsProjectTracking instance);
    partial void DeleteBugsProjectTracking(BugsProjectTracking instance);
    partial void InsertConfigFailures(ConfigFailures instance);
    partial void UpdateConfigFailures(ConfigFailures instance);
    partial void DeleteConfigFailures(ConfigFailures instance);
    partial void InsertConfigs(Configs instance);
    partial void UpdateConfigs(Configs instance);
    partial void DeleteConfigs(Configs instance);
    partial void InsertDeploymentScenarios(DeploymentScenarios instance);
    partial void UpdateDeploymentScenarios(DeploymentScenarios instance);
    partial void DeleteDeploymentScenarios(DeploymentScenarios instance);
    partial void InsertFailureDetails(FailureDetails instance);
    partial void UpdateFailureDetails(FailureDetails instance);
    partial void DeleteFailureDetails(FailureDetails instance);
    partial void InsertFailures(Failures instance);
    partial void UpdateFailures(Failures instance);
    partial void DeleteFailures(Failures instance);
    partial void InsertFailureTypes(FailureTypes instance);
    partial void UpdateFailureTypes(FailureTypes instance);
    partial void DeleteFailureTypes(FailureTypes instance);
    partial void InsertMachineConfigs(MachineConfigs instance);
    partial void UpdateMachineConfigs(MachineConfigs instance);
    partial void DeleteMachineConfigs(MachineConfigs instance);
    partial void InsertDataKey_BigInt(DataKey_BigInt instance);
    partial void UpdateDataKey_BigInt(DataKey_BigInt instance);
    partial void DeleteDataKey_BigInt(DataKey_BigInt instance);
    partial void InsertDataKey_Bit(DataKey_Bit instance);
    partial void UpdateDataKey_Bit(DataKey_Bit instance);
    partial void DeleteDataKey_Bit(DataKey_Bit instance);
    partial void InsertDataKey_DateTime(DataKey_DateTime instance);
    partial void UpdateDataKey_DateTime(DataKey_DateTime instance);
    partial void DeleteDataKey_DateTime(DataKey_DateTime instance);
    partial void InsertDataKey_Decimal(DataKey_Decimal instance);
    partial void UpdateDataKey_Decimal(DataKey_Decimal instance);
    partial void DeleteDataKey_Decimal(DataKey_Decimal instance);
    partial void InsertDataKey_Float(DataKey_Float instance);
    partial void UpdateDataKey_Float(DataKey_Float instance);
    partial void DeleteDataKey_Float(DataKey_Float instance);
    partial void InsertDataKey_GUID(DataKey_GUID instance);
    partial void UpdateDataKey_GUID(DataKey_GUID instance);
    partial void DeleteDataKey_GUID(DataKey_GUID instance);
    partial void InsertDataKey_Money(DataKey_Money instance);
    partial void UpdateDataKey_Money(DataKey_Money instance);
    partial void DeleteDataKey_Money(DataKey_Money instance);
    partial void InsertDataKey_Numeric(DataKey_Numeric instance);
    partial void UpdateDataKey_Numeric(DataKey_Numeric instance);
    partial void DeleteDataKey_Numeric(DataKey_Numeric instance);
    partial void InsertDataKey_Real(DataKey_Real instance);
    partial void UpdateDataKey_Real(DataKey_Real instance);
    partial void DeleteDataKey_Real(DataKey_Real instance);
    partial void InsertDataKey_SmallDateTime(DataKey_SmallDateTime instance);
    partial void UpdateDataKey_SmallDateTime(DataKey_SmallDateTime instance);
    partial void DeleteDataKey_SmallDateTime(DataKey_SmallDateTime instance);
    partial void InsertDataKey_SmallMoney(DataKey_SmallMoney instance);
    partial void UpdateDataKey_SmallMoney(DataKey_SmallMoney instance);
    partial void DeleteDataKey_SmallMoney(DataKey_SmallMoney instance);
    partial void InsertDataKey_TinyInt(DataKey_TinyInt instance);
    partial void UpdateDataKey_TinyInt(DataKey_TinyInt instance);
    partial void DeleteDataKey_TinyInt(DataKey_TinyInt instance);
    partial void InsertDataKey_VarChar50(DataKey_VarChar50 instance);
    partial void UpdateDataKey_VarChar50(DataKey_VarChar50 instance);
    partial void DeleteDataKey_VarChar50(DataKey_VarChar50 instance);
    partial void InsertNonDefaultFacets(NonDefaultFacets instance);
    partial void UpdateNonDefaultFacets(NonDefaultFacets instance);
    partial void DeleteNonDefaultFacets(NonDefaultFacets instance);
    partial void InsertNonDefaultMappings(NonDefaultMappings instance);
    partial void UpdateNonDefaultMappings(NonDefaultMappings instance);
    partial void DeleteNonDefaultMappings(NonDefaultMappings instance);
    partial void InsertOwnerContactInfos(OwnerContactInfos instance);
    partial void UpdateOwnerContactInfos(OwnerContactInfos instance);
    partial void DeleteOwnerContactInfos(OwnerContactInfos instance);
    partial void InsertOwnerDetails(OwnerDetails instance);
    partial void UpdateOwnerDetails(OwnerDetails instance);
    partial void DeleteOwnerDetails(OwnerDetails instance);
    partial void InsertOwnerOwnerDetails(OwnerOwnerDetails instance);
    partial void UpdateOwnerOwnerDetails(OwnerOwnerDetails instance);
    partial void DeleteOwnerOwnerDetails(OwnerOwnerDetails instance);
    partial void InsertOwners(Owners instance);
    partial void UpdateOwners(Owners instance);
    partial void DeleteOwners(Owners instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertRunOwners(RunOwners instance);
    partial void UpdateRunOwners(RunOwners instance);
    partial void DeleteRunOwners(RunOwners instance);
    partial void InsertRuns(Runs instance);
    partial void UpdateRuns(Runs instance);
    partial void DeleteRuns(Runs instance);
    partial void InsertTaskInvestigates(TaskInvestigates instance);
    partial void UpdateTaskInvestigates(TaskInvestigates instance);
    partial void DeleteTaskInvestigates(TaskInvestigates instance);
    partial void InsertTaskResults(TaskResults instance);
    partial void UpdateTaskResults(TaskResults instance);
    partial void DeleteTaskResults(TaskResults instance);
    partial void InsertTasks(Tasks instance);
    partial void UpdateTasks(Tasks instance);
    partial void DeleteTasks(Tasks instance);
    partial void InsertTesters(Testers instance);
    partial void UpdateTesters(Testers instance);
    partial void DeleteTesters(Testers instance);
    partial void InsertTestScenarios(TestScenarios instance);
    partial void UpdateTestScenarios(TestScenarios instance);
    partial void DeleteTestScenarios(TestScenarios instance);
    partial void InsertThirteenNavigations(ThirteenNavigations instance);
    partial void UpdateThirteenNavigations(ThirteenNavigations instance);
    partial void DeleteThirteenNavigations(ThirteenNavigations instance);
    #endregion

        public ArubaDataContext() :
            base(ConfigurationManager.ConnectionStrings["arubaDataContext"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

		public ArubaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArubaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArubaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArubaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllTypes> AllTypes
		{
			get
			{
				return this.GetTable<AllTypes>();
			}
		}
		
		public System.Data.Linq.Table<AllTypesComplex> AllTypesComplex
		{
			get
			{
				return this.GetTable<AllTypesComplex>();
			}
		}
		
		public System.Data.Linq.Table<BugsDefectTracking> BugsDefectTracking
		{
			get
			{
				return this.GetTable<BugsDefectTracking>();
			}
		}
		
		public System.Data.Linq.Table<BugsProjectTracking> BugsProjectTracking
		{
			get
			{
				return this.GetTable<BugsProjectTracking>();
			}
		}
		
		public System.Data.Linq.Table<ConfigFailures> ConfigFailures
		{
			get
			{
				return this.GetTable<ConfigFailures>();
			}
		}
		
		public System.Data.Linq.Table<Configs> Configs
		{
			get
			{
				return this.GetTable<Configs>();
			}
		}

        public System.Data.Linq.Table<DataKey_BigInt> DataKey_BigInt
        {
            get
            {
                return this.GetTable<DataKey_BigInt>();
            }
        }

        public System.Data.Linq.Table<DataKey_Bit> DataKey_Bit
        {
            get
            {
                return this.GetTable<DataKey_Bit>();
            }
        }

        public System.Data.Linq.Table<DataKey_DateTime> DataKey_DateTime
        {
            get
            {
                return this.GetTable<DataKey_DateTime>();
            }
        }

        public System.Data.Linq.Table<DataKey_Decimal> DataKey_Decimal
        {
            get
            {
                return this.GetTable<DataKey_Decimal>();
            }
        }

        public System.Data.Linq.Table<DataKey_Float> DataKey_Float
        {
            get
            {
                return this.GetTable<DataKey_Float>();
            }
        }

        public System.Data.Linq.Table<DataKey_GUID> DataKey_GUID
        {
            get
            {
                return this.GetTable<DataKey_GUID>();
            }
        }

        public System.Data.Linq.Table<DataKey_Money> DataKey_Money
        {
            get
            {
                return this.GetTable<DataKey_Money>();
            }
        }

        public System.Data.Linq.Table<DataKey_Numeric> DataKey_Numeric
        {
            get
            {
                return this.GetTable<DataKey_Numeric>();
            }
        }

        public System.Data.Linq.Table<DataKey_Real> DataKey_Real
        {
            get
            {
                return this.GetTable<DataKey_Real>();
            }
        }

        public System.Data.Linq.Table<DataKey_SmallDateTime> DataKey_SmallDateTime
        {
            get
            {
                return this.GetTable<DataKey_SmallDateTime>();
            }
        }

        public System.Data.Linq.Table<DataKey_SmallMoney> DataKey_SmallMoney
        {
            get
            {
                return this.GetTable<DataKey_SmallMoney>();
            }
        }

        public System.Data.Linq.Table<DataKey_TinyInt> DataKey_TinyInt
        {
            get
            {
                return this.GetTable<DataKey_TinyInt>();
            }
        }

        public System.Data.Linq.Table<DataKey_VarChar50> DataKey_VarChar50
        {
            get
            {
                return this.GetTable<DataKey_VarChar50>();
            }
        }
        
        public System.Data.Linq.Table<DeploymentScenarios> DeploymentScenarios
		{
			get
			{
				return this.GetTable<DeploymentScenarios>();
			}
		}
		
		public System.Data.Linq.Table<FailureDetails> FailureDetails
		{
			get
			{
				return this.GetTable<FailureDetails>();
			}
		}
		
		public System.Data.Linq.Table<Failures> Failures
		{
			get
			{
				return this.GetTable<Failures>();
			}
		}
		
		public System.Data.Linq.Table<FailureTypes> FailureTypes
		{
			get
			{
				return this.GetTable<FailureTypes>();
			}
		}
		
		public System.Data.Linq.Table<MachineConfigs> MachineConfigs
		{
			get
			{
				return this.GetTable<MachineConfigs>();
			}
		}
		
		public System.Data.Linq.Table<NonDefaultFacets> NonDefaultFacets
		{
			get
			{
				return this.GetTable<NonDefaultFacets>();
			}
		}
		
		public System.Data.Linq.Table<NonDefaultMappings> NonDefaultMappings
		{
			get
			{
				return this.GetTable<NonDefaultMappings>();
			}
		}
		
		public System.Data.Linq.Table<OwnerContactInfos> OwnerContactInfos
		{
			get
			{
				return this.GetTable<OwnerContactInfos>();
			}
		}
		
		public System.Data.Linq.Table<OwnerDetails> OwnerDetails
		{
			get
			{
				return this.GetTable<OwnerDetails>();
			}
		}
		
		public System.Data.Linq.Table<OwnerOwnerDetails> OwnerOwnerDetails
		{
			get
			{
				return this.GetTable<OwnerOwnerDetails>();
			}
		}
		
		public System.Data.Linq.Table<Owners> Owners
		{
			get
			{
				return this.GetTable<Owners>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<RunOwners> RunOwners
		{
			get
			{
				return this.GetTable<RunOwners>();
			}
		}
		
		public System.Data.Linq.Table<Runs> Runs
		{
			get
			{
				return this.GetTable<Runs>();
			}
		}
		
		public System.Data.Linq.Table<TaskInvestigates> TaskInvestigates
		{
			get
			{
				return this.GetTable<TaskInvestigates>();
			}
		}
		
		public System.Data.Linq.Table<TaskResults> TaskResults
		{
			get
			{
				return this.GetTable<TaskResults>();
			}
		}
		
		public System.Data.Linq.Table<Tasks> Tasks
		{
			get
			{
				return this.GetTable<Tasks>();
			}
		}
		
		public System.Data.Linq.Table<Testers> Testers
		{
			get
			{
				return this.GetTable<Testers>();
			}
		}
		
		public System.Data.Linq.Table<TestScenarios> TestScenarios
		{
			get
			{
				return this.GetTable<TestScenarios>();
			}
		}

        public System.Data.Linq.Table<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this.GetTable<ThirteenNavigations>();
            }
        }
    }
	
	[Table(Name="dbo.AllTypes")]
    [Microsoft.OData.Client.KeyAttribute("C1_int")]
	public partial class AllTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C1_int;
		
		private int _C2_int;
		
		private short _C3_smallint;
		
		private byte _C4_tinyint;
		
		private bool _C5_bit;
		
		private System.DateTime _C6_datetime;
		
		private System.DateTime _C7_smalldatetime;
		
		private decimal _C8_decimal28_4;
		
		private decimal _C9_numeric28_4;
		
		private float _C10_real;
		
		private double _C11_float;
		
		private decimal _C12_money;
		
		private decimal _C13_smallmoney;
		
		private string _C14_varchar512;
		
		private string _C15_char512;
		
		private string _C16_text;
		
		private System.Data.Linq.Binary _C17_binary512;
		
		private System.Data.Linq.Binary _C18_varbinary512;
		
		private System.Data.Linq.Binary _C19_image;
		
		private string _C20_nvarchar512;
		
		private string _C21_nchar512;
		
		private string _C22_ntext;
		
		private System.Guid _C23_uniqueidentifier;
		
		private long _C24_bigint;
		
		private System.Nullable<int> _C25_int;
		
		private System.Nullable<short> _C26_smallint;
		
		private System.Nullable<byte> _C27_tinyint;
		
		private System.Nullable<bool> _C28_bit;
		
		private System.Nullable<System.DateTime> _C29_datetime;
		
		private System.Nullable<System.DateTime> _C30_smalldatetime;
		
		private System.Nullable<decimal> _C31_decimal28_4;
		
		private System.Nullable<decimal> _C32_numeric28_4;
		
		private System.Nullable<float> _C33_real;
		
		private System.Nullable<double> _C34_float;
		
		private System.Nullable<decimal> _C35_money;
		
		private System.Nullable<decimal> _C36_smallmoney;
		
		private string _C37_varchar512;
		
		private string _C38_char512;
		
		private string _C39_text;
		
		private System.Data.Linq.Binary _C40_binary512;
		
		private System.Data.Linq.Binary _C41_varbinary512;
		
		private System.Data.Linq.Binary _C42_image;
		
		private string _C43_nvarchar512;
		
		private string _C44_nchar512;
		
		private string _C45_ntext;
		
		private System.Nullable<System.Guid> _C46_uniqueidentifier;
		
		private System.Nullable<long> _C47_bigint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC1_intChanging(int value);
    partial void OnC1_intChanged();
    partial void OnC2_intChanging(int value);
    partial void OnC2_intChanged();
    partial void OnC3_smallintChanging(short value);
    partial void OnC3_smallintChanged();
    partial void OnC4_tinyintChanging(byte value);
    partial void OnC4_tinyintChanged();
    partial void OnC5_bitChanging(bool value);
    partial void OnC5_bitChanged();
    partial void OnC6_datetimeChanging(System.DateTime value);
    partial void OnC6_datetimeChanged();
    partial void OnC7_smalldatetimeChanging(System.DateTime value);
    partial void OnC7_smalldatetimeChanged();
    partial void OnC8_decimal28_4Changing(decimal value);
    partial void OnC8_decimal28_4Changed();
    partial void OnC9_numeric28_4Changing(decimal value);
    partial void OnC9_numeric28_4Changed();
    partial void OnC10_realChanging(float value);
    partial void OnC10_realChanged();
    partial void OnC11_floatChanging(double value);
    partial void OnC11_floatChanged();
    partial void OnC12_moneyChanging(decimal value);
    partial void OnC12_moneyChanged();
    partial void OnC13_smallmoneyChanging(decimal value);
    partial void OnC13_smallmoneyChanged();
    partial void OnC14_varchar512Changing(string value);
    partial void OnC14_varchar512Changed();
    partial void OnC15_char512Changing(string value);
    partial void OnC15_char512Changed();
    partial void OnC16_textChanging(string value);
    partial void OnC16_textChanged();
    partial void OnC17_binary512Changing(System.Data.Linq.Binary value);
    partial void OnC17_binary512Changed();
    partial void OnC18_varbinary512Changing(System.Data.Linq.Binary value);
    partial void OnC18_varbinary512Changed();
    partial void OnC19_imageChanging(System.Data.Linq.Binary value);
    partial void OnC19_imageChanged();
    partial void OnC20_nvarchar512Changing(string value);
    partial void OnC20_nvarchar512Changed();
    partial void OnC21_nchar512Changing(string value);
    partial void OnC21_nchar512Changed();
    partial void OnC22_ntextChanging(string value);
    partial void OnC22_ntextChanged();
    partial void OnC23_uniqueidentifierChanging(System.Guid value);
    partial void OnC23_uniqueidentifierChanged();
    partial void OnC24_bigintChanging(long value);
    partial void OnC24_bigintChanged();
    partial void OnC25_intChanging(System.Nullable<int> value);
    partial void OnC25_intChanged();
    partial void OnC26_smallintChanging(System.Nullable<short> value);
    partial void OnC26_smallintChanged();
    partial void OnC27_tinyintChanging(System.Nullable<byte> value);
    partial void OnC27_tinyintChanged();
    partial void OnC28_bitChanging(System.Nullable<bool> value);
    partial void OnC28_bitChanged();
    partial void OnC29_datetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnC29_datetimeChanged();
    partial void OnC30_smalldatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnC30_smalldatetimeChanged();
    partial void OnC31_decimal28_4Changing(System.Nullable<decimal> value);
    partial void OnC31_decimal28_4Changed();
    partial void OnC32_numeric28_4Changing(System.Nullable<decimal> value);
    partial void OnC32_numeric28_4Changed();
    partial void OnC33_realChanging(System.Nullable<float> value);
    partial void OnC33_realChanged();
    partial void OnC34_floatChanging(System.Nullable<double> value);
    partial void OnC34_floatChanged();
    partial void OnC35_moneyChanging(System.Nullable<decimal> value);
    partial void OnC35_moneyChanged();
    partial void OnC36_smallmoneyChanging(System.Nullable<decimal> value);
    partial void OnC36_smallmoneyChanged();
    partial void OnC37_varchar512Changing(string value);
    partial void OnC37_varchar512Changed();
    partial void OnC38_char512Changing(string value);
    partial void OnC38_char512Changed();
    partial void OnC39_textChanging(string value);
    partial void OnC39_textChanged();
    partial void OnC40_binary512Changing(System.Data.Linq.Binary value);
    partial void OnC40_binary512Changed();
    partial void OnC41_varbinary512Changing(System.Data.Linq.Binary value);
    partial void OnC41_varbinary512Changed();
    partial void OnC42_imageChanging(System.Data.Linq.Binary value);
    partial void OnC42_imageChanged();
    partial void OnC43_nvarchar512Changing(string value);
    partial void OnC43_nvarchar512Changed();
    partial void OnC44_nchar512Changing(string value);
    partial void OnC44_nchar512Changed();
    partial void OnC45_ntextChanging(string value);
    partial void OnC45_ntextChanged();
    partial void OnC46_uniqueidentifierChanging(System.Nullable<System.Guid> value);
    partial void OnC46_uniqueidentifierChanged();
    partial void OnC47_bigintChanging(System.Nullable<long> value);
    partial void OnC47_bigintChanged();
    #endregion
		
		public AllTypes()
		{
			OnCreated();
		}

        [Column(Name = "c1_int", Storage = "_C1_int", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int C1_int
		{
			get
			{
				return this._C1_int;
			}
			set
			{
				if ((this._C1_int != value))
				{
					this.OnC1_intChanging(value);
					this.SendPropertyChanging();
					this._C1_int = value;
					this.SendPropertyChanged("C1_int");
					this.OnC1_intChanged();
				}
			}
		}
		
		[Column(Name="c2_int", Storage="_C2_int", DbType="Int NOT NULL")]
		public int C2_int
		{
			get
			{
				return this._C2_int;
			}
			set
			{
				if ((this._C2_int != value))
				{
					this.OnC2_intChanging(value);
					this.SendPropertyChanging();
					this._C2_int = value;
					this.SendPropertyChanged("C2_int");
					this.OnC2_intChanged();
				}
			}
		}
		
		[Column(Name="c3_smallint", Storage="_C3_smallint", DbType="SmallInt NOT NULL")]
		public short C3_smallint
		{
			get
			{
				return this._C3_smallint;
			}
			set
			{
				if ((this._C3_smallint != value))
				{
					this.OnC3_smallintChanging(value);
					this.SendPropertyChanging();
					this._C3_smallint = value;
					this.SendPropertyChanged("C3_smallint");
					this.OnC3_smallintChanged();
				}
			}
		}
		
		[Column(Name="c4_tinyint", Storage="_C4_tinyint", DbType="TinyInt NOT NULL")]
		public byte C4_tinyint
		{
			get
			{
				return this._C4_tinyint;
			}
			set
			{
				if ((this._C4_tinyint != value))
				{
					this.OnC4_tinyintChanging(value);
					this.SendPropertyChanging();
					this._C4_tinyint = value;
					this.SendPropertyChanged("C4_tinyint");
					this.OnC4_tinyintChanged();
				}
			}
		}
		
		[Column(Name="c5_bit", Storage="_C5_bit", DbType="Bit NOT NULL")]
		public bool C5_bit
		{
			get
			{
				return this._C5_bit;
			}
			set
			{
				if ((this._C5_bit != value))
				{
					this.OnC5_bitChanging(value);
					this.SendPropertyChanging();
					this._C5_bit = value;
					this.SendPropertyChanged("C5_bit");
					this.OnC5_bitChanged();
				}
			}
		}
		
		[Column(Name="c6_datetime", Storage="_C6_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime C6_datetime
		{
			get
			{
				return this._C6_datetime;
			}
			set
			{
				if ((this._C6_datetime != value))
				{
					this.OnC6_datetimeChanging(value);
					this.SendPropertyChanging();
					this._C6_datetime = value;
					this.SendPropertyChanged("C6_datetime");
					this.OnC6_datetimeChanged();
				}
			}
		}
		
		[Column(Name="c7_smalldatetime", Storage="_C7_smalldatetime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime C7_smalldatetime
		{
			get
			{
				return this._C7_smalldatetime;
			}
			set
			{
				if ((this._C7_smalldatetime != value))
				{
					this.OnC7_smalldatetimeChanging(value);
					this.SendPropertyChanging();
					this._C7_smalldatetime = value;
					this.SendPropertyChanged("C7_smalldatetime");
					this.OnC7_smalldatetimeChanged();
				}
			}
		}
		
		[Column(Name="c8_decimal(28,4)", Storage="_C8_decimal28_4", DbType="Decimal(28,4) NOT NULL")]
		public decimal C8_decimal28_4
		{
			get
			{
				return this._C8_decimal28_4;
			}
			set
			{
				if ((this._C8_decimal28_4 != value))
				{
					this.OnC8_decimal28_4Changing(value);
					this.SendPropertyChanging();
					this._C8_decimal28_4 = value;
					this.SendPropertyChanged("C8_decimal28_4");
					this.OnC8_decimal28_4Changed();
				}
			}
		}
		
		[Column(Name="c9_numeric(28,4)", Storage="_C9_numeric28_4", DbType="Decimal(28,4) NOT NULL")]
		public decimal C9_numeric28_4
		{
			get
			{
				return this._C9_numeric28_4;
			}
			set
			{
				if ((this._C9_numeric28_4 != value))
				{
					this.OnC9_numeric28_4Changing(value);
					this.SendPropertyChanging();
					this._C9_numeric28_4 = value;
					this.SendPropertyChanged("C9_numeric28_4");
					this.OnC9_numeric28_4Changed();
				}
			}
		}
		
		[Column(Name="c10_real", Storage="_C10_real", DbType="Real NOT NULL")]
		public float C10_real
		{
			get
			{
				return this._C10_real;
			}
			set
			{
				if ((this._C10_real != value))
				{
					this.OnC10_realChanging(value);
					this.SendPropertyChanging();
					this._C10_real = value;
					this.SendPropertyChanged("C10_real");
					this.OnC10_realChanged();
				}
			}
		}
		
		[Column(Name="c11_float", Storage="_C11_float", DbType="Float NOT NULL")]
		public double C11_float
		{
			get
			{
				return this._C11_float;
			}
			set
			{
				if ((this._C11_float != value))
				{
					this.OnC11_floatChanging(value);
					this.SendPropertyChanging();
					this._C11_float = value;
					this.SendPropertyChanged("C11_float");
					this.OnC11_floatChanged();
				}
			}
		}
		
		[Column(Name="c12_money", Storage="_C12_money", DbType="Money NOT NULL")]
		public decimal C12_money
		{
			get
			{
				return this._C12_money;
			}
			set
			{
				if ((this._C12_money != value))
				{
					this.OnC12_moneyChanging(value);
					this.SendPropertyChanging();
					this._C12_money = value;
					this.SendPropertyChanged("C12_money");
					this.OnC12_moneyChanged();
				}
			}
		}
		
		[Column(Name="c13_smallmoney", Storage="_C13_smallmoney", DbType="SmallMoney NOT NULL")]
		public decimal C13_smallmoney
		{
			get
			{
				return this._C13_smallmoney;
			}
			set
			{
				if ((this._C13_smallmoney != value))
				{
					this.OnC13_smallmoneyChanging(value);
					this.SendPropertyChanging();
					this._C13_smallmoney = value;
					this.SendPropertyChanged("C13_smallmoney");
					this.OnC13_smallmoneyChanged();
				}
			}
		}
		
		[Column(Name="c14_varchar(512)", Storage="_C14_varchar512", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string C14_varchar512
		{
			get
			{
				return this._C14_varchar512;
			}
			set
			{
				if ((this._C14_varchar512 != value))
				{
					this.OnC14_varchar512Changing(value);
					this.SendPropertyChanging();
					this._C14_varchar512 = value;
					this.SendPropertyChanged("C14_varchar512");
					this.OnC14_varchar512Changed();
				}
			}
		}
		
		[Column(Name="c15_char(512)", Storage="_C15_char512", DbType="Char(512) NOT NULL", CanBeNull=false)]
		public string C15_char512
		{
			get
			{
				return this._C15_char512;
			}
			set
			{
				if ((this._C15_char512 != value))
				{
					this.OnC15_char512Changing(value);
					this.SendPropertyChanging();
					this._C15_char512 = value;
					this.SendPropertyChanged("C15_char512");
					this.OnC15_char512Changed();
				}
			}
		}
		
		[Column(Name="c16_text", Storage="_C16_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string C16_text
		{
			get
			{
				return this._C16_text;
			}
			set
			{
				if ((this._C16_text != value))
				{
					this.OnC16_textChanging(value);
					this.SendPropertyChanging();
					this._C16_text = value;
					this.SendPropertyChanged("C16_text");
					this.OnC16_textChanged();
				}
			}
		}
		
		[Column(Name="c17_binary(512)", Storage="_C17_binary512", DbType="Binary(512) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary C17_binary512
		{
			get
			{
				return this._C17_binary512;
			}
			set
			{
				if ((this._C17_binary512 != value))
				{
					this.OnC17_binary512Changing(value);
					this.SendPropertyChanging();
					this._C17_binary512 = value;
					this.SendPropertyChanged("C17_binary512");
					this.OnC17_binary512Changed();
				}
			}
		}
		
		[Column(Name="c18_varbinary(512)", Storage="_C18_varbinary512", DbType="VarBinary(512) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary C18_varbinary512
		{
			get
			{
				return this._C18_varbinary512;
			}
			set
			{
				if ((this._C18_varbinary512 != value))
				{
					this.OnC18_varbinary512Changing(value);
					this.SendPropertyChanging();
					this._C18_varbinary512 = value;
					this.SendPropertyChanged("C18_varbinary512");
					this.OnC18_varbinary512Changed();
				}
			}
		}
		
		[Column(Name="c19_image", Storage="_C19_image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary C19_image
		{
			get
			{
				return this._C19_image;
			}
			set
			{
				if ((this._C19_image != value))
				{
					this.OnC19_imageChanging(value);
					this.SendPropertyChanging();
					this._C19_image = value;
					this.SendPropertyChanged("C19_image");
					this.OnC19_imageChanged();
				}
			}
		}
		
		[Column(Name="c20_nvarchar(512)", Storage="_C20_nvarchar512", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string C20_nvarchar512
		{
			get
			{
				return this._C20_nvarchar512;
			}
			set
			{
				if ((this._C20_nvarchar512 != value))
				{
					this.OnC20_nvarchar512Changing(value);
					this.SendPropertyChanging();
					this._C20_nvarchar512 = value;
					this.SendPropertyChanged("C20_nvarchar512");
					this.OnC20_nvarchar512Changed();
				}
			}
		}
		
		[Column(Name="c21_nchar(512)", Storage="_C21_nchar512", DbType="NChar(512) NOT NULL", CanBeNull=false)]
		public string C21_nchar512
		{
			get
			{
				return this._C21_nchar512;
			}
			set
			{
				if ((this._C21_nchar512 != value))
				{
					this.OnC21_nchar512Changing(value);
					this.SendPropertyChanging();
					this._C21_nchar512 = value;
					this.SendPropertyChanged("C21_nchar512");
					this.OnC21_nchar512Changed();
				}
			}
		}
		
		[Column(Name="c22_ntext", Storage="_C22_ntext", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string C22_ntext
		{
			get
			{
				return this._C22_ntext;
			}
			set
			{
				if ((this._C22_ntext != value))
				{
					this.OnC22_ntextChanging(value);
					this.SendPropertyChanging();
					this._C22_ntext = value;
					this.SendPropertyChanged("C22_ntext");
					this.OnC22_ntextChanged();
				}
			}
		}
		
		[Column(Name="c23_uniqueidentifier", Storage="_C23_uniqueidentifier", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid C23_uniqueidentifier
		{
			get
			{
				return this._C23_uniqueidentifier;
			}
			set
			{
				if ((this._C23_uniqueidentifier != value))
				{
					this.OnC23_uniqueidentifierChanging(value);
					this.SendPropertyChanging();
					this._C23_uniqueidentifier = value;
					this.SendPropertyChanged("C23_uniqueidentifier");
					this.OnC23_uniqueidentifierChanged();
				}
			}
		}
		
		[Column(Name="c24_bigint", Storage="_C24_bigint", DbType="BigInt NOT NULL")]
		public long C24_bigint
		{
			get
			{
				return this._C24_bigint;
			}
			set
			{
				if ((this._C24_bigint != value))
				{
					this.OnC24_bigintChanging(value);
					this.SendPropertyChanging();
					this._C24_bigint = value;
					this.SendPropertyChanged("C24_bigint");
					this.OnC24_bigintChanged();
				}
			}
		}
		
		[Column(Name="c25_int", Storage="_C25_int", DbType="Int")]
		public System.Nullable<int> C25_int
		{
			get
			{
				return this._C25_int;
			}
			set
			{
				if ((this._C25_int != value))
				{
					this.OnC25_intChanging(value);
					this.SendPropertyChanging();
					this._C25_int = value;
					this.SendPropertyChanged("C25_int");
					this.OnC25_intChanged();
				}
			}
		}
		
		[Column(Name="c26_smallint", Storage="_C26_smallint", DbType="SmallInt")]
		public System.Nullable<short> C26_smallint
		{
			get
			{
				return this._C26_smallint;
			}
			set
			{
				if ((this._C26_smallint != value))
				{
					this.OnC26_smallintChanging(value);
					this.SendPropertyChanging();
					this._C26_smallint = value;
					this.SendPropertyChanged("C26_smallint");
					this.OnC26_smallintChanged();
				}
			}
		}
		
		[Column(Name="c27_tinyint", Storage="_C27_tinyint", DbType="TinyInt")]
		public System.Nullable<byte> C27_tinyint
		{
			get
			{
				return this._C27_tinyint;
			}
			set
			{
				if ((this._C27_tinyint != value))
				{
					this.OnC27_tinyintChanging(value);
					this.SendPropertyChanging();
					this._C27_tinyint = value;
					this.SendPropertyChanged("C27_tinyint");
					this.OnC27_tinyintChanged();
				}
			}
		}
		
		[Column(Name="c28_bit", Storage="_C28_bit", DbType="Bit")]
		public System.Nullable<bool> C28_bit
		{
			get
			{
				return this._C28_bit;
			}
			set
			{
				if ((this._C28_bit != value))
				{
					this.OnC28_bitChanging(value);
					this.SendPropertyChanging();
					this._C28_bit = value;
					this.SendPropertyChanged("C28_bit");
					this.OnC28_bitChanged();
				}
			}
		}
		
		[Column(Name="c29_datetime", Storage="_C29_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> C29_datetime
		{
			get
			{
				return this._C29_datetime;
			}
			set
			{
				if ((this._C29_datetime != value))
				{
					this.OnC29_datetimeChanging(value);
					this.SendPropertyChanging();
					this._C29_datetime = value;
					this.SendPropertyChanged("C29_datetime");
					this.OnC29_datetimeChanged();
				}
			}
		}
		
		[Column(Name="c30_smalldatetime", Storage="_C30_smalldatetime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> C30_smalldatetime
		{
			get
			{
				return this._C30_smalldatetime;
			}
			set
			{
				if ((this._C30_smalldatetime != value))
				{
					this.OnC30_smalldatetimeChanging(value);
					this.SendPropertyChanging();
					this._C30_smalldatetime = value;
					this.SendPropertyChanged("C30_smalldatetime");
					this.OnC30_smalldatetimeChanged();
				}
			}
		}
		
		[Column(Name="c31_decimal(28,4)", Storage="_C31_decimal28_4", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C31_decimal28_4
		{
			get
			{
				return this._C31_decimal28_4;
			}
			set
			{
				if ((this._C31_decimal28_4 != value))
				{
					this.OnC31_decimal28_4Changing(value);
					this.SendPropertyChanging();
					this._C31_decimal28_4 = value;
					this.SendPropertyChanged("C31_decimal28_4");
					this.OnC31_decimal28_4Changed();
				}
			}
		}
		
		[Column(Name="c32_numeric(28,4)", Storage="_C32_numeric28_4", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C32_numeric28_4
		{
			get
			{
				return this._C32_numeric28_4;
			}
			set
			{
				if ((this._C32_numeric28_4 != value))
				{
					this.OnC32_numeric28_4Changing(value);
					this.SendPropertyChanging();
					this._C32_numeric28_4 = value;
					this.SendPropertyChanged("C32_numeric28_4");
					this.OnC32_numeric28_4Changed();
				}
			}
		}
		
		[Column(Name="c33_real", Storage="_C33_real", DbType="Real")]
		public System.Nullable<float> C33_real
		{
			get
			{
				return this._C33_real;
			}
			set
			{
				if ((this._C33_real != value))
				{
					this.OnC33_realChanging(value);
					this.SendPropertyChanging();
					this._C33_real = value;
					this.SendPropertyChanged("C33_real");
					this.OnC33_realChanged();
				}
			}
		}
		
		[Column(Name="c34_float", Storage="_C34_float", DbType="Float")]
		public System.Nullable<double> C34_float
		{
			get
			{
				return this._C34_float;
			}
			set
			{
				if ((this._C34_float != value))
				{
					this.OnC34_floatChanging(value);
					this.SendPropertyChanging();
					this._C34_float = value;
					this.SendPropertyChanged("C34_float");
					this.OnC34_floatChanged();
				}
			}
		}
		
		[Column(Name="c35_money", Storage="_C35_money", DbType="Money")]
		public System.Nullable<decimal> C35_money
		{
			get
			{
				return this._C35_money;
			}
			set
			{
				if ((this._C35_money != value))
				{
					this.OnC35_moneyChanging(value);
					this.SendPropertyChanging();
					this._C35_money = value;
					this.SendPropertyChanged("C35_money");
					this.OnC35_moneyChanged();
				}
			}
		}
		
		[Column(Name="c36_smallmoney", Storage="_C36_smallmoney", DbType="SmallMoney")]
		public System.Nullable<decimal> C36_smallmoney
		{
			get
			{
				return this._C36_smallmoney;
			}
			set
			{
				if ((this._C36_smallmoney != value))
				{
					this.OnC36_smallmoneyChanging(value);
					this.SendPropertyChanging();
					this._C36_smallmoney = value;
					this.SendPropertyChanged("C36_smallmoney");
					this.OnC36_smallmoneyChanged();
				}
			}
		}
		
		[Column(Name="c37_varchar(512)", Storage="_C37_varchar512", DbType="VarChar(512)")]
		public string C37_varchar512
		{
			get
			{
				return this._C37_varchar512;
			}
			set
			{
				if ((this._C37_varchar512 != value))
				{
					this.OnC37_varchar512Changing(value);
					this.SendPropertyChanging();
					this._C37_varchar512 = value;
					this.SendPropertyChanged("C37_varchar512");
					this.OnC37_varchar512Changed();
				}
			}
		}
		
		[Column(Name="c38_char(512)", Storage="_C38_char512", DbType="Char(512)")]
		public string C38_char512
		{
			get
			{
				return this._C38_char512;
			}
			set
			{
				if ((this._C38_char512 != value))
				{
					this.OnC38_char512Changing(value);
					this.SendPropertyChanging();
					this._C38_char512 = value;
					this.SendPropertyChanged("C38_char512");
					this.OnC38_char512Changed();
				}
			}
		}
		
		[Column(Name="c39_text", Storage="_C39_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string C39_text
		{
			get
			{
				return this._C39_text;
			}
			set
			{
				if ((this._C39_text != value))
				{
					this.OnC39_textChanging(value);
					this.SendPropertyChanging();
					this._C39_text = value;
					this.SendPropertyChanged("C39_text");
					this.OnC39_textChanged();
				}
			}
		}
		
		[Column(Name="c40_binary(512)", Storage="_C40_binary512", DbType="Binary(512)", CanBeNull=true)]
		public System.Data.Linq.Binary C40_binary512
		{
			get
			{
				return this._C40_binary512;
			}
			set
			{
				if ((this._C40_binary512 != value))
				{
					this.OnC40_binary512Changing(value);
					this.SendPropertyChanging();
					this._C40_binary512 = value;
					this.SendPropertyChanged("C40_binary512");
					this.OnC40_binary512Changed();
				}
			}
		}
		
		[Column(Name="c41_varbinary(512)", Storage="_C41_varbinary512", DbType="VarBinary(512)", CanBeNull=true)]
		public System.Data.Linq.Binary C41_varbinary512
		{
			get
			{
				return this._C41_varbinary512;
			}
			set
			{
				if ((this._C41_varbinary512 != value))
				{
					this.OnC41_varbinary512Changing(value);
					this.SendPropertyChanging();
					this._C41_varbinary512 = value;
					this.SendPropertyChanged("C41_varbinary512");
					this.OnC41_varbinary512Changed();
				}
			}
		}
		
		[Column(Name="c42_image", Storage="_C42_image", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary C42_image
		{
			get
			{
				return this._C42_image;
			}
			set
			{
				if ((this._C42_image != value))
				{
					this.OnC42_imageChanging(value);
					this.SendPropertyChanging();
					this._C42_image = value;
					this.SendPropertyChanged("C42_image");
					this.OnC42_imageChanged();
				}
			}
		}
		
		[Column(Name="c43_nvarchar(512)", Storage="_C43_nvarchar512", DbType="NVarChar(512)")]
		public string C43_nvarchar512
		{
			get
			{
				return this._C43_nvarchar512;
			}
			set
			{
				if ((this._C43_nvarchar512 != value))
				{
					this.OnC43_nvarchar512Changing(value);
					this.SendPropertyChanging();
					this._C43_nvarchar512 = value;
					this.SendPropertyChanged("C43_nvarchar512");
					this.OnC43_nvarchar512Changed();
				}
			}
		}
		
		[Column(Name="c44_nchar(512)", Storage="_C44_nchar512", DbType="NChar(512)")]
		public string C44_nchar512
		{
			get
			{
				return this._C44_nchar512;
			}
			set
			{
				if ((this._C44_nchar512 != value))
				{
					this.OnC44_nchar512Changing(value);
					this.SendPropertyChanging();
					this._C44_nchar512 = value;
					this.SendPropertyChanged("C44_nchar512");
					this.OnC44_nchar512Changed();
				}
			}
		}
		
		[Column(Name="c45_ntext", Storage="_C45_ntext", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string C45_ntext
		{
			get
			{
				return this._C45_ntext;
			}
			set
			{
				if ((this._C45_ntext != value))
				{
					this.OnC45_ntextChanging(value);
					this.SendPropertyChanging();
					this._C45_ntext = value;
					this.SendPropertyChanged("C45_ntext");
					this.OnC45_ntextChanged();
				}
			}
		}
		
		[Column(Name="c46_uniqueidentifier", Storage="_C46_uniqueidentifier", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> C46_uniqueidentifier
		{
			get
			{
				return this._C46_uniqueidentifier;
			}
			set
			{
				if ((this._C46_uniqueidentifier != value))
				{
					this.OnC46_uniqueidentifierChanging(value);
					this.SendPropertyChanging();
					this._C46_uniqueidentifier = value;
					this.SendPropertyChanged("C46_uniqueidentifier");
					this.OnC46_uniqueidentifierChanged();
				}
			}
		}
		
		[Column(Name="c47_bigint", Storage="_C47_bigint", DbType="BigInt")]
		public System.Nullable<long> C47_bigint
		{
			get
			{
				return this._C47_bigint;
			}
			set
			{
				if ((this._C47_bigint != value))
				{
					this.OnC47_bigintChanging(value);
					this.SendPropertyChanging();
					this._C47_bigint = value;
					this.SendPropertyChanged("C47_bigint");
					this.OnC47_bigintChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AllTypesComplex")]
    [Microsoft.OData.Client.KeyAttribute("C1_int")]
	public partial class AllTypesComplex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C1_int;
		
		private int _C2_int;
		
		private short _C3_smallint;
		
		private byte _C4_tinyint;
		
		private bool _C5_bit;
		
		private System.DateTime _C6_datetime;
		
		private System.DateTime _C7_smalldatetime;
		
		private decimal _C8_decimal28_4;
		
		private decimal _C9_numeric28_4;
		
		private float _C10_real;
		
		private double _C11_float;
		
		private decimal _C12_money;
		
		private decimal _C13_smallmoney;
		
		private string _C14_varchar512;
		
		private string _C15_char512;
		
		private string _C16_text;
		
		private System.Data.Linq.Binary _C17_binary512;
		
		private System.Data.Linq.Binary _C18_varbinary512;
		
		private System.Data.Linq.Binary _C19_image;
		
		private string _C20_nvarchar512;
		
		private string _C21_nchar512;
		
		private string _C22_ntext;
		
		private System.Guid _C23_uniqueidentifier;
		
		private long _C24_bigint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC1_intChanging(int value);
    partial void OnC1_intChanged();
    partial void OnC2_intChanging(int value);
    partial void OnC2_intChanged();
    partial void OnC3_smallintChanging(short value);
    partial void OnC3_smallintChanged();
    partial void OnC4_tinyintChanging(byte value);
    partial void OnC4_tinyintChanged();
    partial void OnC5_bitChanging(bool value);
    partial void OnC5_bitChanged();
    partial void OnC6_datetimeChanging(System.DateTime value);
    partial void OnC6_datetimeChanged();
    partial void OnC7_smalldatetimeChanging(System.DateTime value);
    partial void OnC7_smalldatetimeChanged();
    partial void OnC8_decimal28_4Changing(decimal value);
    partial void OnC8_decimal28_4Changed();
    partial void OnC9_numeric28_4Changing(decimal value);
    partial void OnC9_numeric28_4Changed();
    partial void OnC10_realChanging(float value);
    partial void OnC10_realChanged();
    partial void OnC11_floatChanging(double value);
    partial void OnC11_floatChanged();
    partial void OnC12_moneyChanging(decimal value);
    partial void OnC12_moneyChanged();
    partial void OnC13_smallmoneyChanging(decimal value);
    partial void OnC13_smallmoneyChanged();
    partial void OnC14_varchar512Changing(string value);
    partial void OnC14_varchar512Changed();
    partial void OnC15_char512Changing(string value);
    partial void OnC15_char512Changed();
    partial void OnC16_textChanging(string value);
    partial void OnC16_textChanged();
    partial void OnC17_binary512Changing(System.Data.Linq.Binary value);
    partial void OnC17_binary512Changed();
    partial void OnC18_varbinary512Changing(System.Data.Linq.Binary value);
    partial void OnC18_varbinary512Changed();
    partial void OnC19_imageChanging(System.Data.Linq.Binary value);
    partial void OnC19_imageChanged();
    partial void OnC20_nvarchar512Changing(string value);
    partial void OnC20_nvarchar512Changed();
    partial void OnC21_nchar512Changing(string value);
    partial void OnC21_nchar512Changed();
    partial void OnC22_ntextChanging(string value);
    partial void OnC22_ntextChanged();
    partial void OnC23_uniqueidentifierChanging(System.Guid value);
    partial void OnC23_uniqueidentifierChanged();
    partial void OnC24_bigintChanging(long value);
    partial void OnC24_bigintChanged();
    #endregion
		
		public AllTypesComplex()
		{
			OnCreated();
		}

		[Column(Name="c1_int", Storage="_C1_int", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int C1_int
		{
			get
			{
				return this._C1_int;
			}
			set
			{
				if ((this._C1_int != value))
				{
					this.OnC1_intChanging(value);
					this.SendPropertyChanging();
					this._C1_int = value;
					this.SendPropertyChanged("C1_int");
					this.OnC1_intChanged();
				}
			}
		}
		
		[Column(Name="c2_int", Storage="_C2_int", DbType="Int NOT NULL")]
		public int C2_int
		{
			get
			{
				return this._C2_int;
			}
			set
			{
				if ((this._C2_int != value))
				{
					this.OnC2_intChanging(value);
					this.SendPropertyChanging();
					this._C2_int = value;
					this.SendPropertyChanged("C2_int");
					this.OnC2_intChanged();
				}
			}
		}
		
		[Column(Name="c3_smallint", Storage="_C3_smallint", DbType="SmallInt NOT NULL")]
		public short C3_smallint
		{
			get
			{
				return this._C3_smallint;
			}
			set
			{
				if ((this._C3_smallint != value))
				{
					this.OnC3_smallintChanging(value);
					this.SendPropertyChanging();
					this._C3_smallint = value;
					this.SendPropertyChanged("C3_smallint");
					this.OnC3_smallintChanged();
				}
			}
		}
		
		[Column(Name="c4_tinyint", Storage="_C4_tinyint", DbType="TinyInt NOT NULL")]
		public byte C4_tinyint
		{
			get
			{
				return this._C4_tinyint;
			}
			set
			{
				if ((this._C4_tinyint != value))
				{
					this.OnC4_tinyintChanging(value);
					this.SendPropertyChanging();
					this._C4_tinyint = value;
					this.SendPropertyChanged("C4_tinyint");
					this.OnC4_tinyintChanged();
				}
			}
		}
		
		[Column(Name="c5_bit", Storage="_C5_bit", DbType="Bit NOT NULL")]
		public bool C5_bit
		{
			get
			{
				return this._C5_bit;
			}
			set
			{
				if ((this._C5_bit != value))
				{
					this.OnC5_bitChanging(value);
					this.SendPropertyChanging();
					this._C5_bit = value;
					this.SendPropertyChanged("C5_bit");
					this.OnC5_bitChanged();
				}
			}
		}
		
		[Column(Name="c6_datetime", Storage="_C6_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime C6_datetime
		{
			get
			{
				return this._C6_datetime;
			}
			set
			{
				if ((this._C6_datetime != value))
				{
					this.OnC6_datetimeChanging(value);
					this.SendPropertyChanging();
					this._C6_datetime = value;
					this.SendPropertyChanged("C6_datetime");
					this.OnC6_datetimeChanged();
				}
			}
		}
		
		[Column(Name="c7_smalldatetime", Storage="_C7_smalldatetime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime C7_smalldatetime
		{
			get
			{
				return this._C7_smalldatetime;
			}
			set
			{
				if ((this._C7_smalldatetime != value))
				{
					this.OnC7_smalldatetimeChanging(value);
					this.SendPropertyChanging();
					this._C7_smalldatetime = value;
					this.SendPropertyChanged("C7_smalldatetime");
					this.OnC7_smalldatetimeChanged();
				}
			}
		}
		
		[Column(Name="c8_decimal(28,4)", Storage="_C8_decimal28_4", DbType="Decimal(28,4) NOT NULL")]
		public decimal C8_decimal28_4
		{
			get
			{
				return this._C8_decimal28_4;
			}
			set
			{
				if ((this._C8_decimal28_4 != value))
				{
					this.OnC8_decimal28_4Changing(value);
					this.SendPropertyChanging();
					this._C8_decimal28_4 = value;
					this.SendPropertyChanged("C8_decimal28_4");
					this.OnC8_decimal28_4Changed();
				}
			}
		}
		
		[Column(Name="c9_numeric(28,4)", Storage="_C9_numeric28_4", DbType="Decimal(28,4) NOT NULL")]
		public decimal C9_numeric28_4
		{
			get
			{
				return this._C9_numeric28_4;
			}
			set
			{
				if ((this._C9_numeric28_4 != value))
				{
					this.OnC9_numeric28_4Changing(value);
					this.SendPropertyChanging();
					this._C9_numeric28_4 = value;
					this.SendPropertyChanged("C9_numeric28_4");
					this.OnC9_numeric28_4Changed();
				}
			}
		}
		
		[Column(Name="c10_real", Storage="_C10_real", DbType="Real NOT NULL")]
		public float C10_real
		{
			get
			{
				return this._C10_real;
			}
			set
			{
				if ((this._C10_real != value))
				{
					this.OnC10_realChanging(value);
					this.SendPropertyChanging();
					this._C10_real = value;
					this.SendPropertyChanged("C10_real");
					this.OnC10_realChanged();
				}
			}
		}
		
		[Column(Name="c11_float", Storage="_C11_float", DbType="Float NOT NULL")]
		public double C11_float
		{
			get
			{
				return this._C11_float;
			}
			set
			{
				if ((this._C11_float != value))
				{
					this.OnC11_floatChanging(value);
					this.SendPropertyChanging();
					this._C11_float = value;
					this.SendPropertyChanged("C11_float");
					this.OnC11_floatChanged();
				}
			}
		}
		
		[Column(Name="c12_money", Storage="_C12_money", DbType="Money NOT NULL")]
		public decimal C12_money
		{
			get
			{
				return this._C12_money;
			}
			set
			{
				if ((this._C12_money != value))
				{
					this.OnC12_moneyChanging(value);
					this.SendPropertyChanging();
					this._C12_money = value;
					this.SendPropertyChanged("C12_money");
					this.OnC12_moneyChanged();
				}
			}
		}
		
		[Column(Name="c13_smallmoney", Storage="_C13_smallmoney", DbType="SmallMoney NOT NULL")]
		public decimal C13_smallmoney
		{
			get
			{
				return this._C13_smallmoney;
			}
			set
			{
				if ((this._C13_smallmoney != value))
				{
					this.OnC13_smallmoneyChanging(value);
					this.SendPropertyChanging();
					this._C13_smallmoney = value;
					this.SendPropertyChanged("C13_smallmoney");
					this.OnC13_smallmoneyChanged();
				}
			}
		}
		
		[Column(Name="c14_varchar(512)", Storage="_C14_varchar512", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string C14_varchar512
		{
			get
			{
				return this._C14_varchar512;
			}
			set
			{
				if ((this._C14_varchar512 != value))
				{
					this.OnC14_varchar512Changing(value);
					this.SendPropertyChanging();
					this._C14_varchar512 = value;
					this.SendPropertyChanged("C14_varchar512");
					this.OnC14_varchar512Changed();
				}
			}
		}
		
		[Column(Name="c15_char(512)", Storage="_C15_char512", DbType="Char(512) NOT NULL", CanBeNull=false)]
		public string C15_char512
		{
			get
			{
				return this._C15_char512;
			}
			set
			{
				if ((this._C15_char512 != value))
				{
					this.OnC15_char512Changing(value);
					this.SendPropertyChanging();
					this._C15_char512 = value;
					this.SendPropertyChanged("C15_char512");
					this.OnC15_char512Changed();
				}
			}
		}
		
		[Column(Name="c16_text", Storage="_C16_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string C16_text
		{
			get
			{
				return this._C16_text;
			}
			set
			{
				if ((this._C16_text != value))
				{
					this.OnC16_textChanging(value);
					this.SendPropertyChanging();
					this._C16_text = value;
					this.SendPropertyChanged("C16_text");
					this.OnC16_textChanged();
				}
			}
		}
		
		[Column(Name="c17_binary(512)", Storage="_C17_binary512", DbType="Binary(512) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary C17_binary512
		{
			get
			{
				return this._C17_binary512;
			}
			set
			{
				if ((this._C17_binary512 != value))
				{
					this.OnC17_binary512Changing(value);
					this.SendPropertyChanging();
					this._C17_binary512 = value;
					this.SendPropertyChanged("C17_binary512");
					this.OnC17_binary512Changed();
				}
			}
		}
		
		[Column(Name="c18_varbinary(512)", Storage="_C18_varbinary512", DbType="VarBinary(512) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary C18_varbinary512
		{
			get
			{
				return this._C18_varbinary512;
			}
			set
			{
				if ((this._C18_varbinary512 != value))
				{
					this.OnC18_varbinary512Changing(value);
					this.SendPropertyChanging();
					this._C18_varbinary512 = value;
					this.SendPropertyChanged("C18_varbinary512");
					this.OnC18_varbinary512Changed();
				}
			}
		}
		
		[Column(Name="c19_image", Storage="_C19_image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary C19_image
		{
			get
			{
				return this._C19_image;
			}
			set
			{
				if ((this._C19_image != value))
				{
					this.OnC19_imageChanging(value);
					this.SendPropertyChanging();
					this._C19_image = value;
					this.SendPropertyChanged("C19_image");
					this.OnC19_imageChanged();
				}
			}
		}
		
		[Column(Name="c20_nvarchar(512)", Storage="_C20_nvarchar512", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string C20_nvarchar512
		{
			get
			{
				return this._C20_nvarchar512;
			}
			set
			{
				if ((this._C20_nvarchar512 != value))
				{
					this.OnC20_nvarchar512Changing(value);
					this.SendPropertyChanging();
					this._C20_nvarchar512 = value;
					this.SendPropertyChanged("C20_nvarchar512");
					this.OnC20_nvarchar512Changed();
				}
			}
		}
		
		[Column(Name="c21_nchar(512)", Storage="_C21_nchar512", DbType="NChar(512) NOT NULL", CanBeNull=false)]
		public string C21_nchar512
		{
			get
			{
				return this._C21_nchar512;
			}
			set
			{
				if ((this._C21_nchar512 != value))
				{
					this.OnC21_nchar512Changing(value);
					this.SendPropertyChanging();
					this._C21_nchar512 = value;
					this.SendPropertyChanged("C21_nchar512");
					this.OnC21_nchar512Changed();
				}
			}
		}
		
		[Column(Name="c22_ntext", Storage="_C22_ntext", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string C22_ntext
		{
			get
			{
				return this._C22_ntext;
			}
			set
			{
				if ((this._C22_ntext != value))
				{
					this.OnC22_ntextChanging(value);
					this.SendPropertyChanging();
					this._C22_ntext = value;
					this.SendPropertyChanged("C22_ntext");
					this.OnC22_ntextChanged();
				}
			}
		}
		
		[Column(Name="c23_uniqueidentifier", Storage="_C23_uniqueidentifier", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid C23_uniqueidentifier
		{
			get
			{
				return this._C23_uniqueidentifier;
			}
			set
			{
				if ((this._C23_uniqueidentifier != value))
				{
					this.OnC23_uniqueidentifierChanging(value);
					this.SendPropertyChanging();
					this._C23_uniqueidentifier = value;
					this.SendPropertyChanged("C23_uniqueidentifier");
					this.OnC23_uniqueidentifierChanged();
				}
			}
		}
		
		[Column(Name="c24_bigint", Storage="_C24_bigint", DbType="BigInt NOT NULL")]
		public long C24_bigint
		{
			get
			{
				return this._C24_bigint;
			}
			set
			{
				if ((this._C24_bigint != value))
				{
					this.OnC24_bigintChanging(value);
					this.SendPropertyChanging();
					this._C24_bigint = value;
					this.SendPropertyChanged("C24_bigint");
					this.OnC24_bigintChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BugsDefectTracking")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class BugsDefectTracking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Number;
		
		private System.Nullable<int> _FailureId;
		
		private int _AssignedToId;
		
		private System.Nullable<int> _ResolvedById;
		
		private string _Comment;
		
		private EntityRef<Owners> _Owners;
		
		private EntityRef<Failures> _Failures;
		
		private EntityRef<Owners> _ResolvedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnFailureIdChanging(System.Nullable<int> value);
    partial void OnFailureIdChanged();
    partial void OnAssignedToIdChanging(int value);
    partial void OnAssignedToIdChanged();
    partial void OnResolvedByIdChanging(System.Nullable<int> value);
    partial void OnResolvedByIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public BugsDefectTracking()
		{
			this._Owners = default(EntityRef<Owners>);
			this._Failures = default(EntityRef<Failures>);
			this._ResolvedBy = default(EntityRef<Owners>);
			OnCreated();
		}
        
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Number", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FailureId", DbType="Int")]
		public System.Nullable<int> FailureId
		{
			get
			{
				return this._FailureId;
			}
			set
			{
				if ((this._FailureId != value))
				{
					if (this._Failures.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFailureIdChanging(value);
					this.SendPropertyChanging();
					this._FailureId = value;
					this.SendPropertyChanged("FailureId");
					this.OnFailureIdChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedToId", DbType="Int NOT NULL")]
		public int AssignedToId
		{
			get
			{
				return this._AssignedToId;
			}
			set
			{
				if ((this._AssignedToId != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedToIdChanging(value);
					this.SendPropertyChanging();
					this._AssignedToId = value;
					this.SendPropertyChanged("AssignedToId");
					this.OnAssignedToIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedById", DbType="Int")]
		public System.Nullable<int> ResolvedById
		{
			get
			{
				return this._ResolvedById;
			}
			set
			{
				if ((this._ResolvedById != value))
				{
					if (this._ResolvedBy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResolvedByIdChanging(value);
					this.SendPropertyChanging();
					this._ResolvedById = value;
					this.SendPropertyChanged("ResolvedById");
					this.OnResolvedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(512)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_Bugs_AssignedToOwners", Storage="_Owners", ThisKey="AssignedToId", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.BugsDefectTracking.Remove(this);
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.BugsDefectTracking.Add(this);
						this._AssignedToId = value.Id;
					}
					else
					{
						this._AssignedToId = default(int);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		[Association(Name="FK_Bugs_Failures", Storage="_Failures", ThisKey="FailureId", IsForeignKey=true)]
		public Failures Failures
		{
			get
			{
				return this._Failures.Entity;
			}
			set
			{
				Failures previousValue = this._Failures.Entity;
				if (((previousValue != value) 
							|| (this._Failures.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Failures.Entity = null;
						previousValue.BugsDefectTracking.Remove(this);
					}
					this._Failures.Entity = value;
					if ((value != null))
					{
						value.BugsDefectTracking.Add(this);
						this._FailureId = value.Id;
					}
					else
					{
						this._FailureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Failures");
				}
			}
		}
		
		[Association(Name="FK_Bugs_ResolvedByOwners", Storage="_ResolvedBy", ThisKey="ResolvedById", IsForeignKey=true)]
		public Owners ResolvedBy
		{
			get
			{
				return this._ResolvedBy.Entity;
			}
			set
			{
				Owners previousValue = this._ResolvedBy.Entity;
				if (((previousValue != value) 
							|| (this._ResolvedBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResolvedBy.Entity = null;
						previousValue.Bugs_ResolvedByOwners.Remove(this);
					}
					this._ResolvedBy.Entity = value;
					if ((value != null))
					{
						value.Bugs_ResolvedByOwners.Add(this);
						this._ResolvedById = value.Id;
					}
					else
					{
						this._ResolvedById = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResolvedBy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BugsProjectTracking")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class BugsProjectTracking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Number;
		
		private System.Nullable<int> _FailureId;
		
		private int _AssignedToId;
		
		private System.Nullable<int> _ResolvedById;
		
		private string _Comment;
		
		private EntityRef<Owners> _Owners;
		
		private EntityRef<Failures> _Failures;
		
		private EntityRef<Owners> _ResolvedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnFailureIdChanging(System.Nullable<int> value);
    partial void OnFailureIdChanged();
    partial void OnAssignedToIdChanging(int value);
    partial void OnAssignedToIdChanged();
    partial void OnResolvedByIdChanging(System.Nullable<int> value);
    partial void OnResolvedByIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public BugsProjectTracking()
		{
			this._Owners = default(EntityRef<Owners>);
			this._Failures = default(EntityRef<Failures>);
			this._ResolvedBy = default(EntityRef<Owners>);
			OnCreated();
		}
        
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Number", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FailureId", DbType="Int")]
		public System.Nullable<int> FailureId
		{
			get
			{
				return this._FailureId;
			}
			set
			{
				if ((this._FailureId != value))
				{
					if (this._Failures.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFailureIdChanging(value);
					this.SendPropertyChanging();
					this._FailureId = value;
					this.SendPropertyChanged("FailureId");
					this.OnFailureIdChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedToId", DbType="Int NOT NULL")]
		public int AssignedToId
		{
			get
			{
				return this._AssignedToId;
			}
			set
			{
				if ((this._AssignedToId != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedToIdChanging(value);
					this.SendPropertyChanging();
					this._AssignedToId = value;
					this.SendPropertyChanged("AssignedToId");
					this.OnAssignedToIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedById", DbType="Int")]
		public System.Nullable<int> ResolvedById
		{
			get
			{
				return this._ResolvedById;
			}
			set
			{
				if ((this._ResolvedById != value))
				{
					if (this._ResolvedBy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResolvedByIdChanging(value);
					this.SendPropertyChanging();
					this._ResolvedById = value;
					this.SendPropertyChanged("ResolvedById");
					this.OnResolvedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(512)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_BugsProject_AssignedToOwners", Storage="_Owners", ThisKey="AssignedToId", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.BugsProjectTracking.Remove(this);
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.BugsProjectTracking.Add(this);
						this._AssignedToId = value.Id;
					}
					else
					{
						this._AssignedToId = default(int);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		[Association(Name="FK_BugsProject_Failures", Storage="_Failures", ThisKey="FailureId", IsForeignKey=true)]
		public Failures Failures
		{
			get
			{
				return this._Failures.Entity;
			}
			set
			{
				Failures previousValue = this._Failures.Entity;
				if (((previousValue != value) 
							|| (this._Failures.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Failures.Entity = null;
						previousValue.BugsProjectTracking.Remove(this);
					}
					this._Failures.Entity = value;
					if ((value != null))
					{
						value.BugsProjectTracking.Add(this);
						this._FailureId = value.Id;
					}
					else
					{
						this._FailureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Failures");
				}
			}
		}
		
		[Association(Name="FK_BugsProject_ResolvedByOwners", Storage="_ResolvedBy", ThisKey="ResolvedById", IsForeignKey=true)]
		public Owners ResolvedBy
		{
			get
			{
				return this._ResolvedBy.Entity;
			}
			set
			{
				Owners previousValue = this._ResolvedBy.Entity;
				if (((previousValue != value) 
							|| (this._ResolvedBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResolvedBy.Entity = null;
						previousValue.BugsProject_ResolvedByOwners.Remove(this);
					}
					this._ResolvedBy.Entity = value;
					if ((value != null))
					{
						value.BugsProject_ResolvedByOwners.Add(this);
						this._ResolvedById = value.Id;
					}
					else
					{
						this._ResolvedById = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResolvedBy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ConfigFailures")]
    [Microsoft.OData.Client.KeyAttribute("ConfigId", "FailureId")]
	public partial class ConfigFailures : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigId;
		
		private int _FailureId;
		
		private EntityRef<Configs> _Configs;
		
		private EntityRef<Failures> _Failures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigIdChanging(int value);
    partial void OnConfigIdChanged();
    partial void OnFailureIdChanging(int value);
    partial void OnFailureIdChanged();
    #endregion
		
		public ConfigFailures()
		{
			this._Configs = default(EntityRef<Configs>);
			this._Failures = default(EntityRef<Failures>);
			OnCreated();
		}

		[Column(Storage="_ConfigId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConfigId
		{
			get
			{
				return this._ConfigId;
			}
			set
			{
				if ((this._ConfigId != value))
				{
					if (this._Configs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIdChanging(value);
					this.SendPropertyChanging();
					this._ConfigId = value;
					this.SendPropertyChanged("ConfigId");
					this.OnConfigIdChanged();
				}
			}
		}

		[Column(Storage="_FailureId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FailureId
		{
			get
			{
				return this._FailureId;
			}
			set
			{
				if ((this._FailureId != value))
				{
					if (this._Failures.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFailureIdChanging(value);
					this.SendPropertyChanging();
					this._FailureId = value;
					this.SendPropertyChanged("FailureId");
					this.OnFailureIdChanged();
				}
			}
		}
		
		[Association(Name="FK_FailureConfigConfig", Storage="_Configs", ThisKey="ConfigId", IsForeignKey=true)]
		public Configs Configs
		{
			get
			{
				return this._Configs.Entity;
			}
			set
			{
				Configs previousValue = this._Configs.Entity;
				if (((previousValue != value) 
							|| (this._Configs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configs.Entity = null;
						previousValue.ConfigFailures.Remove(this);
					}
					this._Configs.Entity = value;
					if ((value != null))
					{
						value.ConfigFailures.Add(this);
						this._ConfigId = value.Id;
					}
					else
					{
						this._ConfigId = default(int);
					}
					this.SendPropertyChanged("Configs");
				}
			}
		}
		
		[Association(Name="FK_FailureConfigFailure", Storage="_Failures", ThisKey="FailureId", IsForeignKey=true)]
		public Failures Failures
		{
			get
			{
				return this._Failures.Entity;
			}
			set
			{
				Failures previousValue = this._Failures.Entity;
				if (((previousValue != value) 
							|| (this._Failures.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Failures.Entity = null;
						previousValue.ConfigFailures.Remove(this);
					}
					this._Failures.Entity = value;
					if ((value != null))
					{
						value.ConfigFailures.Add(this);
						this._FailureId = value.Id;
					}
					else
					{
						this._FailureId = default(int);
					}
					this.SendPropertyChanged("Failures");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Configs")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Configs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OS;
		
		private string _Language;
		
		private string _Architecture;
		
		private EntitySet<ConfigFailures> _ConfigFailures;
		
		private EntityRef<MachineConfigs> _MachineConfigs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnArchitectureChanging(string value);
    partial void OnArchitectureChanged();
    #endregion
		
		public Configs()
		{
			this._ConfigFailures = new EntitySet<ConfigFailures>(new Action<ConfigFailures>(this.attach_ConfigFailures), new Action<ConfigFailures>(this.detach_ConfigFailures));
			this._MachineConfigs = default(EntityRef<MachineConfigs>);
			OnCreated();
		}
 
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_OS", DbType="VarChar(512)")]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this.OnOSChanging(value);
					this.SendPropertyChanging();
					this._OS = value;
					this.SendPropertyChanged("OS");
					this.OnOSChanged();
				}
			}
		}
		
		[Column(Storage="_Language", DbType="VarChar(512)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_Architecture", DbType="VarChar(512)")]
		public string Architecture
		{
			get
			{
				return this._Architecture;
			}
			set
			{
				if ((this._Architecture != value))
				{
					this.OnArchitectureChanging(value);
					this.SendPropertyChanging();
					this._Architecture = value;
					this.SendPropertyChanged("Architecture");
					this.OnArchitectureChanged();
				}
			}
		}
		
		[Association(Name="FK_FailureConfigConfig", Storage="_ConfigFailures", OtherKey="ConfigId", DeleteRule="NO ACTION")]
		public EntitySet<ConfigFailures> ConfigFailures
		{
			get
			{
				return this._ConfigFailures;
			}
			set
			{
				this._ConfigFailures.Assign(value);
			}
		}
		
		[Association(Name="FK_MachineConfigs_Configs", Storage="_MachineConfigs", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public MachineConfigs MachineConfigs
		{
			get
			{
				return this._MachineConfigs.Entity;
			}
			set
			{
				MachineConfigs previousValue = this._MachineConfigs.Entity;
				if (((previousValue != value) 
							|| (this._MachineConfigs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineConfigs.Entity = null;
						previousValue.Configs = null;
					}
					this._MachineConfigs.Entity = value;
					if ((value != null))
					{
						value.Configs = this;
					}
					this.SendPropertyChanged("MachineConfigs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigFailures(ConfigFailures entity)
		{
			this.SendPropertyChanging();
			entity.Configs = this;
		}
		
		private void detach_ConfigFailures(ConfigFailures entity)
		{
			this.SendPropertyChanging();
			entity.Configs = null;
		}
	}

    [Table(Name = "dbo.DataKey_BigInt")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_BigInt : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_BigInt()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "BigInt NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NChar(10)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_BigInt", Storage = "_ThirteenNavigations", OtherKey = "BigInt_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_BigInt = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_BigInt = null;
        }
    }

    [Table(Name = "dbo.DataKey_Bit")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Bit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private bool _Id;

        private System.Xml.Linq.XElement _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(bool value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Xml.Linq.XElement value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Bit()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Bit NOT NULL", IsPrimaryKey = true)]
        public bool Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public System.Xml.Linq.XElement DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Bit", Storage = "_ThirteenNavigations", OtherKey = "Bit_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Bit = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Bit = null;
        }
    }

    [Table(Name = "dbo.DataKey_DateTime")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_DateTime : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _Id;

        private System.Data.Linq.Binary _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(System.DateTime value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Data.Linq.Binary value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_DateTime()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "DateTime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "Binary(50)", CanBeNull = true)]
        public System.Data.Linq.Binary DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_DateTime", Storage = "_ThirteenNavigations", OtherKey = "DateTime_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_DateTime = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_DateTime = null;
        }
    }

    [Table(Name = "dbo.DataKey_Decimal")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Decimal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private decimal _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Decimal()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Decimal(16,2) NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "Char(10)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Decimal", Storage = "_ThirteenNavigations", OtherKey = "Decimal_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Decimal = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Decimal = null;
        }
    }

    [Table(Name = "dbo.DataKey_Float")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Float : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Id;

        private System.Data.Linq.Binary _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(double value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Data.Linq.Binary value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Float()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Float NOT NULL", IsPrimaryKey = true)]
        public double Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Float", Storage = "_ThirteenNavigations", OtherKey = "Float_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Float = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Float = null;
        }
    }

    [Table(Name = "dbo.DataKey_GUID")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_GUID : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _Id;

        private System.Data.Linq.Binary _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(System.Guid value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Data.Linq.Binary value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_GUID()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "VarBinary(MAX)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_GUID", Storage = "_ThirteenNavigations", OtherKey = "GUID_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_GUID = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_GUID = null;
        }
    }

    [Table(Name = "dbo.DataKey_Money")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Money : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private decimal _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Money()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Money NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NChar(10)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Money", Storage = "_ThirteenNavigations", OtherKey = "Money_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Money = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Money = null;
        }
    }

    [Table(Name = "dbo.DataKey_Numeric")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Numeric : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private decimal _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Numeric()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Numeric(38, 18) NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NVarChar(50)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Numeric", Storage = "_ThirteenNavigations", OtherKey = "Numeric_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Numeric = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Numeric = null;
        }
    }

    [Table(Name = "dbo.DataKey_Real")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_Real : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private float _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(float value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_Real()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Real NOT NULL", IsPrimaryKey = true)]
        public float Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Real", Storage = "_ThirteenNavigations", OtherKey = "Real_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Real = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_Real = null;
        }
    }

    [Table(Name = "dbo.DataKey_SmallDateTime")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_SmallDateTime : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(System.DateTime value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_SmallDateTime()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "SmallDateTime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NChar(10)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_SmallDateTime", Storage = "_ThirteenNavigations", OtherKey = "SmallDateTime_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_SmallDateTime = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_SmallDateTime = null;
        }
    }

    [Table(Name = "dbo.DataKey_SmallMoney")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_SmallMoney : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private decimal _Id;

        private string _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_SmallMoney()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "SmallMoney NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "VarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_SmallMoney", Storage = "_ThirteenNavigations", OtherKey = "SmallMoney_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_SmallMoney = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_SmallMoney = null;
        }
    }

    [Table(Name = "dbo.DataKey_TinyInt")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_TinyInt : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private byte _Id;

        private System.Nullable<System.Guid> _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(byte value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Nullable<System.Guid> value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_TinyInt()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        public byte Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_TinyInt", Storage = "_ThirteenNavigations", OtherKey = "TinyInt_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_TinyInt = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_TinyInt = null;
        }
    }

    [Table(Name = "dbo.DataKey_VarChar50")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class DataKey_VarChar50 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Id;

        private System.Xml.Linq.XElement _DataColumn;

        private EntitySet<ThirteenNavigations> _ThirteenNavigations;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnDataColumnChanging(System.Xml.Linq.XElement value);
        partial void OnDataColumnChanged();
        #endregion

        public DataKey_VarChar50()
        {
            this._ThirteenNavigations = new EntitySet<ThirteenNavigations>(new Action<ThirteenNavigations>(this.attach_ThirteenNavigations), new Action<ThirteenNavigations>(this.detach_ThirteenNavigations));
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public System.Xml.Linq.XElement DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_VarChar50", Storage = "_ThirteenNavigations", OtherKey = "Varchar_Id", DeleteRule = "NO ACTION")]
        public EntitySet<ThirteenNavigations> ThirteenNavigations
        {
            get
            {
                return this._ThirteenNavigations;
            }
            set
            {
                this._ThirteenNavigations.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_VarChar50 = this;
        }

        private void detach_ThirteenNavigations(ThirteenNavigations entity)
        {
            this.SendPropertyChanging();
            entity.DataKey_VarChar50 = null;
        }
    }

    [Table(Name = "dbo.DeploymentScenarios")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class DeploymentScenarios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ProjectId;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProjectIdChanging(System.Nullable<int> value);
    partial void OnProjectIdChanged();
    #endregion
		
		public DeploymentScenarios()
		{
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectId", DbType="Int")]
		public System.Nullable<int> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[Association(Name="FK_DeploymentScenarios_Projects", Storage="_Projects", ThisKey="ProjectId", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.DeploymentScenarios.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.DeploymentScenarios.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FailureDetails")]
    [Microsoft.OData.Client.KeyAttribute("FailureId")]
	public partial class FailureDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FailureId;
		
		private string _Log;
		
		private EntityRef<Failures> _Failures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFailureIdChanging(int value);
    partial void OnFailureIdChanged();
    partial void OnLogChanging(string value);
    partial void OnLogChanged();
    #endregion
		
		public FailureDetails()
		{
			this._Failures = default(EntityRef<Failures>);
			OnCreated();
		}

		[Column(Storage="_FailureId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FailureId
		{
			get
			{
				return this._FailureId;
			}
			set
			{
				if ((this._FailureId != value))
				{
					if (this._Failures.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFailureIdChanging(value);
					this.SendPropertyChanging();
					this._FailureId = value;
					this.SendPropertyChanged("FailureId");
					this.OnFailureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Log", DbType="VarChar(512)")]
		public string Log
		{
			get
			{
				return this._Log;
			}
			set
			{
				if ((this._Log != value))
				{
					this.OnLogChanging(value);
					this.SendPropertyChanging();
					this._Log = value;
					this.SendPropertyChanged("Log");
					this.OnLogChanged();
				}
			}
		}
		
		[Association(Name="FK_FailureDetails_Failures", Storage="_Failures", ThisKey="FailureId", IsForeignKey=true)]
		public Failures Failures
		{
			get
			{
				return this._Failures.Entity;
			}
			set
			{
				Failures previousValue = this._Failures.Entity;
				if (((previousValue != value) 
							|| (this._Failures.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Failures.Entity = null;
						previousValue.FailureDetails = null;
					}
					this._Failures.Entity = value;
					if ((value != null))
					{
						value.FailureDetails = this;
						this._FailureId = value.Id;
					}
					else
					{
						this._FailureId = default(int);
					}
					this.SendPropertyChanged("Failures");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Failures")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Failures : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TestId;
		
		private System.Nullable<bool> _Baseline;
		
		private System.Nullable<int> _TypeId;
		
		private string _TestCase;
		
		private System.Nullable<int> _Variation;
		
		private string _Comment;
		
		private System.DateTime _Changed;
		
		private EntitySet<BugsDefectTracking> _BugsDefectTracking;
		
		private EntitySet<BugsProjectTracking> _BugsProjectTracking;
		
		private EntitySet<ConfigFailures> _ConfigFailures;
		
		private EntityRef<FailureDetails> _FailureDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnBaselineChanging(System.Nullable<bool> value);
    partial void OnBaselineChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    partial void OnTestCaseChanging(string value);
    partial void OnTestCaseChanged();
    partial void OnVariationChanging(System.Nullable<int> value);
    partial void OnVariationChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnChangedChanging(System.DateTime value);
    partial void OnChangedChanged();
    #endregion
		
		public Failures()
		{
			this._BugsDefectTracking = new EntitySet<BugsDefectTracking>(new Action<BugsDefectTracking>(this.attach_BugsDefectTracking), new Action<BugsDefectTracking>(this.detach_BugsDefectTracking));
			this._BugsProjectTracking = new EntitySet<BugsProjectTracking>(new Action<BugsProjectTracking>(this.attach_BugsProjectTracking), new Action<BugsProjectTracking>(this.detach_BugsProjectTracking));
			this._ConfigFailures = new EntitySet<ConfigFailures>(new Action<ConfigFailures>(this.attach_ConfigFailures), new Action<ConfigFailures>(this.detach_ConfigFailures));
			this._FailureDetails = default(EntityRef<FailureDetails>);
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[Column(Storage="_Baseline", DbType="Bit")]
		public System.Nullable<bool> Baseline
		{
			get
			{
				return this._Baseline;
			}
			set
			{
				if ((this._Baseline != value))
				{
					this.OnBaselineChanging(value);
					this.SendPropertyChanging();
					this._Baseline = value;
					this.SendPropertyChanged("Baseline");
					this.OnBaselineChanged();
				}
			}
		}
		
		[Column(Storage="_TypeId", DbType="Int")]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TestCase", DbType="VarChar(512)")]
		public string TestCase
		{
			get
			{
				return this._TestCase;
			}
			set
			{
				if ((this._TestCase != value))
				{
					this.OnTestCaseChanging(value);
					this.SendPropertyChanging();
					this._TestCase = value;
					this.SendPropertyChanged("TestCase");
					this.OnTestCaseChanged();
				}
			}
		}
		
		[Column(Storage="_Variation", DbType="Int")]
		public System.Nullable<int> Variation
		{
			get
			{
				return this._Variation;
			}
			set
			{
				if ((this._Variation != value))
				{
					this.OnVariationChanging(value);
					this.SendPropertyChanging();
					this._Variation = value;
					this.SendPropertyChanged("Variation");
					this.OnVariationChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(512)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Changed", DbType="DateTime NOT NULL")]
		public System.DateTime Changed
		{
			get
			{
				return this._Changed;
			}
			set
			{
				if ((this._Changed != value))
				{
					this.OnChangedChanging(value);
					this.SendPropertyChanging();
					this._Changed = value;
					this.SendPropertyChanged("Changed");
					this.OnChangedChanged();
				}
			}
		}
		
		[Association(Name="FK_Bugs_Failures", Storage="_BugsDefectTracking", OtherKey="FailureId", DeleteRule="NO ACTION")]
		public EntitySet<BugsDefectTracking> BugsDefectTracking
		{
			get
			{
				return this._BugsDefectTracking;
			}
			set
			{
				this._BugsDefectTracking.Assign(value);
			}
		}
		
		[Association(Name="FK_BugsProject_Failures", Storage="_BugsProjectTracking", OtherKey="FailureId", DeleteRule="NO ACTION")]
		public EntitySet<BugsProjectTracking> BugsProjectTracking
		{
			get
			{
				return this._BugsProjectTracking;
			}
			set
			{
				this._BugsProjectTracking.Assign(value);
			}
		}
		
		[Association(Name="FK_FailureConfigFailure", Storage="_ConfigFailures", OtherKey="FailureId", DeleteRule="NO ACTION")]
		public EntitySet<ConfigFailures> ConfigFailures
		{
			get
			{
				return this._ConfigFailures;
			}
			set
			{
				this._ConfigFailures.Assign(value);
			}
		}
		
		[Association(Name="FK_FailureDetails_Failures", Storage="_FailureDetails", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public FailureDetails FailureDetails
		{
			get
			{
				return this._FailureDetails.Entity;
			}
			set
			{
				FailureDetails previousValue = this._FailureDetails.Entity;
				if (((previousValue != value) 
							|| (this._FailureDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FailureDetails.Entity = null;
						previousValue.Failures = null;
					}
					this._FailureDetails.Entity = value;
					if ((value != null))
					{
						value.Failures = this;
					}
					this.SendPropertyChanged("FailureDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BugsDefectTracking(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Failures = this;
		}
		
		private void detach_BugsDefectTracking(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Failures = null;
		}
		
		private void attach_BugsProjectTracking(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Failures = this;
		}
		
		private void detach_BugsProjectTracking(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Failures = null;
		}
		
		private void attach_ConfigFailures(ConfigFailures entity)
		{
			this.SendPropertyChanging();
			entity.Failures = this;
		}
		
		private void detach_ConfigFailures(ConfigFailures entity)
		{
			this.SendPropertyChanging();
			entity.Failures = null;
		}
	}
	
	[Table(Name="dbo.FailureTypes")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class FailureTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FailureTypes()
		{
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MachineConfigs")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class MachineConfigs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Host;
		
		private System.Nullable<System.Guid> _IPAddress;
		
		private EntityRef<Configs> _Configs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnIPAddressChanging(System.Nullable<System.Guid> value);
    partial void OnIPAddressChanged();
    #endregion
		
		public MachineConfigs()
		{
			this._Configs = default(EntityRef<Configs>);
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Configs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Host", DbType="VarChar(512)")]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[Column(Name="IP Address", Storage="_IPAddress", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Association(Name="FK_MachineConfigs_Configs", Storage="_Configs", ThisKey="Id", IsForeignKey=true)]
		public Configs Configs
		{
			get
			{
				return this._Configs.Entity;
			}
			set
			{
				Configs previousValue = this._Configs.Entity;
				if (((previousValue != value) 
							|| (this._Configs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configs.Entity = null;
						previousValue.MachineConfigs = null;
					}
					this._Configs.Entity = value;
					if ((value != null))
					{
						value.MachineConfigs = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Configs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NonDefaultFacets")]
    [Microsoft.OData.Client.KeyAttribute("C1_int")]
	public partial class NonDefaultFacets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C1_int;
		
		private System.Nullable<decimal> _C_decimal27_3_AS_decimal28_4;
		
		private System.Nullable<decimal> _C_decimal24_0_AS_decimal26_2;
		
		private System.Nullable<decimal> _C_numeric24_0_AS_numeric28_4;
		
		private System.Nullable<decimal> _C_numeric24_0_AS_numeric25_1;
		
		private string _C_varchar230_AS_varchar512;
		
		private string _C_varchar17_AS_varchar98;
		
		private System.Data.Linq.Binary _C_varbinary60_AS_varbinary512;
		
		private System.Data.Linq.Binary _C_varbinary31_AS_varbinary365;
		
		private string _C_varchar80_AS_nvarchar512;
		
		private string _C_varchar185_AS_nvarchar285;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC1_intChanging(int value);
    partial void OnC1_intChanged();
    partial void OnC_decimal27_3_AS_decimal28_4Changing(System.Nullable<decimal> value);
    partial void OnC_decimal27_3_AS_decimal28_4Changed();
    partial void OnC_decimal24_0_AS_decimal26_2Changing(System.Nullable<decimal> value);
    partial void OnC_decimal24_0_AS_decimal26_2Changed();
    partial void OnC_numeric24_0_AS_numeric28_4Changing(System.Nullable<decimal> value);
    partial void OnC_numeric24_0_AS_numeric28_4Changed();
    partial void OnC_numeric24_0_AS_numeric25_1Changing(System.Nullable<decimal> value);
    partial void OnC_numeric24_0_AS_numeric25_1Changed();
    partial void OnC_varchar230_AS_varchar512Changing(string value);
    partial void OnC_varchar230_AS_varchar512Changed();
    partial void OnC_varchar17_AS_varchar98Changing(string value);
    partial void OnC_varchar17_AS_varchar98Changed();
    partial void OnC_varbinary60_AS_varbinary512Changing(System.Data.Linq.Binary value);
    partial void OnC_varbinary60_AS_varbinary512Changed();
    partial void OnC_varbinary31_AS_varbinary365Changing(System.Data.Linq.Binary value);
    partial void OnC_varbinary31_AS_varbinary365Changed();
    partial void OnC_varchar80_AS_nvarchar512Changing(string value);
    partial void OnC_varchar80_AS_nvarchar512Changed();
    partial void OnC_varchar185_AS_nvarchar285Changing(string value);
    partial void OnC_varchar185_AS_nvarchar285Changed();
    #endregion
		
		public NonDefaultFacets()
		{
			OnCreated();
		}

        [Column(Name = "c1_int", Storage = "_C1_int", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int C1_int
		{
			get
			{
				return this._C1_int;
			}
			set
			{
				if ((this._C1_int != value))
				{
					this.OnC1_intChanging(value);
					this.SendPropertyChanging();
					this._C1_int = value;
					this.SendPropertyChanged("C1_int");
					this.OnC1_intChanged();
				}
			}
		}
		
		[Column(Name="c_decimal27_3_AS_decimal28_4", Storage="_C_decimal27_3_AS_decimal28_4", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_decimal27_3_AS_decimal28_4
		{
			get
			{
				return this._C_decimal27_3_AS_decimal28_4;
			}
			set
			{
				if ((this._C_decimal27_3_AS_decimal28_4 != value))
				{
					this.OnC_decimal27_3_AS_decimal28_4Changing(value);
					this.SendPropertyChanging();
					this._C_decimal27_3_AS_decimal28_4 = value;
					this.SendPropertyChanged("C_decimal27_3_AS_decimal28_4");
					this.OnC_decimal27_3_AS_decimal28_4Changed();
				}
			}
		}
		
		[Column(Name="c_decimal24_0_AS_decimal26_2", Storage="_C_decimal24_0_AS_decimal26_2", DbType="Decimal(26,2)")]
		public System.Nullable<decimal> C_decimal24_0_AS_decimal26_2
		{
			get
			{
				return this._C_decimal24_0_AS_decimal26_2;
			}
			set
			{
				if ((this._C_decimal24_0_AS_decimal26_2 != value))
				{
					this.OnC_decimal24_0_AS_decimal26_2Changing(value);
					this.SendPropertyChanging();
					this._C_decimal24_0_AS_decimal26_2 = value;
					this.SendPropertyChanged("C_decimal24_0_AS_decimal26_2");
					this.OnC_decimal24_0_AS_decimal26_2Changed();
				}
			}
		}
		
		[Column(Name="c_numeric24_0_AS_numeric28_4", Storage="_C_numeric24_0_AS_numeric28_4", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_numeric24_0_AS_numeric28_4
		{
			get
			{
				return this._C_numeric24_0_AS_numeric28_4;
			}
			set
			{
				if ((this._C_numeric24_0_AS_numeric28_4 != value))
				{
					this.OnC_numeric24_0_AS_numeric28_4Changing(value);
					this.SendPropertyChanging();
					this._C_numeric24_0_AS_numeric28_4 = value;
					this.SendPropertyChanged("C_numeric24_0_AS_numeric28_4");
					this.OnC_numeric24_0_AS_numeric28_4Changed();
				}
			}
		}
		
		[Column(Name="c_numeric24_0_AS_numeric25_1", Storage="_C_numeric24_0_AS_numeric25_1", DbType="Decimal(25,1)")]
		public System.Nullable<decimal> C_numeric24_0_AS_numeric25_1
		{
			get
			{
				return this._C_numeric24_0_AS_numeric25_1;
			}
			set
			{
				if ((this._C_numeric24_0_AS_numeric25_1 != value))
				{
					this.OnC_numeric24_0_AS_numeric25_1Changing(value);
					this.SendPropertyChanging();
					this._C_numeric24_0_AS_numeric25_1 = value;
					this.SendPropertyChanged("C_numeric24_0_AS_numeric25_1");
					this.OnC_numeric24_0_AS_numeric25_1Changed();
				}
			}
		}
		
		[Column(Name="c_varchar230_AS_varchar512", Storage="_C_varchar230_AS_varchar512", DbType="VarChar(512)")]
		public string C_varchar230_AS_varchar512
		{
			get
			{
				return this._C_varchar230_AS_varchar512;
			}
			set
			{
				if ((this._C_varchar230_AS_varchar512 != value))
				{
					this.OnC_varchar230_AS_varchar512Changing(value);
					this.SendPropertyChanging();
					this._C_varchar230_AS_varchar512 = value;
					this.SendPropertyChanged("C_varchar230_AS_varchar512");
					this.OnC_varchar230_AS_varchar512Changed();
				}
			}
		}
		
		[Column(Name="c_varchar17_AS_varchar98", Storage="_C_varchar17_AS_varchar98", DbType="VarChar(98)")]
		public string C_varchar17_AS_varchar98
		{
			get
			{
				return this._C_varchar17_AS_varchar98;
			}
			set
			{
				if ((this._C_varchar17_AS_varchar98 != value))
				{
					this.OnC_varchar17_AS_varchar98Changing(value);
					this.SendPropertyChanging();
					this._C_varchar17_AS_varchar98 = value;
					this.SendPropertyChanged("C_varchar17_AS_varchar98");
					this.OnC_varchar17_AS_varchar98Changed();
				}
			}
		}
		
		[Column(Name="c_varbinary60_AS_varbinary512", Storage="_C_varbinary60_AS_varbinary512", DbType="VarBinary(512)", CanBeNull=true)]
		public System.Data.Linq.Binary C_varbinary60_AS_varbinary512
		{
			get
			{
				return this._C_varbinary60_AS_varbinary512;
			}
			set
			{
				if ((this._C_varbinary60_AS_varbinary512 != value))
				{
					this.OnC_varbinary60_AS_varbinary512Changing(value);
					this.SendPropertyChanging();
					this._C_varbinary60_AS_varbinary512 = value;
					this.SendPropertyChanged("C_varbinary60_AS_varbinary512");
					this.OnC_varbinary60_AS_varbinary512Changed();
				}
			}
		}
		
		[Column(Name="c_varbinary31_AS_varbinary365", Storage="_C_varbinary31_AS_varbinary365", DbType="VarBinary(365)", CanBeNull=true)]
		public System.Data.Linq.Binary C_varbinary31_AS_varbinary365
		{
			get
			{
				return this._C_varbinary31_AS_varbinary365;
			}
			set
			{
				if ((this._C_varbinary31_AS_varbinary365 != value))
				{
					this.OnC_varbinary31_AS_varbinary365Changing(value);
					this.SendPropertyChanging();
					this._C_varbinary31_AS_varbinary365 = value;
					this.SendPropertyChanged("C_varbinary31_AS_varbinary365");
					this.OnC_varbinary31_AS_varbinary365Changed();
				}
			}
		}
		
		[Column(Name="c_varchar80_AS_nvarchar512", Storage="_C_varchar80_AS_nvarchar512", DbType="NVarChar(512)")]
		public string C_varchar80_AS_nvarchar512
		{
			get
			{
				return this._C_varchar80_AS_nvarchar512;
			}
			set
			{
				if ((this._C_varchar80_AS_nvarchar512 != value))
				{
					this.OnC_varchar80_AS_nvarchar512Changing(value);
					this.SendPropertyChanging();
					this._C_varchar80_AS_nvarchar512 = value;
					this.SendPropertyChanged("C_varchar80_AS_nvarchar512");
					this.OnC_varchar80_AS_nvarchar512Changed();
				}
			}
		}
		
		[Column(Name="c_varchar185_AS_nvarchar285", Storage="_C_varchar185_AS_nvarchar285", DbType="NVarChar(285)")]
		public string C_varchar185_AS_nvarchar285
		{
			get
			{
				return this._C_varchar185_AS_nvarchar285;
			}
			set
			{
				if ((this._C_varchar185_AS_nvarchar285 != value))
				{
					this.OnC_varchar185_AS_nvarchar285Changing(value);
					this.SendPropertyChanging();
					this._C_varchar185_AS_nvarchar285 = value;
					this.SendPropertyChanged("C_varchar185_AS_nvarchar285");
					this.OnC_varchar185_AS_nvarchar285Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NonDefaultMappings")]
    [Microsoft.OData.Client.KeyAttribute("C1_int")]
	public partial class NonDefaultMappings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C1_int;
		
		private decimal _C_int_AS_decimal;
		
		private System.Nullable<decimal> _C_int_AS_numeric;
		
		private double _C_int_AS_float;
		
		private System.Nullable<decimal> _C_int_AS_money;
		
		private long _C_int_AS_bigint;
		
		private System.Nullable<int> _C_smallint_AS_int;
		
		private decimal _C_smallint_AS_decimal;
		
		private System.Nullable<decimal> _C_smallint_AS_numeric;
		
		private float _C_smallint_AS_real;
		
		private System.Nullable<double> _C_smallint_AS_float;
		
		private decimal _C_smallint_AS_money;
		
		private System.Nullable<decimal> _C_smallint_AS_smallmoney;
		
		private long _C_smallint_AS_bigint;
		
		private System.Nullable<int> _C_tinyint_AS_int;
		
		private short _C_tinyint_AS_smallint;
		
		private System.Nullable<decimal> _C_tinyint_AS_decimal;
		
		private decimal _C_tinyint_AS_numeric;
		
		private System.Nullable<float> _C_tinyint_AS_real;
		
		private double _C_tinyint_AS_float;
		
		private System.Nullable<decimal> _C_tinyint_AS_money;
		
		private decimal _C_tinyint_AS_smallmoney;
		
		private System.Nullable<long> _C_tinyint_AS_bigint;
		
		private System.DateTime _C_smalldatetime_AS_datetime;
		
		private string _C_varchar_AS_nvarchar;
		
		private string _C_char_AS_nchar;
		
		private string _C_nvarchar_AS_ntext;
		
		private decimal _C_bigint_AS_decimal;
		
		private System.Nullable<decimal> _C_bigint_AS_numeric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC1_intChanging(int value);
    partial void OnC1_intChanged();
    partial void OnC_int_AS_decimalChanging(decimal value);
    partial void OnC_int_AS_decimalChanged();
    partial void OnC_int_AS_numericChanging(System.Nullable<decimal> value);
    partial void OnC_int_AS_numericChanged();
    partial void OnC_int_AS_floatChanging(double value);
    partial void OnC_int_AS_floatChanged();
    partial void OnC_int_AS_moneyChanging(System.Nullable<decimal> value);
    partial void OnC_int_AS_moneyChanged();
    partial void OnC_int_AS_bigintChanging(long value);
    partial void OnC_int_AS_bigintChanged();
    partial void OnC_smallint_AS_intChanging(System.Nullable<int> value);
    partial void OnC_smallint_AS_intChanged();
    partial void OnC_smallint_AS_decimalChanging(decimal value);
    partial void OnC_smallint_AS_decimalChanged();
    partial void OnC_smallint_AS_numericChanging(System.Nullable<decimal> value);
    partial void OnC_smallint_AS_numericChanged();
    partial void OnC_smallint_AS_realChanging(float value);
    partial void OnC_smallint_AS_realChanged();
    partial void OnC_smallint_AS_floatChanging(System.Nullable<double> value);
    partial void OnC_smallint_AS_floatChanged();
    partial void OnC_smallint_AS_moneyChanging(decimal value);
    partial void OnC_smallint_AS_moneyChanged();
    partial void OnC_smallint_AS_smallmoneyChanging(System.Nullable<decimal> value);
    partial void OnC_smallint_AS_smallmoneyChanged();
    partial void OnC_smallint_AS_bigintChanging(long value);
    partial void OnC_smallint_AS_bigintChanged();
    partial void OnC_tinyint_AS_intChanging(System.Nullable<int> value);
    partial void OnC_tinyint_AS_intChanged();
    partial void OnC_tinyint_AS_smallintChanging(short value);
    partial void OnC_tinyint_AS_smallintChanged();
    partial void OnC_tinyint_AS_decimalChanging(System.Nullable<decimal> value);
    partial void OnC_tinyint_AS_decimalChanged();
    partial void OnC_tinyint_AS_numericChanging(decimal value);
    partial void OnC_tinyint_AS_numericChanged();
    partial void OnC_tinyint_AS_realChanging(System.Nullable<float> value);
    partial void OnC_tinyint_AS_realChanged();
    partial void OnC_tinyint_AS_floatChanging(double value);
    partial void OnC_tinyint_AS_floatChanged();
    partial void OnC_tinyint_AS_moneyChanging(System.Nullable<decimal> value);
    partial void OnC_tinyint_AS_moneyChanged();
    partial void OnC_tinyint_AS_smallmoneyChanging(decimal value);
    partial void OnC_tinyint_AS_smallmoneyChanged();
    partial void OnC_tinyint_AS_bigintChanging(System.Nullable<long> value);
    partial void OnC_tinyint_AS_bigintChanged();
    partial void OnC_smalldatetime_AS_datetimeChanging(System.DateTime value);
    partial void OnC_smalldatetime_AS_datetimeChanged();
    partial void OnC_varchar_AS_nvarcharChanging(string value);
    partial void OnC_varchar_AS_nvarcharChanged();
    partial void OnC_char_AS_ncharChanging(string value);
    partial void OnC_char_AS_ncharChanged();
    partial void OnC_nvarchar_AS_ntextChanging(string value);
    partial void OnC_nvarchar_AS_ntextChanged();
    partial void OnC_bigint_AS_decimalChanging(decimal value);
    partial void OnC_bigint_AS_decimalChanged();
    partial void OnC_bigint_AS_numericChanging(System.Nullable<decimal> value);
    partial void OnC_bigint_AS_numericChanged();
    #endregion
		
		public NonDefaultMappings()
		{
			OnCreated();
		}

        [Column(Name = "c1_int", Storage = "_C1_int", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int C1_int
		{
			get
			{
				return this._C1_int;
			}
			set
			{
				if ((this._C1_int != value))
				{
					this.OnC1_intChanging(value);
					this.SendPropertyChanging();
					this._C1_int = value;
					this.SendPropertyChanged("C1_int");
					this.OnC1_intChanged();
				}
			}
		}
		
		[Column(Name="c_int_AS_decimal", Storage="_C_int_AS_decimal", DbType="Decimal(28,4) NOT NULL")]
		public decimal C_int_AS_decimal
		{
			get
			{
				return this._C_int_AS_decimal;
			}
			set
			{
				if ((this._C_int_AS_decimal != value))
				{
					this.OnC_int_AS_decimalChanging(value);
					this.SendPropertyChanging();
					this._C_int_AS_decimal = value;
					this.SendPropertyChanged("C_int_AS_decimal");
					this.OnC_int_AS_decimalChanged();
				}
			}
		}
		
		[Column(Name="c_int_AS_numeric", Storage="_C_int_AS_numeric", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_int_AS_numeric
		{
			get
			{
				return this._C_int_AS_numeric;
			}
			set
			{
				if ((this._C_int_AS_numeric != value))
				{
					this.OnC_int_AS_numericChanging(value);
					this.SendPropertyChanging();
					this._C_int_AS_numeric = value;
					this.SendPropertyChanged("C_int_AS_numeric");
					this.OnC_int_AS_numericChanged();
				}
			}
		}
		
		[Column(Name="c_int_AS_float", Storage="_C_int_AS_float", DbType="Float NOT NULL")]
		public double C_int_AS_float
		{
			get
			{
				return this._C_int_AS_float;
			}
			set
			{
				if ((this._C_int_AS_float != value))
				{
					this.OnC_int_AS_floatChanging(value);
					this.SendPropertyChanging();
					this._C_int_AS_float = value;
					this.SendPropertyChanged("C_int_AS_float");
					this.OnC_int_AS_floatChanged();
				}
			}
		}
		
		[Column(Name="c_int_AS_money", Storage="_C_int_AS_money", DbType="Money")]
		public System.Nullable<decimal> C_int_AS_money
		{
			get
			{
				return this._C_int_AS_money;
			}
			set
			{
				if ((this._C_int_AS_money != value))
				{
					this.OnC_int_AS_moneyChanging(value);
					this.SendPropertyChanging();
					this._C_int_AS_money = value;
					this.SendPropertyChanged("C_int_AS_money");
					this.OnC_int_AS_moneyChanged();
				}
			}
		}
		
		[Column(Name="c_int_AS_bigint", Storage="_C_int_AS_bigint", DbType="BigInt NOT NULL")]
		public long C_int_AS_bigint
		{
			get
			{
				return this._C_int_AS_bigint;
			}
			set
			{
				if ((this._C_int_AS_bigint != value))
				{
					this.OnC_int_AS_bigintChanging(value);
					this.SendPropertyChanging();
					this._C_int_AS_bigint = value;
					this.SendPropertyChanged("C_int_AS_bigint");
					this.OnC_int_AS_bigintChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_int", Storage="_C_smallint_AS_int", DbType="Int")]
		public System.Nullable<int> C_smallint_AS_int
		{
			get
			{
				return this._C_smallint_AS_int;
			}
			set
			{
				if ((this._C_smallint_AS_int != value))
				{
					this.OnC_smallint_AS_intChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_int = value;
					this.SendPropertyChanged("C_smallint_AS_int");
					this.OnC_smallint_AS_intChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_decimal", Storage="_C_smallint_AS_decimal", DbType="Decimal(28,4) NOT NULL")]
		public decimal C_smallint_AS_decimal
		{
			get
			{
				return this._C_smallint_AS_decimal;
			}
			set
			{
				if ((this._C_smallint_AS_decimal != value))
				{
					this.OnC_smallint_AS_decimalChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_decimal = value;
					this.SendPropertyChanged("C_smallint_AS_decimal");
					this.OnC_smallint_AS_decimalChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_numeric", Storage="_C_smallint_AS_numeric", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_smallint_AS_numeric
		{
			get
			{
				return this._C_smallint_AS_numeric;
			}
			set
			{
				if ((this._C_smallint_AS_numeric != value))
				{
					this.OnC_smallint_AS_numericChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_numeric = value;
					this.SendPropertyChanged("C_smallint_AS_numeric");
					this.OnC_smallint_AS_numericChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_real", Storage="_C_smallint_AS_real", DbType="Real NOT NULL")]
		public float C_smallint_AS_real
		{
			get
			{
				return this._C_smallint_AS_real;
			}
			set
			{
				if ((this._C_smallint_AS_real != value))
				{
					this.OnC_smallint_AS_realChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_real = value;
					this.SendPropertyChanged("C_smallint_AS_real");
					this.OnC_smallint_AS_realChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_float", Storage="_C_smallint_AS_float", DbType="Float")]
		public System.Nullable<double> C_smallint_AS_float
		{
			get
			{
				return this._C_smallint_AS_float;
			}
			set
			{
				if ((this._C_smallint_AS_float != value))
				{
					this.OnC_smallint_AS_floatChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_float = value;
					this.SendPropertyChanged("C_smallint_AS_float");
					this.OnC_smallint_AS_floatChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_money", Storage="_C_smallint_AS_money", DbType="Money NOT NULL")]
		public decimal C_smallint_AS_money
		{
			get
			{
				return this._C_smallint_AS_money;
			}
			set
			{
				if ((this._C_smallint_AS_money != value))
				{
					this.OnC_smallint_AS_moneyChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_money = value;
					this.SendPropertyChanged("C_smallint_AS_money");
					this.OnC_smallint_AS_moneyChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_smallmoney", Storage="_C_smallint_AS_smallmoney", DbType="SmallMoney")]
		public System.Nullable<decimal> C_smallint_AS_smallmoney
		{
			get
			{
				return this._C_smallint_AS_smallmoney;
			}
			set
			{
				if ((this._C_smallint_AS_smallmoney != value))
				{
					this.OnC_smallint_AS_smallmoneyChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_smallmoney = value;
					this.SendPropertyChanged("C_smallint_AS_smallmoney");
					this.OnC_smallint_AS_smallmoneyChanged();
				}
			}
		}
		
		[Column(Name="c_smallint_AS_bigint", Storage="_C_smallint_AS_bigint", DbType="BigInt NOT NULL")]
		public long C_smallint_AS_bigint
		{
			get
			{
				return this._C_smallint_AS_bigint;
			}
			set
			{
				if ((this._C_smallint_AS_bigint != value))
				{
					this.OnC_smallint_AS_bigintChanging(value);
					this.SendPropertyChanging();
					this._C_smallint_AS_bigint = value;
					this.SendPropertyChanged("C_smallint_AS_bigint");
					this.OnC_smallint_AS_bigintChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_int", Storage="_C_tinyint_AS_int", DbType="Int")]
		public System.Nullable<int> C_tinyint_AS_int
		{
			get
			{
				return this._C_tinyint_AS_int;
			}
			set
			{
				if ((this._C_tinyint_AS_int != value))
				{
					this.OnC_tinyint_AS_intChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_int = value;
					this.SendPropertyChanged("C_tinyint_AS_int");
					this.OnC_tinyint_AS_intChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_smallint", Storage="_C_tinyint_AS_smallint", DbType="SmallInt NOT NULL")]
		public short C_tinyint_AS_smallint
		{
			get
			{
				return this._C_tinyint_AS_smallint;
			}
			set
			{
				if ((this._C_tinyint_AS_smallint != value))
				{
					this.OnC_tinyint_AS_smallintChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_smallint = value;
					this.SendPropertyChanged("C_tinyint_AS_smallint");
					this.OnC_tinyint_AS_smallintChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_decimal", Storage="_C_tinyint_AS_decimal", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_tinyint_AS_decimal
		{
			get
			{
				return this._C_tinyint_AS_decimal;
			}
			set
			{
				if ((this._C_tinyint_AS_decimal != value))
				{
					this.OnC_tinyint_AS_decimalChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_decimal = value;
					this.SendPropertyChanged("C_tinyint_AS_decimal");
					this.OnC_tinyint_AS_decimalChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_numeric", Storage="_C_tinyint_AS_numeric", DbType="Decimal(28,4) NOT NULL")]
		public decimal C_tinyint_AS_numeric
		{
			get
			{
				return this._C_tinyint_AS_numeric;
			}
			set
			{
				if ((this._C_tinyint_AS_numeric != value))
				{
					this.OnC_tinyint_AS_numericChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_numeric = value;
					this.SendPropertyChanged("C_tinyint_AS_numeric");
					this.OnC_tinyint_AS_numericChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_real", Storage="_C_tinyint_AS_real", DbType="Real")]
		public System.Nullable<float> C_tinyint_AS_real
		{
			get
			{
				return this._C_tinyint_AS_real;
			}
			set
			{
				if ((this._C_tinyint_AS_real != value))
				{
					this.OnC_tinyint_AS_realChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_real = value;
					this.SendPropertyChanged("C_tinyint_AS_real");
					this.OnC_tinyint_AS_realChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_float", Storage="_C_tinyint_AS_float", DbType="Float NOT NULL")]
		public double C_tinyint_AS_float
		{
			get
			{
				return this._C_tinyint_AS_float;
			}
			set
			{
				if ((this._C_tinyint_AS_float != value))
				{
					this.OnC_tinyint_AS_floatChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_float = value;
					this.SendPropertyChanged("C_tinyint_AS_float");
					this.OnC_tinyint_AS_floatChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_money", Storage="_C_tinyint_AS_money", DbType="Money")]
		public System.Nullable<decimal> C_tinyint_AS_money
		{
			get
			{
				return this._C_tinyint_AS_money;
			}
			set
			{
				if ((this._C_tinyint_AS_money != value))
				{
					this.OnC_tinyint_AS_moneyChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_money = value;
					this.SendPropertyChanged("C_tinyint_AS_money");
					this.OnC_tinyint_AS_moneyChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_smallmoney", Storage="_C_tinyint_AS_smallmoney", DbType="SmallMoney NOT NULL")]
		public decimal C_tinyint_AS_smallmoney
		{
			get
			{
				return this._C_tinyint_AS_smallmoney;
			}
			set
			{
				if ((this._C_tinyint_AS_smallmoney != value))
				{
					this.OnC_tinyint_AS_smallmoneyChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_smallmoney = value;
					this.SendPropertyChanged("C_tinyint_AS_smallmoney");
					this.OnC_tinyint_AS_smallmoneyChanged();
				}
			}
		}
		
		[Column(Name="c_tinyint_AS_bigint", Storage="_C_tinyint_AS_bigint", DbType="BigInt")]
		public System.Nullable<long> C_tinyint_AS_bigint
		{
			get
			{
				return this._C_tinyint_AS_bigint;
			}
			set
			{
				if ((this._C_tinyint_AS_bigint != value))
				{
					this.OnC_tinyint_AS_bigintChanging(value);
					this.SendPropertyChanging();
					this._C_tinyint_AS_bigint = value;
					this.SendPropertyChanged("C_tinyint_AS_bigint");
					this.OnC_tinyint_AS_bigintChanged();
				}
			}
		}
		
		[Column(Name="c_smalldatetime_AS_datetime", Storage="_C_smalldatetime_AS_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime C_smalldatetime_AS_datetime
		{
			get
			{
				return this._C_smalldatetime_AS_datetime;
			}
			set
			{
				if ((this._C_smalldatetime_AS_datetime != value))
				{
					this.OnC_smalldatetime_AS_datetimeChanging(value);
					this.SendPropertyChanging();
					this._C_smalldatetime_AS_datetime = value;
					this.SendPropertyChanged("C_smalldatetime_AS_datetime");
					this.OnC_smalldatetime_AS_datetimeChanged();
				}
			}
		}
		
		[Column(Name="c_varchar_AS_nvarchar", Storage="_C_varchar_AS_nvarchar", DbType="NVarChar(512)")]
		public string C_varchar_AS_nvarchar
		{
			get
			{
				return this._C_varchar_AS_nvarchar;
			}
			set
			{
				if ((this._C_varchar_AS_nvarchar != value))
				{
					this.OnC_varchar_AS_nvarcharChanging(value);
					this.SendPropertyChanging();
					this._C_varchar_AS_nvarchar = value;
					this.SendPropertyChanged("C_varchar_AS_nvarchar");
					this.OnC_varchar_AS_nvarcharChanged();
				}
			}
		}
		
		[Column(Name="c_char_AS_nchar", Storage="_C_char_AS_nchar", DbType="NChar(512) NOT NULL", CanBeNull=false)]
		public string C_char_AS_nchar
		{
			get
			{
				return this._C_char_AS_nchar;
			}
			set
			{
				if ((this._C_char_AS_nchar != value))
				{
					this.OnC_char_AS_ncharChanging(value);
					this.SendPropertyChanging();
					this._C_char_AS_nchar = value;
					this.SendPropertyChanged("C_char_AS_nchar");
					this.OnC_char_AS_ncharChanged();
				}
			}
		}
		
		[Column(Name="c_nvarchar_AS_ntext", Storage="_C_nvarchar_AS_ntext", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string C_nvarchar_AS_ntext
		{
			get
			{
				return this._C_nvarchar_AS_ntext;
			}
			set
			{
				if ((this._C_nvarchar_AS_ntext != value))
				{
					this.OnC_nvarchar_AS_ntextChanging(value);
					this.SendPropertyChanging();
					this._C_nvarchar_AS_ntext = value;
					this.SendPropertyChanged("C_nvarchar_AS_ntext");
					this.OnC_nvarchar_AS_ntextChanged();
				}
			}
		}
		
		[Column(Name="c_bigint_AS_decimal", Storage="_C_bigint_AS_decimal", DbType="Decimal(28,4) NOT NULL")]
		public decimal C_bigint_AS_decimal
		{
			get
			{
				return this._C_bigint_AS_decimal;
			}
			set
			{
				if ((this._C_bigint_AS_decimal != value))
				{
					this.OnC_bigint_AS_decimalChanging(value);
					this.SendPropertyChanging();
					this._C_bigint_AS_decimal = value;
					this.SendPropertyChanged("C_bigint_AS_decimal");
					this.OnC_bigint_AS_decimalChanged();
				}
			}
		}
		
		[Column(Name="c_bigint_AS_numeric", Storage="_C_bigint_AS_numeric", DbType="Decimal(28,4)")]
		public System.Nullable<decimal> C_bigint_AS_numeric
		{
			get
			{
				return this._C_bigint_AS_numeric;
			}
			set
			{
				if ((this._C_bigint_AS_numeric != value))
				{
					this.OnC_bigint_AS_numericChanging(value);
					this.SendPropertyChanging();
					this._C_bigint_AS_numeric = value;
					this.SendPropertyChanged("C_bigint_AS_numeric");
					this.OnC_bigint_AS_numericChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OwnerContactInfos")]
    [Microsoft.OData.Client.KeyAttribute("ContactInfoId")]
	public partial class OwnerContactInfos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactInfoId;
		
		private string _Email;
		
		private string _WorkPhone;
		
		private string _StreetAddress;
		
		private string _City;
		
		private string _State;
		
		private string _MainZip;
		
		private string _ExtendedZip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactInfoIdChanging(int value);
    partial void OnContactInfoIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnMainZipChanging(string value);
    partial void OnMainZipChanged();
    partial void OnExtendedZipChanging(string value);
    partial void OnExtendedZipChanged();
    #endregion
		
		public OwnerContactInfos()
		{
			OnCreated();
		}

        [Column(Storage="_ContactInfoId", DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true)]
        public int ContactInfoId
		{
			get
			{
				return this._ContactInfoId;
			}
			set
			{
				if ((this._ContactInfoId != value))
				{
					this.OnContactInfoIdChanging(value);
					this.SendPropertyChanging();
					this._ContactInfoId = value;
					this.SendPropertyChanged("ContactInfoId");
					this.OnContactInfoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(512)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_WorkPhone", DbType="VarChar(512)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAddress", DbType="VarChar(512)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(512)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(512)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_MainZip", DbType="VarChar(512)")]
		public string MainZip
		{
			get
			{
				return this._MainZip;
			}
			set
			{
				if ((this._MainZip != value))
				{
					this.OnMainZipChanging(value);
					this.SendPropertyChanging();
					this._MainZip = value;
					this.SendPropertyChanged("MainZip");
					this.OnMainZipChanged();
				}
			}
		}
		
		[Column(Storage="_ExtendedZip", DbType="VarChar(512)")]
		public string ExtendedZip
		{
			get
			{
				return this._ExtendedZip;
			}
			set
			{
				if ((this._ExtendedZip != value))
				{
					this.OnExtendedZipChanging(value);
					this.SendPropertyChanging();
					this._ExtendedZip = value;
					this.SendPropertyChanged("ExtendedZip");
					this.OnExtendedZipChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OwnerDetails")]
    [Microsoft.OData.Client.KeyAttribute("DetailId")]
	public partial class OwnerDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private string _HomeAddress1;
		
		private string _HomeAddress2;
		
		private System.Nullable<int> _Level;
		
		private EntitySet<OwnerOwnerDetails> _OwnerOwnerDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnHomeAddress1Changing(string value);
    partial void OnHomeAddress1Changed();
    partial void OnHomeAddress2Changing(string value);
    partial void OnHomeAddress2Changed();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public OwnerDetails()
		{
			this._OwnerOwnerDetails = new EntitySet<OwnerOwnerDetails>(new Action<OwnerOwnerDetails>(this.attach_OwnerOwnerDetails), new Action<OwnerOwnerDetails>(this.detach_OwnerOwnerDetails));
			OnCreated();
		}
        
		[Column(Storage="_DetailId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_HomeAddress1", DbType="VarChar(512)")]
		public string HomeAddress1
		{
			get
			{
				return this._HomeAddress1;
			}
			set
			{
				if ((this._HomeAddress1 != value))
				{
					this.OnHomeAddress1Changing(value);
					this.SendPropertyChanging();
					this._HomeAddress1 = value;
					this.SendPropertyChanged("HomeAddress1");
					this.OnHomeAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_HomeAddress2", DbType="VarChar(512)")]
		public string HomeAddress2
		{
			get
			{
				return this._HomeAddress2;
			}
			set
			{
				if ((this._HomeAddress2 != value))
				{
					this.OnHomeAddress2Changing(value);
					this.SendPropertyChanging();
					this._HomeAddress2 = value;
					this.SendPropertyChanged("HomeAddress2");
					this.OnHomeAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Association(Name="FK_OwnerDetails_OwnerOwnerDetails", Storage="_OwnerOwnerDetails", OtherKey="DetailId", DeleteRule="NO ACTION")]
		public EntitySet<OwnerOwnerDetails> OwnerOwnerDetails
		{
			get
			{
				return this._OwnerOwnerDetails;
			}
			set
			{
				this._OwnerOwnerDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerOwnerDetails(OwnerOwnerDetails entity)
		{
			this.SendPropertyChanging();
			entity.OwnerDetails = this;
		}
		
		private void detach_OwnerOwnerDetails(OwnerOwnerDetails entity)
		{
			this.SendPropertyChanging();
			entity.OwnerDetails = null;
		}
	}
	
	[Table(Name="dbo.OwnerOwnerDetails")]
    [Microsoft.OData.Client.KeyAttribute("OwnerId")]
	public partial class OwnerOwnerDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerId;
		
		private int _DetailId;
		
		private EntityRef<OwnerDetails> _OwnerDetails;
		
		private EntityRef<Owners> _Owners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    #endregion
		
		public OwnerOwnerDetails()
		{
			this._OwnerDetails = default(EntityRef<OwnerDetails>);
			this._Owners = default(EntityRef<Owners>);
			OnCreated();
		}
        
		[Column(Storage="_OwnerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailId", DbType="Int NOT NULL")]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					if (this._OwnerDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[Association(Name="FK_OwnerDetails_OwnerOwnerDetails", Storage="_OwnerDetails", ThisKey="DetailId", IsForeignKey=true)]
		public OwnerDetails OwnerDetails
		{
			get
			{
				return this._OwnerDetails.Entity;
			}
			set
			{
				OwnerDetails previousValue = this._OwnerDetails.Entity;
				if (((previousValue != value) 
							|| (this._OwnerDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerDetails.Entity = null;
						previousValue.OwnerOwnerDetails.Remove(this);
					}
					this._OwnerDetails.Entity = value;
					if ((value != null))
					{
						value.OwnerOwnerDetails.Add(this);
						this._DetailId = value.DetailId;
					}
					else
					{
						this._DetailId = default(int);
					}
					this.SendPropertyChanged("OwnerDetails");
				}
			}
		}
		
		[Association(Name="FK_Owners_OwnerOwnerDetails", Storage="_Owners", ThisKey="OwnerId", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.OwnerOwnerDetails = null;
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.OwnerOwnerDetails = this;
						this._OwnerId = value.Id;
					}
					else
					{
						this._OwnerId = default(int);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Owners")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Owners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private System.Nullable<int> _LastName;
		
		private string _Alias;
		
		private EntitySet<BugsDefectTracking> _BugsDefectTracking;
		
		private EntitySet<BugsDefectTracking> _Bugs_ResolvedByOwners;
		
		private EntitySet<BugsProjectTracking> _BugsProjectTracking;
		
		private EntitySet<BugsProjectTracking> _BugsProject_ResolvedByOwners;
		
		private EntityRef<OwnerOwnerDetails> _OwnerOwnerDetails;
		
		private EntitySet<RunOwners> _RunOwners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(System.Nullable<int> value);
    partial void OnLastNameChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    #endregion
		
		public Owners()
		{
			this._BugsDefectTracking = new EntitySet<BugsDefectTracking>(new Action<BugsDefectTracking>(this.attach_BugsDefectTracking), new Action<BugsDefectTracking>(this.detach_BugsDefectTracking));
			this._Bugs_ResolvedByOwners = new EntitySet<BugsDefectTracking>(new Action<BugsDefectTracking>(this.attach_Bugs_ResolvedByOwners), new Action<BugsDefectTracking>(this.detach_Bugs_ResolvedByOwners));
			this._BugsProjectTracking = new EntitySet<BugsProjectTracking>(new Action<BugsProjectTracking>(this.attach_BugsProjectTracking), new Action<BugsProjectTracking>(this.detach_BugsProjectTracking));
			this._BugsProject_ResolvedByOwners = new EntitySet<BugsProjectTracking>(new Action<BugsProjectTracking>(this.attach_BugsProject_ResolvedByOwners), new Action<BugsProjectTracking>(this.detach_BugsProject_ResolvedByOwners));
			this._OwnerOwnerDetails = default(EntityRef<OwnerOwnerDetails>);
			this._RunOwners = new EntitySet<RunOwners>(new Action<RunOwners>(this.attach_RunOwners), new Action<RunOwners>(this.detach_RunOwners));
			OnCreated();
		}
        
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(512)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="Int")]
		public System.Nullable<int> LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Association(Name="FK_Bugs_AssignedToOwners", Storage="_BugsDefectTracking", OtherKey="AssignedToId", DeleteRule="NO ACTION")]
		public EntitySet<BugsDefectTracking> BugsDefectTracking
		{
			get
			{
				return this._BugsDefectTracking;
			}
			set
			{
				this._BugsDefectTracking.Assign(value);
			}
		}
		
		[Association(Name="FK_Bugs_ResolvedByOwners", Storage="_Bugs_ResolvedByOwners", OtherKey="ResolvedById", DeleteRule="NO ACTION")]
		public EntitySet<BugsDefectTracking> Bugs_ResolvedByOwners
		{
			get
			{
				return this._Bugs_ResolvedByOwners;
			}
			set
			{
				this._Bugs_ResolvedByOwners.Assign(value);
			}
		}
		
		[Association(Name="FK_BugsProject_AssignedToOwners", Storage="_BugsProjectTracking", OtherKey="AssignedToId", DeleteRule="NO ACTION")]
		public EntitySet<BugsProjectTracking> BugsProjectTracking
		{
			get
			{
				return this._BugsProjectTracking;
			}
			set
			{
				this._BugsProjectTracking.Assign(value);
			}
		}
		
		[Association(Name="FK_BugsProject_ResolvedByOwners", Storage="_BugsProject_ResolvedByOwners", OtherKey="ResolvedById", DeleteRule="NO ACTION")]
		public EntitySet<BugsProjectTracking> BugsProject_ResolvedByOwners
		{
			get
			{
				return this._BugsProject_ResolvedByOwners;
			}
			set
			{
				this._BugsProject_ResolvedByOwners.Assign(value);
			}
		}
		
		[Association(Name="FK_Owners_OwnerOwnerDetails", Storage="_OwnerOwnerDetails", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public OwnerOwnerDetails OwnerOwnerDetails
		{
			get
			{
				return this._OwnerOwnerDetails.Entity;
			}
			set
			{
				OwnerOwnerDetails previousValue = this._OwnerOwnerDetails.Entity;
				if (((previousValue != value) 
							|| (this._OwnerOwnerDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerOwnerDetails.Entity = null;
						previousValue.Owners = null;
					}
					this._OwnerOwnerDetails.Entity = value;
					if ((value != null))
					{
						value.Owners = this;
					}
					this.SendPropertyChanged("OwnerOwnerDetails");
				}
			}
		}
		
		[Association(Name="FK_RunOwners_Owners", Storage="_RunOwners", OtherKey="OwnerId", DeleteRule="NO ACTION")]
		public EntitySet<RunOwners> RunOwners
		{
			get
			{
				return this._RunOwners;
			}
			set
			{
				this._RunOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BugsDefectTracking(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Owners = this;
		}
		
		private void detach_BugsDefectTracking(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Owners = null;
		}
		
		private void attach_Bugs_ResolvedByOwners(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.ResolvedBy = this;
		}
		
		private void detach_Bugs_ResolvedByOwners(BugsDefectTracking entity)
		{
			this.SendPropertyChanging();
			entity.ResolvedBy = null;
		}
		
		private void attach_BugsProjectTracking(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Owners = this;
		}
		
		private void detach_BugsProjectTracking(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.Owners = null;
		}
		
		private void attach_BugsProject_ResolvedByOwners(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.ResolvedBy = this;
		}
		
		private void detach_BugsProject_ResolvedByOwners(BugsProjectTracking entity)
		{
			this.SendPropertyChanging();
			entity.ResolvedBy = null;
		}
		
		private void attach_RunOwners(RunOwners entity)
		{
			this.SendPropertyChanging();
			entity.Owners = this;
		}
		
		private void detach_RunOwners(RunOwners entity)
		{
			this.SendPropertyChanging();
			entity.Owners = null;
		}
	}
	
	[Table(Name="dbo.Projects")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<DeploymentScenarios> _DeploymentScenarios;
		
		private EntitySet<TestScenarios> _TestScenarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Projects()
		{
			this._DeploymentScenarios = new EntitySet<DeploymentScenarios>(new Action<DeploymentScenarios>(this.attach_DeploymentScenarios), new Action<DeploymentScenarios>(this.detach_DeploymentScenarios));
			this._TestScenarios = new EntitySet<TestScenarios>(new Action<TestScenarios>(this.attach_TestScenarios), new Action<TestScenarios>(this.detach_TestScenarios));
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_DeploymentScenarios_Projects", Storage="_DeploymentScenarios", OtherKey="ProjectId", DeleteRule="NO ACTION")]
		public EntitySet<DeploymentScenarios> DeploymentScenarios
		{
			get
			{
				return this._DeploymentScenarios;
			}
			set
			{
				this._DeploymentScenarios.Assign(value);
			}
		}
		
		[Association(Name="FK_TestScenarios_Projects", Storage="_TestScenarios", OtherKey="ProjectId", DeleteRule="NO ACTION")]
		public EntitySet<TestScenarios> TestScenarios
		{
			get
			{
				return this._TestScenarios;
			}
			set
			{
				this._TestScenarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeploymentScenarios(DeploymentScenarios entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_DeploymentScenarios(DeploymentScenarios entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_TestScenarios(TestScenarios entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_TestScenarios(TestScenarios entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[Table(Name="dbo.RunOwners")]
    [Microsoft.OData.Client.KeyAttribute("RunId")]
	public partial class RunOwners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RunId;
		
		private int _OwnerId;
		
		private EntityRef<Owners> _Owners;
		
		private EntityRef<Runs> _Runs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRunIdChanging(int value);
    partial void OnRunIdChanged();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    #endregion
		
		public RunOwners()
		{
			this._Owners = default(EntityRef<Owners>);
			this._Runs = default(EntityRef<Runs>);
			OnCreated();
		}

		[Column(Storage="_RunId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RunId
		{
			get
			{
				return this._RunId;
			}
			set
			{
				if ((this._RunId != value))
				{
					if (this._Runs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunIdChanging(value);
					this.SendPropertyChanging();
					this._RunId = value;
					this.SendPropertyChanged("RunId");
					this.OnRunIdChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerId", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[Association(Name="FK_RunOwners_Owners", Storage="_Owners", ThisKey="OwnerId", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.RunOwners.Remove(this);
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.RunOwners.Add(this);
						this._OwnerId = value.Id;
					}
					else
					{
						this._OwnerId = default(int);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		[Association(Name="FK_RunOwners_Runs", Storage="_Runs", ThisKey="RunId", IsForeignKey=true)]
		public Runs Runs
		{
			get
			{
				return this._Runs.Entity;
			}
			set
			{
				Runs previousValue = this._Runs.Entity;
				if (((previousValue != value) 
							|| (this._Runs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Runs.Entity = null;
						previousValue.RunOwners = null;
					}
					this._Runs.Entity = value;
					if ((value != null))
					{
						value.RunOwners = this;
						this._RunId = value.Id;
					}
					else
					{
						this._RunId = default(int);
					}
					this.SendPropertyChanged("Runs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Runs")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Runs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Purpose;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Completed;
		
		private string _StartedBy;
		
		private System.Nullable<System.DateTime> _RequestStarted;
		
		private System.Nullable<System.DateTime> _RequestCompleted;
		
		private string _RequestStartedBy;
		
		private EntityRef<RunOwners> _RunOwners;
		
		private EntitySet<Tasks> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPurposeChanging(System.Nullable<int> value);
    partial void OnPurposeChanged();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedChanged();
    partial void OnStartedByChanging(string value);
    partial void OnStartedByChanged();
    partial void OnRequestStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestStartedChanged();
    partial void OnRequestCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestCompletedChanged();
    partial void OnRequestStartedByChanging(string value);
    partial void OnRequestStartedByChanged();
    #endregion
		
		public Runs()
		{
			this._RunOwners = default(EntityRef<RunOwners>);
			this._Tasks = new EntitySet<Tasks>(new Action<Tasks>(this.attach_Tasks), new Action<Tasks>(this.detach_Tasks));
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Purpose", DbType="Int")]
		public System.Nullable<int> Purpose
		{
			get
			{
				return this._Purpose;
			}
			set
			{
				if ((this._Purpose != value))
				{
					this.OnPurposeChanging(value);
					this.SendPropertyChanging();
					this._Purpose = value;
					this.SendPropertyChanged("Purpose");
					this.OnPurposeChanged();
				}
			}
		}
		
		[Column(Storage="_Started", DbType="DateTime")]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[Column(Storage="_Completed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_StartedBy", DbType="VarChar(512)")]
		public string StartedBy
		{
			get
			{
				return this._StartedBy;
			}
			set
			{
				if ((this._StartedBy != value))
				{
					this.OnStartedByChanging(value);
					this.SendPropertyChanging();
					this._StartedBy = value;
					this.SendPropertyChanged("StartedBy");
					this.OnStartedByChanged();
				}
			}
		}
		
		[Column(Storage="_RequestStarted", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestStarted
		{
			get
			{
				return this._RequestStarted;
			}
			set
			{
				if ((this._RequestStarted != value))
				{
					this.OnRequestStartedChanging(value);
					this.SendPropertyChanging();
					this._RequestStarted = value;
					this.SendPropertyChanged("RequestStarted");
					this.OnRequestStartedChanged();
				}
			}
		}
		
		[Column(Storage="_RequestCompleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestCompleted
		{
			get
			{
				return this._RequestCompleted;
			}
			set
			{
				if ((this._RequestCompleted != value))
				{
					this.OnRequestCompletedChanging(value);
					this.SendPropertyChanging();
					this._RequestCompleted = value;
					this.SendPropertyChanged("RequestCompleted");
					this.OnRequestCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_RequestStartedBy", DbType="VarChar(512)")]
		public string RequestStartedBy
		{
			get
			{
				return this._RequestStartedBy;
			}
			set
			{
				if ((this._RequestStartedBy != value))
				{
					this.OnRequestStartedByChanging(value);
					this.SendPropertyChanging();
					this._RequestStartedBy = value;
					this.SendPropertyChanged("RequestStartedBy");
					this.OnRequestStartedByChanged();
				}
			}
		}
		
		[Association(Name="FK_RunOwners_Runs", Storage="_RunOwners", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public RunOwners RunOwners
		{
			get
			{
				return this._RunOwners.Entity;
			}
			set
			{
				RunOwners previousValue = this._RunOwners.Entity;
				if (((previousValue != value) 
							|| (this._RunOwners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RunOwners.Entity = null;
						previousValue.Runs = null;
					}
					this._RunOwners.Entity = value;
					if ((value != null))
					{
						value.Runs = this;
					}
					this.SendPropertyChanged("RunOwners");
				}
			}
		}
		
		[Association(Name="FK_Tasks_Run", Storage="_Tasks", OtherKey="RunId", DeleteRule="NO ACTION")]
		public EntitySet<Tasks> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Runs = this;
		}
		
		private void detach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Runs = null;
		}
	}
	
	[Table(Name="dbo.TaskInvestigates")]
    [Microsoft.OData.Client.KeyAttribute("TaskId")]
	public partial class TaskInvestigates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private System.Nullable<long> _Investigates;
		
		private System.Nullable<long> _Improvements;
		
		private EntityRef<Tasks> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnInvestigatesChanging(System.Nullable<long> value);
    partial void OnInvestigatesChanged();
    partial void OnImprovementsChanging(System.Nullable<long> value);
    partial void OnImprovementsChanged();
    #endregion
		
		public TaskInvestigates()
		{
			this._Tasks = default(EntityRef<Tasks>);
			OnCreated();
		}

		[Column(Storage="_TaskId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_Investigates", DbType="BigInt")]
		public System.Nullable<long> Investigates
		{
			get
			{
				return this._Investigates;
			}
			set
			{
				if ((this._Investigates != value))
				{
					this.OnInvestigatesChanging(value);
					this.SendPropertyChanging();
					this._Investigates = value;
					this.SendPropertyChanged("Investigates");
					this.OnInvestigatesChanged();
				}
			}
		}
		
		[Column(Storage="_Improvements", DbType="BigInt")]
		public System.Nullable<long> Improvements
		{
			get
			{
				return this._Improvements;
			}
			set
			{
				if ((this._Improvements != value))
				{
					this.OnImprovementsChanging(value);
					this.SendPropertyChanging();
					this._Improvements = value;
					this.SendPropertyChanged("Improvements");
					this.OnImprovementsChanged();
				}
			}
		}
		
		[Association(Name="FK_TaskInvestigate_Tasks", Storage="_Tasks", ThisKey="TaskId", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.TaskInvestigates = null;
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.TaskInvestigates = this;
						this._TaskId = value.Id;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TaskResults")]
    [Microsoft.OData.Client.KeyAttribute("TaskId")]
	public partial class TaskResults : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private System.Nullable<long> _Passed;
		
		private System.Nullable<long> _Failed;
		
		private EntityRef<Tasks> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnPassedChanging(System.Nullable<long> value);
    partial void OnPassedChanged();
    partial void OnFailedChanging(System.Nullable<long> value);
    partial void OnFailedChanged();
    #endregion
		
		public TaskResults()
		{
			this._Tasks = default(EntityRef<Tasks>);
			OnCreated();
		}

		[Column(Storage="_TaskId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_Passed", DbType="BigInt")]
		public System.Nullable<long> Passed
		{
			get
			{
				return this._Passed;
			}
			set
			{
				if ((this._Passed != value))
				{
					this.OnPassedChanging(value);
					this.SendPropertyChanging();
					this._Passed = value;
					this.SendPropertyChanged("Passed");
					this.OnPassedChanged();
				}
			}
		}
		
		[Column(Storage="_Failed", DbType="BigInt")]
		public System.Nullable<long> Failed
		{
			get
			{
				return this._Failed;
			}
			set
			{
				if ((this._Failed != value))
				{
					this.OnFailedChanging(value);
					this.SendPropertyChanging();
					this._Failed = value;
					this.SendPropertyChanged("Failed");
					this.OnFailedChanged();
				}
			}
		}
		
		[Association(Name="FK_TaskResults_Tasks", Storage="_Tasks", ThisKey="TaskId", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.TaskResults = null;
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.TaskResults = this;
						this._TaskId = value.Id;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tasks")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ConfigId;
		
		private System.Nullable<bool> _Deleted;
		
		private int _RunId;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Completed;
		
		private string _StartedBy;
		
		private EntityRef<TaskInvestigates> _TaskInvestigates;
		
		private EntityRef<TaskResults> _TaskResults;
		
		private EntityRef<Runs> _Runs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConfigIdChanging(System.Nullable<int> value);
    partial void OnConfigIdChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnRunIdChanging(int value);
    partial void OnRunIdChanged();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedChanged();
    partial void OnStartedByChanging(string value);
    partial void OnStartedByChanged();
    #endregion
		
		public Tasks()
		{
			this._TaskInvestigates = default(EntityRef<TaskInvestigates>);
			this._TaskResults = default(EntityRef<TaskResults>);
			this._Runs = default(EntityRef<Runs>);
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigId", DbType="Int")]
		public System.Nullable<int> ConfigId
		{
			get
			{
				return this._ConfigId;
			}
			set
			{
				if ((this._ConfigId != value))
				{
					this.OnConfigIdChanging(value);
					this.SendPropertyChanging();
					this._ConfigId = value;
					this.SendPropertyChanged("ConfigId");
					this.OnConfigIdChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_RunId", DbType="Int NOT NULL")]
		public int RunId
		{
			get
			{
				return this._RunId;
			}
			set
			{
				if ((this._RunId != value))
				{
					if (this._Runs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunIdChanging(value);
					this.SendPropertyChanging();
					this._RunId = value;
					this.SendPropertyChanged("RunId");
					this.OnRunIdChanged();
				}
			}
		}
		
		[Column(Storage="_Started", DbType="DateTime")]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[Column(Storage="_Completed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_StartedBy", DbType="VarChar(512)")]
		public string StartedBy
		{
			get
			{
				return this._StartedBy;
			}
			set
			{
				if ((this._StartedBy != value))
				{
					this.OnStartedByChanging(value);
					this.SendPropertyChanging();
					this._StartedBy = value;
					this.SendPropertyChanged("StartedBy");
					this.OnStartedByChanged();
				}
			}
		}
		
		[Association(Name="FK_TaskInvestigate_Tasks", Storage="_TaskInvestigates", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public TaskInvestigates TaskInvestigates
		{
			get
			{
				return this._TaskInvestigates.Entity;
			}
			set
			{
				TaskInvestigates previousValue = this._TaskInvestigates.Entity;
				if (((previousValue != value) 
							|| (this._TaskInvestigates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskInvestigates.Entity = null;
						previousValue.Tasks = null;
					}
					this._TaskInvestigates.Entity = value;
					if ((value != null))
					{
						value.Tasks = this;
					}
					this.SendPropertyChanged("TaskInvestigates");
				}
			}
		}
		
		[Association(Name="FK_TaskResults_Tasks", Storage="_TaskResults", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public TaskResults TaskResults
		{
			get
			{
				return this._TaskResults.Entity;
			}
			set
			{
				TaskResults previousValue = this._TaskResults.Entity;
				if (((previousValue != value) 
							|| (this._TaskResults.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskResults.Entity = null;
						previousValue.Tasks = null;
					}
					this._TaskResults.Entity = value;
					if ((value != null))
					{
						value.Tasks = this;
					}
					this.SendPropertyChanged("TaskResults");
				}
			}
		}
		
		[Association(Name="FK_Tasks_Run", Storage="_Runs", ThisKey="RunId", IsForeignKey=true)]
		public Runs Runs
		{
			get
			{
				return this._Runs.Entity;
			}
			set
			{
				Runs previousValue = this._Runs.Entity;
				if (((previousValue != value) 
							|| (this._Runs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Runs.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Runs.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._RunId = value.Id;
					}
					else
					{
						this._RunId = default(int);
					}
					this.SendPropertyChanged("Runs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Testers")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class Testers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Testers()
		{
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TestScenarios")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
	public partial class TestScenarios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ProjectId;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProjectIdChanging(System.Nullable<int> value);
    partial void OnProjectIdChanged();
    #endregion
		
		public TestScenarios()
		{
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}

		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectId", DbType="Int")]
		public System.Nullable<int> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[Association(Name="FK_TestScenarios_Projects", Storage="_Projects", ThisKey="ProjectId", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.TestScenarios.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.TestScenarios.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

    [Table(Name = "dbo.ThirteenNavigations")]
    [Microsoft.OData.Client.KeyAttribute("Id")]
    public partial class ThirteenNavigations : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private System.Nullable<long> _BigInt_Id;

        private bool _Bit_Id;

        private System.Nullable<System.DateTime> _DateTime_Id;

        private System.Nullable<decimal> _Decimal_Id;

        private System.Nullable<double> _Float_Id;

        private System.Nullable<decimal> _Money_Id;

        private System.Nullable<decimal> _Numeric_Id;

        private System.Nullable<float> _Real_Id;

        private System.Nullable<System.DateTime> _SmallDateTime_Id;

        private System.Nullable<byte> _TinyInt_Id;

        private System.Nullable<System.Guid> _GUID_Id;

        private string _Varchar_Id;

        private System.Nullable<decimal> _SmallMoney_Id;

        private string _DataColumn;

        private EntityRef<DataKey_BigInt> _DataKey_BigInt;

        private EntityRef<DataKey_Bit> _DataKey_Bit;

        private EntityRef<DataKey_DateTime> _DataKey_DateTime;

        private EntityRef<DataKey_Decimal> _DataKey_Decimal;

        private EntityRef<DataKey_Float> _DataKey_Float;

        private EntityRef<DataKey_GUID> _DataKey_GUID;

        private EntityRef<DataKey_Money> _DataKey_Money;

        private EntityRef<DataKey_Numeric> _DataKey_Numeric;

        private EntityRef<DataKey_Real> _DataKey_Real;

        private EntityRef<DataKey_SmallDateTime> _DataKey_SmallDateTime;

        private EntityRef<DataKey_SmallMoney> _DataKey_SmallMoney;

        private EntityRef<DataKey_TinyInt> _DataKey_TinyInt;

        private EntityRef<DataKey_VarChar50> _DataKey_VarChar50;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnBigInt_IdChanging(System.Nullable<long> value);
        partial void OnBigInt_IdChanged();
        partial void OnBit_IdChanging(bool value);
        partial void OnBit_IdChanged();
        partial void OnDateTime_IdChanging(System.Nullable<System.DateTime> value);
        partial void OnDateTime_IdChanged();
        partial void OnDecimal_IdChanging(System.Nullable<decimal> value);
        partial void OnDecimal_IdChanged();
        partial void OnFloat_IdChanging(System.Nullable<double> value);
        partial void OnFloat_IdChanged();
        partial void OnMoney_IdChanging(System.Nullable<decimal> value);
        partial void OnMoney_IdChanged();
        partial void OnNumeric_IdChanging(System.Nullable<decimal> value);
        partial void OnNumeric_IdChanged();
        partial void OnReal_IdChanging(System.Nullable<float> value);
        partial void OnReal_IdChanged();
        partial void OnSmallDateTime_IdChanging(System.Nullable<System.DateTime> value);
        partial void OnSmallDateTime_IdChanged();
        partial void OnTinyInt_IdChanging(System.Nullable<byte> value);
        partial void OnTinyInt_IdChanged();
        partial void OnGUID_IdChanging(System.Nullable<System.Guid> value);
        partial void OnGUID_IdChanged();
        partial void OnVarchar_IdChanging(string value);
        partial void OnVarchar_IdChanged();
        partial void OnSmallMoney_IdChanging(System.Nullable<decimal> value);
        partial void OnSmallMoney_IdChanged();
        partial void OnDataColumnChanging(string value);
        partial void OnDataColumnChanged();
        #endregion

        public ThirteenNavigations()
        {
            this._DataKey_BigInt = default(EntityRef<DataKey_BigInt>);
            this._DataKey_Bit = default(EntityRef<DataKey_Bit>);
            this._DataKey_DateTime = default(EntityRef<DataKey_DateTime>);
            this._DataKey_Decimal = default(EntityRef<DataKey_Decimal>);
            this._DataKey_Float = default(EntityRef<DataKey_Float>);
            this._DataKey_GUID = default(EntityRef<DataKey_GUID>);
            this._DataKey_Money = default(EntityRef<DataKey_Money>);
            this._DataKey_Numeric = default(EntityRef<DataKey_Numeric>);
            this._DataKey_Real = default(EntityRef<DataKey_Real>);
            this._DataKey_SmallDateTime = default(EntityRef<DataKey_SmallDateTime>);
            this._DataKey_SmallMoney = default(EntityRef<DataKey_SmallMoney>);
            this._DataKey_TinyInt = default(EntityRef<DataKey_TinyInt>);
            this._DataKey_VarChar50 = default(EntityRef<DataKey_VarChar50>);
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_BigInt_Id", DbType = "BigInt")]
        public System.Nullable<long> BigInt_Id
        {
            get
            {
                return this._BigInt_Id;
            }
            set
            {
                if ((this._BigInt_Id != value))
                {
                    if (this._DataKey_BigInt.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBigInt_IdChanging(value);
                    this.SendPropertyChanging();
                    this._BigInt_Id = value;
                    this.SendPropertyChanged("BigInt_Id");
                    this.OnBigInt_IdChanged();
                }
            }
        }

        [Column(Storage = "_Bit_Id", DbType = "Bit NOT NULL")]
        public bool Bit_Id
        {
            get
            {
                return this._Bit_Id;
            }
            set
            {
                if ((this._Bit_Id != value))
                {
                    if (this._DataKey_Bit.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBit_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Bit_Id = value;
                    this.SendPropertyChanged("Bit_Id");
                    this.OnBit_IdChanged();
                }
            }
        }

        [Column(Storage = "_DateTime_Id", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateTime_Id
        {
            get
            {
                return this._DateTime_Id;
            }
            set
            {
                if ((this._DateTime_Id != value))
                {
                    if (this._DataKey_DateTime.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDateTime_IdChanging(value);
                    this.SendPropertyChanging();
                    this._DateTime_Id = value;
                    this.SendPropertyChanged("DateTime_Id");
                    this.OnDateTime_IdChanged();
                }
            }
        }

        [Column(Storage = "_Decimal_Id", DbType = "Decimal(16,2)")]
        public System.Nullable<decimal> Decimal_Id
        {
            get
            {
                return this._Decimal_Id;
            }
            set
            {
                if ((this._Decimal_Id != value))
                {
                    if (this._DataKey_Decimal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDecimal_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Decimal_Id = value;
                    this.SendPropertyChanged("Decimal_Id");
                    this.OnDecimal_IdChanged();
                }
            }
        }

        [Column(Storage = "_Float_Id", DbType = "Float")]
        public System.Nullable<double> Float_Id
        {
            get
            {
                return this._Float_Id;
            }
            set
            {
                if ((this._Float_Id != value))
                {
                    if (this._DataKey_Float.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFloat_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Float_Id = value;
                    this.SendPropertyChanged("Float_Id");
                    this.OnFloat_IdChanged();
                }
            }
        }

        [Column(Storage = "_Money_Id", DbType = "Money")]
        public System.Nullable<decimal> Money_Id
        {
            get
            {
                return this._Money_Id;
            }
            set
            {
                if ((this._Money_Id != value))
                {
                    if (this._DataKey_Money.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMoney_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Money_Id = value;
                    this.SendPropertyChanged("Money_Id");
                    this.OnMoney_IdChanged();
                }
            }
        }

        [Column(Storage = "_Numeric_Id", DbType = "Decimal(18,0)")]
        public System.Nullable<decimal> Numeric_Id
        {
            get
            {
                return this._Numeric_Id;
            }
            set
            {
                if ((this._Numeric_Id != value))
                {
                    if (this._DataKey_Numeric.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNumeric_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Numeric_Id = value;
                    this.SendPropertyChanged("Numeric_Id");
                    this.OnNumeric_IdChanged();
                }
            }
        }

        [Column(Storage = "_Real_Id", DbType = "Real")]
        public System.Nullable<float> Real_Id
        {
            get
            {
                return this._Real_Id;
            }
            set
            {
                if ((this._Real_Id != value))
                {
                    if (this._DataKey_Real.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnReal_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Real_Id = value;
                    this.SendPropertyChanged("Real_Id");
                    this.OnReal_IdChanged();
                }
            }
        }

        [Column(Storage = "_SmallDateTime_Id", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> SmallDateTime_Id
        {
            get
            {
                return this._SmallDateTime_Id;
            }
            set
            {
                if ((this._SmallDateTime_Id != value))
                {
                    if (this._DataKey_SmallDateTime.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSmallDateTime_IdChanging(value);
                    this.SendPropertyChanging();
                    this._SmallDateTime_Id = value;
                    this.SendPropertyChanged("SmallDateTime_Id");
                    this.OnSmallDateTime_IdChanged();
                }
            }
        }

        [Column(Storage = "_TinyInt_Id", DbType = "TinyInt")]
        public System.Nullable<byte> TinyInt_Id
        {
            get
            {
                return this._TinyInt_Id;
            }
            set
            {
                if ((this._TinyInt_Id != value))
                {
                    if (this._DataKey_TinyInt.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnTinyInt_IdChanging(value);
                    this.SendPropertyChanging();
                    this._TinyInt_Id = value;
                    this.SendPropertyChanged("TinyInt_Id");
                    this.OnTinyInt_IdChanged();
                }
            }
        }

        [Column(Storage = "_GUID_Id", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> GUID_Id
        {
            get
            {
                return this._GUID_Id;
            }
            set
            {
                if ((this._GUID_Id != value))
                {
                    if (this._DataKey_GUID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnGUID_IdChanging(value);
                    this.SendPropertyChanging();
                    this._GUID_Id = value;
                    this.SendPropertyChanged("GUID_Id");
                    this.OnGUID_IdChanged();
                }
            }
        }

        [Column(Storage = "_Varchar_Id", DbType = "VarChar(50)")]
        public string Varchar_Id
        {
            get
            {
                return this._Varchar_Id;
            }
            set
            {
                if ((this._Varchar_Id != value))
                {
                    if (this._DataKey_VarChar50.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnVarchar_IdChanging(value);
                    this.SendPropertyChanging();
                    this._Varchar_Id = value;
                    this.SendPropertyChanged("Varchar_Id");
                    this.OnVarchar_IdChanged();
                }
            }
        }

        [Column(Storage = "_SmallMoney_Id", DbType = "SmallMoney")]
        public System.Nullable<decimal> SmallMoney_Id
        {
            get
            {
                return this._SmallMoney_Id;
            }
            set
            {
                if ((this._SmallMoney_Id != value))
                {
                    if (this._DataKey_SmallMoney.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSmallMoney_IdChanging(value);
                    this.SendPropertyChanging();
                    this._SmallMoney_Id = value;
                    this.SendPropertyChanged("SmallMoney_Id");
                    this.OnSmallMoney_IdChanged();
                }
            }
        }

        [Column(Storage = "_DataColumn", DbType = "NChar(10)")]
        public string DataColumn
        {
            get
            {
                return this._DataColumn;
            }
            set
            {
                if ((this._DataColumn != value))
                {
                    this.OnDataColumnChanging(value);
                    this.SendPropertyChanging();
                    this._DataColumn = value;
                    this.SendPropertyChanged("DataColumn");
                    this.OnDataColumnChanged();
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_BigInt", Storage = "_DataKey_BigInt", ThisKey = "BigInt_Id", IsForeignKey = true)]
        public DataKey_BigInt DataKey_BigInt
        {
            get
            {
                return this._DataKey_BigInt.Entity;
            }
            set
            {
                DataKey_BigInt previousValue = this._DataKey_BigInt.Entity;
                if (((previousValue != value)
                            || (this._DataKey_BigInt.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_BigInt.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_BigInt.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._BigInt_Id = value.Id;
                    }
                    else
                    {
                        this._BigInt_Id = default(Nullable<long>);
                    }
                    this.SendPropertyChanged("DataKey_BigInt");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Bit", Storage = "_DataKey_Bit", ThisKey = "Bit_Id", IsForeignKey = true)]
        public DataKey_Bit DataKey_Bit
        {
            get
            {
                return this._DataKey_Bit.Entity;
            }
            set
            {
                DataKey_Bit previousValue = this._DataKey_Bit.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Bit.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Bit.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Bit.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Bit_Id = value.Id;
                    }
                    else
                    {
                        this._Bit_Id = default(bool);
                    }
                    this.SendPropertyChanged("DataKey_Bit");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_DateTime", Storage = "_DataKey_DateTime", ThisKey = "DateTime_Id", IsForeignKey = true)]
        public DataKey_DateTime DataKey_DateTime
        {
            get
            {
                return this._DataKey_DateTime.Entity;
            }
            set
            {
                DataKey_DateTime previousValue = this._DataKey_DateTime.Entity;
                if (((previousValue != value)
                            || (this._DataKey_DateTime.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_DateTime.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_DateTime.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._DateTime_Id = value.Id;
                    }
                    else
                    {
                        this._DateTime_Id = default(Nullable<System.DateTime>);
                    }
                    this.SendPropertyChanged("DataKey_DateTime");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Decimal", Storage = "_DataKey_Decimal", ThisKey = "Decimal_Id", IsForeignKey = true)]
        public DataKey_Decimal DataKey_Decimal
        {
            get
            {
                return this._DataKey_Decimal.Entity;
            }
            set
            {
                DataKey_Decimal previousValue = this._DataKey_Decimal.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Decimal.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Decimal.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Decimal.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Decimal_Id = value.Id;
                    }
                    else
                    {
                        this._Decimal_Id = default(Nullable<decimal>);
                    }
                    this.SendPropertyChanged("DataKey_Decimal");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Float", Storage = "_DataKey_Float", ThisKey = "Float_Id", IsForeignKey = true)]
        public DataKey_Float DataKey_Float
        {
            get
            {
                return this._DataKey_Float.Entity;
            }
            set
            {
                DataKey_Float previousValue = this._DataKey_Float.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Float.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Float.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Float.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Float_Id = value.Id;
                    }
                    else
                    {
                        this._Float_Id = default(Nullable<double>);
                    }
                    this.SendPropertyChanged("DataKey_Float");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_GUID", Storage = "_DataKey_GUID", ThisKey = "GUID_Id", IsForeignKey = true)]
        public DataKey_GUID DataKey_GUID
        {
            get
            {
                return this._DataKey_GUID.Entity;
            }
            set
            {
                DataKey_GUID previousValue = this._DataKey_GUID.Entity;
                if (((previousValue != value)
                            || (this._DataKey_GUID.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_GUID.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_GUID.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._GUID_Id = value.Id;
                    }
                    else
                    {
                        this._GUID_Id = default(Nullable<System.Guid>);
                    }
                    this.SendPropertyChanged("DataKey_GUID");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Money", Storage = "_DataKey_Money", ThisKey = "Money_Id", IsForeignKey = true)]
        public DataKey_Money DataKey_Money
        {
            get
            {
                return this._DataKey_Money.Entity;
            }
            set
            {
                DataKey_Money previousValue = this._DataKey_Money.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Money.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Money.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Money.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Money_Id = value.Id;
                    }
                    else
                    {
                        this._Money_Id = default(Nullable<decimal>);
                    }
                    this.SendPropertyChanged("DataKey_Money");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Numeric", Storage = "_DataKey_Numeric", ThisKey = "Numeric_Id", IsForeignKey = true)]
        public DataKey_Numeric DataKey_Numeric
        {
            get
            {
                return this._DataKey_Numeric.Entity;
            }
            set
            {
                DataKey_Numeric previousValue = this._DataKey_Numeric.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Numeric.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Numeric.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Numeric.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Numeric_Id = value.Id;
                    }
                    else
                    {
                        this._Numeric_Id = default(Nullable<decimal>);
                    }
                    this.SendPropertyChanged("DataKey_Numeric");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_Real", Storage = "_DataKey_Real", ThisKey = "Real_Id", IsForeignKey = true)]
        public DataKey_Real DataKey_Real
        {
            get
            {
                return this._DataKey_Real.Entity;
            }
            set
            {
                DataKey_Real previousValue = this._DataKey_Real.Entity;
                if (((previousValue != value)
                            || (this._DataKey_Real.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_Real.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_Real.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Real_Id = value.Id;
                    }
                    else
                    {
                        this._Real_Id = default(Nullable<float>);
                    }
                    this.SendPropertyChanged("DataKey_Real");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_SmallDateTime", Storage = "_DataKey_SmallDateTime", ThisKey = "SmallDateTime_Id", IsForeignKey = true)]
        public DataKey_SmallDateTime DataKey_SmallDateTime
        {
            get
            {
                return this._DataKey_SmallDateTime.Entity;
            }
            set
            {
                DataKey_SmallDateTime previousValue = this._DataKey_SmallDateTime.Entity;
                if (((previousValue != value)
                            || (this._DataKey_SmallDateTime.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_SmallDateTime.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_SmallDateTime.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._SmallDateTime_Id = value.Id;
                    }
                    else
                    {
                        this._SmallDateTime_Id = default(Nullable<System.DateTime>);
                    }
                    this.SendPropertyChanged("DataKey_SmallDateTime");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_SmallMoney", Storage = "_DataKey_SmallMoney", ThisKey = "SmallMoney_Id", IsForeignKey = true)]
        public DataKey_SmallMoney DataKey_SmallMoney
        {
            get
            {
                return this._DataKey_SmallMoney.Entity;
            }
            set
            {
                DataKey_SmallMoney previousValue = this._DataKey_SmallMoney.Entity;
                if (((previousValue != value)
                            || (this._DataKey_SmallMoney.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_SmallMoney.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_SmallMoney.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._SmallMoney_Id = value.Id;
                    }
                    else
                    {
                        this._SmallMoney_Id = default(Nullable<decimal>);
                    }
                    this.SendPropertyChanged("DataKey_SmallMoney");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_TinyInt", Storage = "_DataKey_TinyInt", ThisKey = "TinyInt_Id", IsForeignKey = true)]
        public DataKey_TinyInt DataKey_TinyInt
        {
            get
            {
                return this._DataKey_TinyInt.Entity;
            }
            set
            {
                DataKey_TinyInt previousValue = this._DataKey_TinyInt.Entity;
                if (((previousValue != value)
                            || (this._DataKey_TinyInt.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_TinyInt.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_TinyInt.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._TinyInt_Id = value.Id;
                    }
                    else
                    {
                        this._TinyInt_Id = default(Nullable<byte>);
                    }
                    this.SendPropertyChanged("DataKey_TinyInt");
                }
            }
        }

        [Association(Name = "FK_ThirteenNavigations_DataKey_VarChar50", Storage = "_DataKey_VarChar50", ThisKey = "Varchar_Id", IsForeignKey = true)]
        public DataKey_VarChar50 DataKey_VarChar50
        {
            get
            {
                return this._DataKey_VarChar50.Entity;
            }
            set
            {
                DataKey_VarChar50 previousValue = this._DataKey_VarChar50.Entity;
                if (((previousValue != value)
                            || (this._DataKey_VarChar50.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DataKey_VarChar50.Entity = null;
                        previousValue.ThirteenNavigations.Remove(this);
                    }
                    this._DataKey_VarChar50.Entity = value;
                    if ((value != null))
                    {
                        value.ThirteenNavigations.Add(this);
                        this._Varchar_Id = value.Id;
                    }
                    else
                    {
                        this._Varchar_Id = default(string);
                    }
                    this.SendPropertyChanged("DataKey_VarChar50");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
