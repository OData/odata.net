<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Test.DataDriven</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Test.DataDriven.AllValueSetAttribute">
            <summary>
            An attribute describing the set of all possible values for a parameter.
            </summary>
            <example>
            The <see cref="T:Microsoft.Test.DataDriven.AllValueSetAttribute"/> attribute defines all possible values for a method's parameter
            for use in test classes deriving from <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>. In this example, a test method
            calls <see cref="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String)"/> to invoke the method that will perform the test for all combinations of those
            parameters as calculated by the <see cref="T:Microsoft.Test.DataDriven.Combination"/> class:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                public void SomeTestHelper([AllValueSet(1, 2, 3)] int a, [AllValueSet("cat", "dog")] string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>
        </member>
        <member name="M:Microsoft.Test.DataDriven.AllValueSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.AllValueSetAttribute"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.AllValueSetAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.AllValueSetAttribute"/> class
            having the specified values.
            </summary>
            <param name="values">All possible values for a parameter.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.AllValueSetAttribute.ProcessAttributeData(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processor for the all value set
            </summary>
            <param name="sender">The caller.</param>
            <param name="args">The information about this particular processor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.AllValueSetAttribute.Values">
            <summary>
            Gets all possible values for a parameter.
            </summary>
            <value>All possible values for a parameter.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Combination">
            <summary>
            A class representing combinations of parameters generated by a variety
            of methods, e.g. full cartesian product, pairwise, random, or minimal.
            </summary>
            <example>
            In this example, a wrapper method creates a <see cref="T:Microsoft.Test.DataDriven.Combination"/> for the test method's
            parameters and their values, adds a constraint, and then invokes the test method for each
            valid combination in <see cref="P:Microsoft.Test.DataDriven.Combination.FullCombinations"/>:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    MethodInfo testMethod = this.GetType().GetMethod("SomeTestWithParameters");
                    IList&lt;ParameterData&gt; parameters = this.GenerateParameterData(testMethod);
                    Combination combination = new Combination(Seed.NextSeed(), parameters.ToArray();
                    combination.AddConstraint(DataRow test =&gt; (int)test["a"] != 2 || (string)test["b"] != "dog");
                    foreach (DataRow test in combination.FullCombinations)
                    {
                        testMethod.Invoke(this, test.ItemArray);
                    }
                }
                <para/>
                public void SomeTestWithParameters([AllValueSet(1, 2, 3)] int a, [AllValueSet("cat", "dog")] string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Combination.DefaultRandomCombinations">
            <summary>
            The default number of random combinations to generate.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.DataDriven.ParameterData[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.Combination"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and containing the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.DataDriven.Combination"/> for random combinatorial generation.</param>
            <param name="parameters">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s to contain within the <see cref="T:Microsoft.Test.DataDriven.Combination"/>
            and whose combinations to generate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="seed"/> or <paramref name="parameters"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.AddConstraintDelegate(System.Delegate)">
            <summary>
            Adds a <see cref="T:Microsoft.Test.DataDriven.Constraint"/> to model how combinations of the parameters contained
            within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/> should be generated.
            </summary>
            <example>
            For simple constraints, a lambda expression is recommended. In this example, only combinations
            including a value of 0 for the first parameter will be generated:
            <code>
            ParameterData&lt;int&gt; first = ParameterData.CreateData(0, 1, 2, 3);
            first.Name = "First";
            ParameterData&lt;int&gt; second = ParameterData.CreateData(10, 11, 12, 13);
            second.Name = "Second";
            Combination target = new Combination(Seed.NextSeed(), first, second);
            target.AddConstraint(DataRow testcase =&gt; testcase.Field&lt;int&gt;("First") == 0);
            </code>
            For more complicated constraints, delegates are more appropriate.
            <para/>
            It is possible to bypass the constraints model by using a LINQ expression. In this example,
            only combinations including values for "a" and "b" whose sum is greater than the value of "c"
            will be generated:
            <code>
            var filteredTestCases = from testcase in target.FullCombinations
                                    where( (testcase.Field&lt;int&gt;("a") + testcase.Field&lt;int&gt;("b")) &gt; testcase.Field&lt;int&gt;("c"))
                                    orderby testcase.Field&lt;int&gt;("c") descending
                                    select testcase;
            </code>
            </example>
            <param name="constraint">The <see cref="T:Microsoft.Test.DataDriven.Constraint"/> to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="constraint"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.AddConstraint(Microsoft.Test.DataDriven.Constraint)">
            <summary>
            Adds the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.CreateExpandedParameterValues">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> objects representing
            the expanded values for each of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> objects representing
            the expanded values for each of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.CreateTestSchema">
            <summary>
            Creates a <see cref="T:System.Data.DataTable"/> whose columns represent each of the parameters
            contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <returns>An empty <see cref="T:System.Data.DataTable"/> whose schema will support generated combinations.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.GetNWiseCombination(System.Int32)">
            <summary>
            Gets the N wise combination.
            </summary>
            <param name="order">The order.</param>
            <returns>The <see cref="T:Microsoft.Test.DataDriven.NWiseCombinationCollection"/> that represents the combination of the provided information.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Combination.ValidateConstraint(System.Delegate)">
            <summary>
            Validate constraint matches the TestSchema
            delegate must return bool i.e. be a predicate
            Either delegate input is datarow or precisely matches TestSchema data columns
            Throws an exception is constraint delegate is not valid
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.Constraints">
            <summary>
             Gets the list of delegates modeling how combinatorials should be generated.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.FullCombinations">
            <summary>
            Gets all combinations of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <remarks>
            This collection includes the cartesian product of the parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.MinimumCombinations">
            <summary>
            Gets the minimum collection of combinations of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <remarks>
            This collection includes combinations where every parameter value is represented at least once.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.PairWiseCombinations">
            <summary>
            Gets pairwise combinations of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <remarks>
            This collection includes pairwise combinations of the parameters. If constraints are used, not
            all pairs are guaranteed.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.RandomCombinations">
            <summary>
            Gets the first 100 random combinations of the parameters contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>.
            </summary>
            <remarks>
            This collection includes the first 100 random combinations of the parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.Seed">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used for random combinatorial generation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Combination.Parameters">
            <summary>
            Gets the list of <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> contained within the current <see cref="T:Microsoft.Test.DataDriven.Combination"/>
            and whose combinations can be generated.
            </summary>          
        </member>
        <member name="T:Microsoft.Test.DataDriven.CombinatorialAttribute">
            <summary>
            Attribute to define Combination properties
            </summary>    
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.CombinatorialAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialAttribute.ProcessCombinatorialAttribute(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processes the combinatorial attribute.
            </summary>
            <param name="sender">The caller.</param>
            <param name="args">The information about this particular processor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialAttribute.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialAttribute.Constraints">
            <summary>
            Gets or sets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialAttribute.Constraint">
            <summary>
            Gets or sets the constraint.
            </summary>
            <value>The constraint.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.CombinatorialEnumerator">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> implementation of type <see cref="T:System.Data.DataRow"/> for
            enumeration through generated combinations of parameters' values.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.#ctor(Microsoft.Test.DataDriven.CombinationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.CombinatorialEnumerator"/> class for
            enumerating through the specified <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/>.
            </summary>
            <param name="combinationCollection">The combination collection through which to enumerate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="combinationCollection"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Test.DataDriven.CombinatorialEnumerator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.MoveNext">
            <summary>
            Moves to the next element in the collection.
            </summary>
            <returns>A value indicating whether an element existed following the prior position of the enumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.BuildCurrent">
            <summary>
            Sets the current data row while moving next
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes the current <see cref="T:Microsoft.Test.DataDriven.CombinatorialEnumerator"/>.
            </summary>
            <param name="disposing">A value indicating whether or not to dispose of child objects.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinatorialEnumerator.IsValidCombination(System.Data.DataRow)">
            <summary>
            Determines whether the specifed <see cref="T:System.Data.DataRow"/> represents a valid combination
            of parameters.
            </summary>
            <param name="testCase">The <see cref="T:System.Data.DataRow"/> whose validity to determine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Data.DataRow"/> represents a valid combination of
            parameters; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="testCase"/> parameter was null.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinatorialEnumerator.CollectionSource">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/> through which the current
            <see cref="T:Microsoft.Test.DataDriven.CombinatorialEnumerator"/> enumerates.
            </summary>
            <value>The collection source.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.CompoundParameterData">
            <summary>
            Represents two or more ParameterData objects
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ParameterData">
            <summary>
            A class representing a method parameter's possible values for combinatorial generation.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> class, representing a method
            parameter of the specified type.
            </summary>
            <param name="type">The type of the method parameter represented by the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.CreateData``1(``0[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing a parameter having the specified set of possible values.
            </summary>
            <typeparam name="T">The type of the method parameter represented by the created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</typeparam>
            <param name="data">The possible values to pass for the method parameter represented by the created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.CreateFactoryData``1(Microsoft.Test.MaDLybZ.FactorySet{``0}[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing a parameter having the equivalent sets for the specified data factories.
            </summary>
            <typeparam name="T">The type of the method parameter represented by the created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</typeparam>
            <param name="data">The data factories that produce values for the method parameter represented by the created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Finds the method defined at <paramref name="target"/> having the specified name
            and expecting the specified parameters.
            </summary>
            <param name="target">The object at which the method is defined.</param>
            <param name="methodName">The name of the desired method.</param>
            <param name="parameters">The parameters expected by the desired method.</param>
            <returns>A <see cref="T:System.Reflection.MethodBase"/> representing the desired method.</returns>
            <seealso cref="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Type,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})"/>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Type,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Finds the method defined at <paramref name="type"/> having the specified name
            and expecting the specified parameters.
            </summary>
            <param name="type">The type of object at which the method is defined.</param>
            <param name="methodName">The name of the desired method.</param>
            <param name="parameters">The parameters expected by the desired method.</param>
            <returns>A <see cref="T:System.Reflection.MethodBase"/> representing the desired method.</returns>
            <seealso cref="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})"/>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.ReflectNameFromOrder(System.Reflection.MethodBase,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Updates the name of the method parameters represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s in the specified collection
            using the names of the parameters of the specified method.
            </summary>
            <param name="toReflectOn">The method whose parameters' names will be assigned to the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s</param>
            <param name="parameters">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s whose names to update.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toReflectOn"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameters"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.AddAllValuesSet(System.Collections.IEnumerable)">
            <summary>
            When implemented in a deriving class, adds a set of values to the current 
            <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>, all of which will be included during
            combinatorial generation.
            </summary>
            <param name="data">The values included in the set being added.</param>
            <remarks>
            Unlike an equivalent set from which only one value is selected during
            combinatorial generation, all of the values in <paramref name="data"/>
            will be included.
            </remarks>
            <example>
            <code>
            ParameterData&lt;int&gt; parameter = new ParameterData&lt;int&gt;();
            parameter.AddAllValuesSet(new int[] { 1, 2, 3 });
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.AddSelectableData(Microsoft.Test.DataDriven.ISelectableData)">
            <summary>
            When implemented in a deriving class, adds an <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> representing
            a set of equivalent values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="data">The <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> to add.</param>
            <remarks>
            When a <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s values are expanded for combinatorial generation,
            only one value will be chosen from each of its equivalent sets by calling
            <see cref="M:Microsoft.Test.DataDriven.ISelectableData.NextObject"/>.
            </remarks>
            <example>
            <code>
            SelectableList&lt;int&gt; data = new SelectableList&lt;int&gt;(new int[] { 1, 2, 3 }, Seed.NextSeed());
            ParameterData&lt;int&gt; parameter = new ParameterData&lt;int&gt;();
            parameter.AddSelectableData(data);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.CalculateExpandedValueCount">
            <summary>
            Calculates the number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>
            by <see cref="M:Microsoft.Test.DataDriven.ParameterData.ExpandValues"/>.
            </summary>
            <returns>The number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
            <remarks>
            The number of expanded values is the number of values in each added "all values" set,
            plus one value from each equivalent set.
            </remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.ExpandValues">
            <summary>
            Expands the values for the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <returns>The values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> contains all the values added as
            "all-value" sets (by <see cref="M:Microsoft.Test.DataDriven.ParameterData.AddAllValuesSet(System.Collections.IEnumerable)"/>) and one value from each
            added equivalent set (by <see cref="M:Microsoft.Test.DataDriven.ParameterData.AddSelectableData(Microsoft.Test.DataDriven.ISelectableData)"/>).
            </remarks>
            <seealso cref="M:Microsoft.Test.DataDriven.ParameterData.CalculateExpandedValueCount"/>
            <seealso cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.MergeWith(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Merges the with.
            </summary>
            <param name="toMergeWith">To merge with.</param>
            <remarks>This is obsoleted by the method Combine which creates a new ParameterData that is a compound of both the left and right values.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toMergeWith"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.Combine(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Combines one ParameterData instance with this instance and returns the composite of the two
            </summary>
            <param name="combineWith">The ParameterData instance to combine this object with.</param>
            <returns>A ParameterData instance which represents the combination of both instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="combineWith"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.FlattenParameterData(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Flattens a parameter data heirarchy
            </summary>
            <param name="flattenedList">A list of all ParameterData objects contained in this ParameterData object</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="flattenedList"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.CheckMethodName(System.String)">
            <summary>
            Verifies that a supplied method name is neither null nor empty.
            </summary>
            <param name="methodName">The supplied method name.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData.Matches(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Determines whether a method's signature matches a supplied set of parameters.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.MethodInfo"/> representing the candidate method.</param>
            <param name="parameters">The parameters which the method represented by <paramref name="info"/>
            must expect.</param>
            <returns>True if the specified method expects the specified parameters; otherwise, false.</returns>
            <remarks>
            This will attempt to find a method named <paramref name="info"/> whose
            parameters are assignable from the data types in <paramref name="parameters"/>.
            If a <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> has a name, the data type of the method parameter
            need only be assignable from the data type of the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>, but
            if it is unnamed, the its data type must match exactly the data type of the
            method parameter.
            </remarks>
            <seealso cref="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Type,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})"/>
            <seealso cref="M:Microsoft.Test.DataDriven.ParameterData.FindMethodByParameters(System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})"/>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ParameterData.Name">
            <summary>
            Gets or sets the name of the method parameter represented by the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ParameterData.ParameterType">
            <summary>
            Gets the type of the method parameter represented by the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.#ctor(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Creates a new instance of the CompoundParameterData class
            </summary>
            <param name="root">The root of the collection of ParameterData objects, this is the instance that new parameter data will be added to.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.#ctor(Microsoft.Test.DataDriven.ParameterData,Microsoft.Test.DataDriven.ParameterData[])">
            <summary>
            Creates a new instance of the CompoundParameterData class
            </summary>
            <param name="root">The root of the collection of ParameterData objects, this is the instance that new parameter data will be added to.</param>
            <param name="additionalParameters">Additional ParameterData instances to contain in this collection</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="additionalParameters"/> parameter was null.</exception>
            <exception cref="T:System.ArgumentException">One of the ParameterData parameters specified in the params <paramref name="additionalParameters"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.Add(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Adds a new ParameterData instance to the CompoundParameterData.
            </summary>
            <param name="toAdd">The instance to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toAdd"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.AddAllValuesSet(System.Collections.IEnumerable)">
            <summary>
            Adds a set of values to the current 
            <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>, all of which will be included during
            combinatorial generation.
            </summary>
            <param name="data">The values included in the set being added.</param>
            <remarks>
            Unlike an equivalent set from which only one value is selected during
            combinatorial generation, all of the values in <paramref name="data"/>
            will be included.
            
            This implementation will call AddAllValuesSet on the <see cref="P:Microsoft.Test.DataDriven.CompoundParameterData.Root"/> property of this instance.
            </remarks>
            <example>
            <code>
            ParameterData&lt;int&gt; parameter = new ParameterData&lt;int&gt;();
            parameter.AddAllValuesSet(new int[] { 1, 2, 3 });
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.AddSelectableData(Microsoft.Test.DataDriven.ISelectableData)">
            <summary>
            When implemented in a deriving class, adds an <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> representing
            a set of equivalent values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="data">The <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> to add.</param>
            <remarks>
            When a <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s values are expanded for combinatorial generation,
            only one value will be chosen from each of its equivalent sets by calling
            <see cref="M:Microsoft.Test.DataDriven.ISelectableData.NextObject"/>.
            
            This implementation will call AddAllValuesSet on the <see cref="P:Microsoft.Test.DataDriven.CompoundParameterData.Root"/> property of this instance.
            </remarks>
            <example>
            <code>
            SelectableList&lt;int&gt; data = new SelectableList&lt;int&gt;(new int[] { 1, 2, 3 }, Seed.NextSeed());
            ParameterData&lt;int&gt; parameter = new ParameterData&lt;int&gt;();
            parameter.AddSelectableData(data);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.CalculateExpandedValueCount">
            <summary>
            Calculates the number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>
            by <see cref="M:Microsoft.Test.DataDriven.CompoundParameterData.ExpandValues"/>.
            </summary>
            <returns>The number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
            <remarks>
            The number of expanded values is the number of values in each added "all values" set,
            plus one value from each equivalent set.
            </remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundParameterData.ExpandValues">
            <summary>
            Expands the values for the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <returns>The values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
            <remarks>
            An <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> contains all the values added as
            "all-value" sets (by <see cref="M:Microsoft.Test.DataDriven.CompoundParameterData.AddAllValuesSet(System.Collections.IEnumerable)"/>) and one value from each
            added equivalent set (by <see cref="M:Microsoft.Test.DataDriven.CompoundParameterData.AddSelectableData(Microsoft.Test.DataDriven.ISelectableData)"/>).
            </remarks>
            <seealso cref="M:Microsoft.Test.DataDriven.CompoundParameterData.CalculateExpandedValueCount"/>
            <seealso cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CompoundParameterData.ParameterList">
            <summary>
            The list of ParameterData objects that are included in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CompoundParameterData.Root">
            <summary>
            The "root" of the CompoundParameterData, this is the ParameterData that all new values will be added to.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest">
            <summary>
            Methods for invoking variants using SQL-driven data
            </summary>
            <summary>
            A base class for any class that implements combinatorial tests. Provides many useful
            members which make it easier to use the combinatorial testing framework.
            </summary>
            <example>
            A <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> typically defines wrapper methods, recognized by the test framework
            as being an available test through use of the TestMethod attribute, which call corresponding methods
            repeatedly for combinations of parameter values. This example demonstrates a simple data-driven test.
            One parameter's possible values are defined as 1, 2 or 3, and a second parameter's possible values
            are defined as "cat" or "dog", and the wrapper method invokes the test method for each combination thereof:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
            [TestMethod]
            public void SomeTest()
            {
            this.Invoke(this.SomeTestWithParameters, CreateData(1, 2, 3), CreateData("cat", "dog"));
            }
            <para/>
            public void SomeTestWithParameters(int a, string b)
            {
            Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
            }
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ProcessorEventSink">
            <summary>
            A class that can be used to sink the events implemented by the <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEvents"/> class.  This class allows the descendant just to implement the methods interested in.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.#ctor">
            <summary>
            Creates a new instance of the ProcessorEventSink.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.ProcessorEventOccurred(Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail)">
            <summary>
            Called by the ProcessorEvent source when an exception is caught by the event source that was thrown while this class was handling an event
            </summary>
            <param name="details">Details surrounding the event</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.SinkEvents(Microsoft.Test.DataDriven.Processing.ProcessorEvents)">
            <summary>
            Used to sink events on the specified <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEvents"/> instance.
            </summary>
            <param name="eventSource">The event source for the events to sink events on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="eventSource"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.RemoveSink">
            <summary>
            Removes the sink from the <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEvents"/> instance previously attached to by calling <see cref="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.SinkEvents(Microsoft.Test.DataDriven.Processing.ProcessorEvents)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Override this method to handle the event that is fired previous to combinatorial expansion.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The data that can be used/tuned to affect combinatorial expansion.</param>
            <returns>A hint to pass to OnExpandedCombinatorials.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnExpandedCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs,System.Object)">
            <summary>
            Override this method to handle the event that is fired immediately following combinatorial expansion.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">Data that was generated by combinatorial expansion, this data can be changed by downstream handlers.</param>
            <param name="fromExpandingCombinatorials">A hint returned from OnExpandingCombinatorials.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnStartingInvocation(System.Object,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Override this method to handle the event that is fired previous to invoking any data driven variants
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The arguments that will be provided to each variant.  This data can be manipulated to change the invocation process.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnInvokingVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object)">
            <summary>
            Override this method to handle the event that is fired previous to invoking a data driven variant
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The data that will be used to invoke the variant.  This can be manipulated to change the way the variant is invoked.</param>
            <param name="fromStartingInvocation">A hint passed from the StartingInvocation event.</param>
            <returns>A hint to pass to the OnInvokedVariant and OnVariantException methods.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnInvokedVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object,System.Object,System.Object)">
            <summary>
            Override this method to handle the event that is fired immediately following variant invocation.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The data that was used to invoke the variant along with the result of the invocation.  This can be changed or updated by downstream handlers.</param>
            <param name="fromStartingInvocation">A hint passed from the StartingInvocation event.</param>
            <param name="fromInvokingVariant">A hint passed from the InvokingVariant event.</param>
            <param name="fromVariantException">A hint passed form the OnVariantException method.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnVariantException(System.Object,Microsoft.Test.DataDriven.InvocationExceptionEventArgs,System.Object,System.Object)">
            <summary>
            Override this method to handle the event that is fired when a data driven variant throws an exception.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The arguments surrounding the exception that occurred.</param>
            <param name="fromStartingInvocation">A hint passed from the StartingInvocation event.</param>
            <param name="fromInvokingVariant">A hint passed from the InvokingVariant event.</param>
            <returns>A hint to pass to OnInvokedVariant.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventSink.OnFinishedInvocation(System.Object,Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs,System.Object)">
            <summary>
            Override this method to handle the event that is fired when a group of data driven variants have finished being invoked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">Data for the invocations that occurred.</param>
            <param name="fromStartingInvocation">A hint passed from the StartingInvocation event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="connectionString">The connection string to the server and database from which to read parameter values.</param>
            <param name="query">The query to execute to read parameter values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;int&gt;("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID] FROM [SomeTable]");
            }
            <para/>
            public void TestMethodHelper(int a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.String,System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="connectionString">The connection string to the server and database from which to read parameter values.</param>
            <param name="query">The query to execute to read parameter values.</param>
            <param name="columnIndex">The index of the column within a table containing the parameter's values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;string&gt;("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [Name] FROM [SomeTable]", 1);
            }
            <para/>
            public void TestMethodHelper(string a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="connectionString">The connection string to the server and database from which to read parameter values.</param>
            <param name="query">The query to execute to read parameter values.</param>
            <param name="columnName">The name of the column within a table containing the parameter's values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;string&gt;("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [Name] FROM [SomeTable]", "Name");
            }
            <para/>
            public void TestMethodHelper(string a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                SqlConnection cxn = new SqlConnection("Server=server;Database=database;Integrated_Security=yes");
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [SomeID] FROM [SomeTable]";
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;int&gt;(cmd);
            }
            <para/>
            public void TestMethodHelper(int a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.</param>
            <param name="columnIndex">The index of the column within a table containing the parameter's values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                SqlConnection cxn = new SqlConnection("Server=server;Database=database;Integrated_Security=yes");
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [SomeID], [Name] FROM [SomeTable]";
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;string&gt;(cmd, 1);
            }
            <para/>
            public void TestMethodHelper(string a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateSqlData``1(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> from a list of values read from a database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> this will be used for.</typeparam>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.</param>
            <param name="columnName">The name of the column within a table containing the parameter's values.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                SqlConnection cxn = new SqlConnection("Server=server;Database=database;Integrated_Security=yes");
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [SomeID], [Name] FROM [SomeTable]";
                this.Invoke(this.TestMethodHelper, CreateSqlData&lt;string&gt;(cmd, "Name");
            }
            <para/>
            public void TestMethodHelper(string a)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.InvokeWithSqlData(System.Reflection.MethodInfo,System.String,System.String,System.Boolean,Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method using parameter values read from a database.
            </summary>
            <param name="toInvoke">The method to invoke.</param>
            <param name="connectionString">The connection string to the server and database from which to read parameter values.</param>
            <param name="query">The query to execute to read parameter values.</param>
            <param name="expandCombinatorials">A value indicating whether or not to expand parameter values combinatorially.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                MethodInfo toInvoke = this.GetType().GetMethod("TestMethodHelper");
                this.InvokeWithSqlData(toInvoke, "Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [Name] FROM [SomeTable]", false);
            }
            <para/>
            public void TestMethodHelper(int someId, string name)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.InvokeWithSqlData(System.Reflection.MethodInfo,System.String,System.String,System.Int32,System.Boolean,Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method using parameter values read from a database.
            </summary>
            <param name="toInvoke">The method to invoke.</param>
            <param name="connectionString">The connection string to the server and database from which to read parameter values.</param>
            <param name="query">The query to execute to read parameter values.</param>
            <param name="tableIndex">The index of the table within the dataset containing the values to test for each parameter.</param>
            <param name="expandCombinatorials">A value indicating whether or not to expand parameter values combinatorially.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                MethodInfo toInvoke = this.GetType().GetMethod("TestMethodHelper");
                this.InvokeWithSqlData(toInvoke, "Server=server;Database=database;Integrated_Security=yes", "SomeProcedure", 1, false);
            }
            <para/>
            public void TestMethodHelper(int someId, string name)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.InvokeWithSqlData(System.Reflection.MethodInfo,System.Data.SqlClient.SqlCommand,System.Boolean,Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method using parameter values read from a database.
            </summary>
            <param name="toInvoke">The method to invoke.</param>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.</param>
            <param name="expandCombinatorials">A value indicating whether or not to expand parameter values combinatorially.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                MethodInfo toInvoke = this.GetType().GetMethod("TestMethodHelper");
                SqlConnection cxn = new SqlConnection("Server=server;Database=database;Integrated_Security=yes");
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [SomeID], [Name] FROM [SomeTable]";
                this.InvokeWithSqlData(toInvoke, cmd, true);
            }
            <para/>
            public void TestMethodHelper(int someId, string name)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.InvokeWithSqlData(System.Reflection.MethodInfo,System.Data.SqlClient.SqlCommand,System.Int32,System.Boolean,Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method using parameter values read from a database.
            </summary>
            <param name="toInvoke">The method to invoke.</param>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.</param>
            <param name="tableIndex">The index of the table within the dataset containing the values to test for each parameter.</param>
            <param name="expandCombinatorials">A value indicating whether or not to expand parameter values combinatorially.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
            <example>
            <code>
            [TestMethod]
            public void TestMethod()
            {
                MethodInfo toInvoke = this.GetType().GetMethod("TestMethodHelper");
                SqlConnection cxn = new SqlConnection("Server=server;Database=database;Integrated_Security=yes");
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SomeProcedure";
                this.InvokeWithSqlData(toInvoke, cmd, 1, true);
            }
            <para/>
            public void TestMethodHelper(int someId, string name)
            {
                // Some test code here...
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``1(System.Action{``0},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having one parameter.
            </summary>
            <typeparam name="T">The type of the invoked method's lone parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``1(System.Action{``0},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0}[])">
            <summary>
            Invokes a method having one parameter.
            </summary>
            <typeparam name="T">The type of the invoked method's lone parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of constraint delegates that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``2(System.Action{``0,``1},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having two parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``2(System.Action{``0,``1},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1}[])">
            <summary>
            Invokes a method having two parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of constraint delegates that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``3(System.Action{``0,``1,``2},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having three parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <typeparam name="TParameter3">The type of the invoked method's third parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="parameter3">The third parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``3(System.Action{``0,``1,``2},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2}[])">
            <summary>
            Invokes a method having three parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <typeparam name="TParameter3">The type of the invoked method's third parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="parameter3">The third parameter to pass to the method being invoked.</param>        
            <param name="constraints">The list of constraint delegates that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``4(System.Action{``0,``1,``2,``3},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having four parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <typeparam name="TParameter3">The type of the invoked method's third parameter.</typeparam>
            <typeparam name="TParameter4">The type of the invoked method's fourth parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="parameter3">The third parameter to pass to the method being invoked.</param>
            <param name="parameter4">The fourth parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``4(System.Action{``0,``1,``2,``3},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3}[])">
            <summary>
            Invokes a method having four parameters.
            </summary>
            <typeparam name="TParameter1">The type of the invoked method's first parameter.</typeparam>
            <typeparam name="TParameter2">The type of the invoked method's second parameter.</typeparam>
            <typeparam name="TParameter3">The type of the invoked method's third parameter.</typeparam>
            <typeparam name="TParameter4">The type of the invoked method's fourth parameter.</typeparam>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameter1">The first parameter to pass to the method being invoked.</param>
            <param name="parameter2">The second parameter to pass to the method being invoked.</param>
            <param name="parameter3">The third parameter to pass to the method being invoked.</param>
            <param name="parameter4">The fourth parameter to pass to the method being invoked.</param>
            <param name="constraints">The list of constraint delegates that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``5(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 5 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 5 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``5(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 5 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``6(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 6 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 6 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``6(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 6 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``7(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 7 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 7 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``7(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 7 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``8(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 8 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 8 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``8(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 8 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``9(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 9 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 9 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``9(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 9 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``10(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 10 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 10 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``10(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 10 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``11(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 11 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 11 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``11(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 11 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``12(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 12 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 12 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``12(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 12 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``13(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 13 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 13 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``13(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 13 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``14(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 14 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 14 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``14(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 14 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``15(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 15 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 15 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``15(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 15 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``16(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 16 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 16 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``16(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 16 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``17(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 17 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 17 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``17(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 17 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``18(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 18 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 18 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``18(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 18 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``19(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.ParameterData{``18},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 19 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter19">The type of the parameter19 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 19 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter19">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``19(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.ParameterData{``18},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter19">The type of the parameter19 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 19 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter19">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``20(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.ParameterData{``18},Microsoft.Test.DataDriven.ParameterData{``19},Microsoft.Test.DataDriven.Constraint[])">
            <summary>
            Invokes a method having 20 parameters using the specified parameters data as well as the specified constraints.
            </summary>
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter19">The type of the parameter19 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter20">The type of the parameter20 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 20 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter19">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter20">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke``20(Microsoft.Test.DataDriven.DataDrivenTest.MoreAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19},Microsoft.Test.DataDriven.ParameterData{``0},Microsoft.Test.DataDriven.ParameterData{``1},Microsoft.Test.DataDriven.ParameterData{``2},Microsoft.Test.DataDriven.ParameterData{``3},Microsoft.Test.DataDriven.ParameterData{``4},Microsoft.Test.DataDriven.ParameterData{``5},Microsoft.Test.DataDriven.ParameterData{``6},Microsoft.Test.DataDriven.ParameterData{``7},Microsoft.Test.DataDriven.ParameterData{``8},Microsoft.Test.DataDriven.ParameterData{``9},Microsoft.Test.DataDriven.ParameterData{``10},Microsoft.Test.DataDriven.ParameterData{``11},Microsoft.Test.DataDriven.ParameterData{``12},Microsoft.Test.DataDriven.ParameterData{``13},Microsoft.Test.DataDriven.ParameterData{``14},Microsoft.Test.DataDriven.ParameterData{``15},Microsoft.Test.DataDriven.ParameterData{``16},Microsoft.Test.DataDriven.ParameterData{``17},Microsoft.Test.DataDriven.ParameterData{``18},Microsoft.Test.DataDriven.ParameterData{``19},Microsoft.Test.DataDriven.DataDrivenTest.Constraint{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19}[])">
            <typeparam name="TParameter1">The type of the parameter1 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter2">The type of the parameter2 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter3">The type of the parameter3 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter4">The type of the parameter4 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter5">The type of the parameter5 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter6">The type of the parameter6 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter7">The type of the parameter7 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter8">The type of the parameter8 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter9">The type of the parameter9 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter10">The type of the parameter10 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter11">The type of the parameter11 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter12">The type of the parameter12 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter13">The type of the parameter13 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter14">The type of the parameter14 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter15">The type of the parameter15 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter16">The type of the parameter16 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter17">The type of the parameter17 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter18">The type of the parameter18 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter19">The type of the parameter19 parameter of the method to be invoked.</typeparam>
            <typeparam name="TParameter20">The type of the parameter20 parameter of the method to be invoked.</typeparam>
            <param name="toInvoke">A method with 20 parameters to be treated as a data driven test variant.  This method will be invoked according to the combination of the specified parameters, constraints and the attributes decorating the target method.</param>
            <param name="parameter1">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter2">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter3">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter4">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter5">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter6">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter7">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter8">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter9">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter10">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter11">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter12">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter13">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter14">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter15">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter16">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter17">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter18">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter19">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="parameter20">The <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing the data to be used to invoke the target method.</param>
            <param name="constraints">The list of <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s that will be used when determing the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> class with a <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            produced by <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to generate combinatorials.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="seed"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.DataDrivenTestInitialize">
            <summary>
            Initializes the DataDrivenTest prior to running a test.
            </summary>
            <remarks>This is called by Visual Studio.  This sets up the validation context for the test method about to be run.</remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.DataDrivenTestCleanup">
            <summary>
            Cleans up the DataDrivenTest after to running a test.
            </summary>
            <remarks>This is called by Visual Studio.  This validates the result for the executed test method.</remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateData``1(``0[])">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> from a list of discrete known values.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> this will be used for.</typeparam>
            <param name="values">The discrete values with which to populate the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            This method makes it easy to define all test values for a parameter and combine it with
            others and invoke a test method for each such combination:
            <code>
            [TestMethod]
            public void SomeTest()
            {
                this.Invoke(this.SomeTestWithParameters, CreateData(1, 2, 3), CreateData("cat", "dog"));
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateDataFromEnum``1">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> from a list of discrete known enum values.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> this will be used for.</typeparam>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            This method makes it easy to define all test values for an enum and combine it with
            others and invoke a test method for each such combination:
            <code>
            [TestMethod]
            public void SomeTest()
            {
                this.Invoke(this.SomeTestWithParameters, CreateDataForEnum&lt;FontStyle&gt;(), CreateData("Arial", "Times New Roman"));
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateDataFromEnum``1(System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> from a list of discrete known enum values.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> this will be used for.</typeparam>
            <param name="expandBitwise">If true the code should provide all combinations of a [Flags] enumeration.  If false this method produces the same output as  <see cref="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateDataFromEnum``1"/></param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            This method makes it easy to define all test values for an enum and combine it with
            others and invoke a test method for each such combination:
            <code>
            [TestMethod]
            public void SomeTest()
            {
                this.Invoke(this.SomeTestWithParameters, CreateDataForEnum&lt;FontStyle&gt;(), CreateData("Arial", "Times New Roman"));
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateFactoryData``1(Microsoft.Test.MaDLybZ.FactorySet{``0}[])">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> from a data factory.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> this will be used for.</typeparam>
            <param name="values">The data factory with which to produce the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
            <returns>The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
            <example>
            This method makes it easy to define a parameter from a data factory and combine it with
            others and invoke a test method for each such combination:
            <code>
            [TestMethod]
            public void SomeTest()
            {
                this.Invoke(this.SomeTestWithParameters, CreateData(new IntegerRange(this.Seed.Spawn(), 1, 100)), CreateData("cat", "dog"));
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.CreateFactoryData``1(Microsoft.Test.MaDLybZ.FactorySet{``0},System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> from a data factory.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> this will be used for.</typeparam>
            <param name="factory">The data factory with which to produce the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
            <param name="count">The number of times to select from the data factory provided.</param>
            <returns>
            The created <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </returns>
            <example>
            This method makes it easy to define a parameter from a data factory and combine it with
            others and invoke a test method for each such combination:
            <code>
            [TestMethod]
            public void SomeTest()
            {
            this.Invoke(this.SomeTestWithParameters, CreateData(new IntegerRange(this.Seed.Spawn(), 1, 100)), CreateData("cat", "dog"));
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">The <paramref name="factory"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.Delegate,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData},System.Collections.Generic.IEnumerable{System.Delegate})">
            <summary>
            Invokes a method having zero or more parameters.
            </summary>
            <param name="toInvoke">The method to invoke.</param>
            <param name="parameters">The parameters with which to invoke the method.</param>
            <param name="constraints">The constraints.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toInvoke"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData},System.Collections.Generic.IEnumerable{System.Delegate})">
            <summary>
            Invokes the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <param name="constraints">The constraints.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="methodName"/> parameter was null or empty.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String)">
            <summary>
            Invokes the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="methodName"/> parameter was null or empty.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String,System.Predicate{System.Exception})">
            <summary>
            Invokes the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="onException">The on exception.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="methodName"/> parameter was null or empty.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String,Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Predicate{System.Exception})">
            <summary>
            Invokes the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="rows">The rows.</param>
            <param name="onException">The on exception.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="methodName"/> parameter was null or empty.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData},System.Collections.Generic.IEnumerable{System.Delegate})">
            <summary>
            Invokes the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <param name="constraints">The constraints.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> or <paramref name="parameters"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.InvokeFull(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData},System.Collections.Generic.IEnumerable{System.Delegate},Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Predicate{System.Exception})">
            <summary>
            Invokes the full.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <param name="constraints">The constraints.</param>
            <param name="rows">The rows.</param>
            <param name="onException">The on exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.ProcessDataDrivenException(System.Exception,System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.NamedArgument})">
            <summary>
            Processes the data driven exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
            <returns>True if the execution should continue to the next variant.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Implements the OnExpandingCombinatorials method for the DataDrivenTest
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">The arguments for the expanding combinatorials</param>
            <returns>The hint from the base expanding combinatorials method</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.OnVariantException(System.Object,Microsoft.Test.DataDriven.InvocationExceptionEventArgs,System.Object,System.Object)">
            <summary>
            Handles the variant exception event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">The arguments about the exception that occurred.</param>
            <param name="fromInvokingVariant">The hint from the invoking variant call</param>
            <param name="fromStartingInvocation">The hint from the starting invocation call.</param>
            <returns>The hint from the base OnVariantException method.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.ProcessTestResult(System.String,System.Exception)">
            <summary>
            Processes the data driven test result.
            </summary>
            <param name="arguments">The arguments that were used for the data driven test variant being processed.</param>
            <param name="occurred">The exception that occurred or null if there was none.</param>
            <returns>The result for the current variant.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.AddSubResult(System.Boolean,System.String)">
            <summary>
            Adds a sub result (data driven result) to the result.
            </summary>
            <param name="passed">If <c>true</c> the result will be set to passed, otherwise failed</param>
            <param name="result">The description of the sub result to display as the title of the sub result.</param>
            <returns>The sub result added.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.StartDataDrivenTest(System.Collections.Generic.IList{System.Object})">
            <summary>
            Starts the data driven test.
            </summary>
            <param name="startWith">The start with.</param>
            <returns>The objects to invoke the variant to be run with.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.PushSubResult">
            <summary>
            Pushes a data driven sub result onto the stack.
            </summary>
            <remarks>
            This is used to add sub results to the result stack allowing results to be nested.  Any time PushSubResult is used there should be a corresponding PopSubResult in order to maintain the proper amount of results.
            </remarks>
            <returns>The TestResult that represents the sub result.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.FormatParameter(System.String,System.Object)">
            <summary>
            Formats the way a specified parameter is displayed in the result or console output
            </summary>
            <param name="name">The name of the parameter from the method parameter list.</param>
            <param name="parameter">The parameter to format</param>
            <returns>The NamedArgument to display</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.FormatParameter(System.Object)">
            <summary>
            Formats the way a specified parameter is displayed in the result or console output
            </summary>
            <param name="parameter">The parameter to format</param>
            <returns>The value to display</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.PopSubResult">
            <summary>
            Pops a data driven sub result from the stack.
            </summary>
            <returns>The TestResult that was previously on the stack.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.AddSubResult">
            <summary>Adds a new sub result to the CurrentResult.</summary>
            <remarks>This does not add the sub result to the stack, so if this behavior is desired use PushSubResult() instead.</remarks>
            <returns>The added TestResult.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.OnInvokingVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object)">
            <summary>
            Overrides OnInvokingVariant, this method is called before a data driven variant is invoked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">Describes the variant about to be invoked</param>
            <param name="fromStartingInvocation">A hint returned from the OnStartingInvocation method.</param>
            <returns>A hint to pass to OnInvokedVariant and OnVariantException</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.DataDrivenTest.OnInvokedVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object,System.Object,System.Object)">
            <summary>
            Override this method to handle the event that is fired immediately following variant invocation.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The data that was used to invoke the variant along with the result of the invocation.  This can be changed or updated by downstream handlers.</param>
            <param name="fromStartingInvocation">A hint passed from the StartingInvocation event.</param>
            <param name="fromInvokingVariant">A hint passed from the InvokingVariant event.</param>
            <param name="fromVariantException">A hint passed form the OnVariantException method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null.</exception>
        </member>
        <member name="E:Microsoft.Test.DataDriven.DataDrivenTest.InvocationExceptionOccurred">
            <summary>
            Occurs when the current <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> is instructed to invoke
            a test method and an exception was thrown during its invocation.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.DataDrivenTest.Invoked">
            <summary>
            Occurs when the current <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> is instructed to invoke
            a test method, immediately after its invocation.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.DataDrivenTest.Invoking">
            <summary>
            Occurs when the current <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> is instructed to invoke
            a test method, immediately prior to its invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.DataDrivenTest.Seed">
            <summary>Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to generate combinatorials.</summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.DataDrivenTest.Order">
            <summary>
            The default combinatorial order to use when expanding data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.DataDrivenTest.CurrentResult">
            <summary>
            The current test result.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/> keeps a stack of TestResult objects during execution.  This means that during a variant this will be the current variant result, during regular execution this will be the test case result.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.DataDriven.DataDrivenTest.ValidationOptions">
            <summary>
            Gets the validation options used when performing automatic validation
            after each variant is invoked.
            </summary>
            <value>The validation options.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`1">
            <summary>
            A delegate supporting -3 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`1">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`2">
            <summary>
            A delegate supporting -2 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`2">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`3">
            <summary>
            A delegate supporting -1 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`3">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`4">
            <summary>
            A delegate supporting 0 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`4">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`5">
            <summary>
            A delegate supporting 1 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`5">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`6">
            <summary>
            A delegate supporting 2 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`6">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`7">
            <summary>
            A delegate supporting 3 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`7">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`8">
            <summary>
            A delegate supporting 4 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`8">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`9">
            <summary>
            A delegate supporting 5 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`9">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`10">
            <summary>
            A delegate supporting 6 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`10">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`11">
            <summary>
            A delegate supporting 7 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`11">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`12">
            <summary>
            A delegate supporting 8 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`12">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`13">
            <summary>
            A delegate supporting 9 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`13">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`14">
            <summary>
            A delegate supporting 10 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`14">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`15">
            <summary>
            A delegate supporting 11 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`15">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`16">
            <summary>
            A delegate supporting 12 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`16">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`17">
            <summary>
            A delegate supporting 13 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`17">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`18">
            <summary>
            A delegate supporting 14 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`18">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`19">
            <summary>
            A delegate supporting 15 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter19">The type of the nineteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
            <param name="nineteenth">The nineteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`19">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter19">The type of the nineteenth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
            <param name="nineteenth">The nineteenth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.MoreAction`20">
            <summary>
            A delegate supporting 16 more parameter(s) than <see cref="T:System.Action`1"/>.
            </summary>
            <remarks>
            This is necessary to infer the delegate type from a method that is passed in and thus remove the requirement
            on the user to cast to a specific delegate type. Since <see cref="T:System.Action`1"/> only allows up to four parameters
            we define delegates that will allow us to infer more (up to 20).
            </remarks>
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter19">The type of the nineteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter20">The type of the twentieth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
            <param name="nineteenth">The nineteenth parameter to the delegate method.</param>
            <param name="twentieth">The twentieth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.DataDrivenTest.Constraint`20">
            <typeparam name="TParameter1">The type of the first parameter to the delegate method.</typeparam>
            <typeparam name="TParameter2">The type of the second parameter to the delegate method.</typeparam>
            <typeparam name="TParameter3">The type of the third parameter to the delegate method.</typeparam>
            <typeparam name="TParameter4">The type of the fourth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter5">The type of the fifth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter6">The type of the sixth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter7">The type of the seventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter8">The type of the eighth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter9">The type of the ninth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter10">The type of the tenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter11">The type of the eleventh parameter to the delegate method.</typeparam>
            <typeparam name="TParameter12">The type of the twelfth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter13">The type of the thirteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter14">The type of the fourteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter15">The type of the fifteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter16">The type of the sixteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter17">The type of the seventeenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter18">The type of the eighteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter19">The type of the nineteenth parameter to the delegate method.</typeparam>
            <typeparam name="TParameter20">The type of the twentieth parameter to the delegate method.</typeparam>
            <param name="first">The first parameter to the delegate method.</param>
            <param name="second">The second parameter to the delegate method.</param>
            <param name="third">The third parameter to the delegate method.</param>
            <param name="fourth">The fourth parameter to the delegate method.</param>
            <param name="fifth">The fifth parameter to the delegate method.</param>
            <param name="sixth">The sixth parameter to the delegate method.</param>
            <param name="seventh">The seventh parameter to the delegate method.</param>
            <param name="eighth">The eighth parameter to the delegate method.</param>
            <param name="ninth">The ninth parameter to the delegate method.</param>
            <param name="tenth">The tenth parameter to the delegate method.</param>
            <param name="eleventh">The eleventh parameter to the delegate method.</param>
            <param name="twelfth">The twelfth parameter to the delegate method.</param>
            <param name="thirteenth">The thirteenth parameter to the delegate method.</param>
            <param name="fourteenth">The fourteenth parameter to the delegate method.</param>
            <param name="fifteenth">The fifteenth parameter to the delegate method.</param>
            <param name="sixteenth">The sixteenth parameter to the delegate method.</param>
            <param name="seventeenth">The seventeenth parameter to the delegate method.</param>
            <param name="eighteenth">The eighteenth parameter to the delegate method.</param>
            <param name="nineteenth">The nineteenth parameter to the delegate method.</param>
            <param name="twentieth">The twentieth parameter to the delegate method.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute">
            <summary>
            An attribute describing a database query whose results represent the values to test for every parameter.
            </summary>
            <example>
            The <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute"/> attribute defines a query whose results represent the values to
            test for every parameter of a helper method test classes deriving from <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>. In this
            example, a test method calls <see cref="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String)"/> to invoke the method that will
            perform the test for each record returned by the query:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                [DBParameterSet("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [SomeName] FROM [SomeTable]")]
                public void SomeTestHelper(int a, string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            <para/>
            In the event that one desires that MadMan perform combinatorial expansion on the values retrieved from the database,
            the <see cref="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.ExpandCombinatorials"/> property can be set to true. In this
            example, a test method calls <see cref="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String)"/> to invoke the method that will
            perform the test for all combinations of those parameters as calculated by the <see cref="T:Microsoft.Test.DataDriven.Combination"/> class:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                [DBParameterSet("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [SomeName] FROM [SomeTable]", ExpandCombinatorials = true)]
                public void SomeTestHelper(int a, string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            <para/>
            If the parameters' values are to be retrieved from specific columns, the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/>
            can be assigned to those parameters to indicate by name or by index the column in which their values appear:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                [DBParameterSet("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeColumn], [SomeID], [SomeName] FROM [SomeTable]", ExpandCombinatorials = true)]
                public void SomeTestHelper([DBParameterValueSet(ColumnName = "SomeName")]string a, [DBParameterValueSet(ColumnIndex = 1)]int b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterSetAttribute">
            <summary>
            Base class for method-level attributes describing an external source from which to drive tests.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterSetAttribute.Process(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processes the attribute when called upon by MadMan.
            </summary>
            <param name="sender">The object that is calling into the attribute.</param>
            <param name="args">The arguments to be specified by the attribute.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterSetAttribute.CreateReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates the appropriate <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> implementation for retrieving data from the external source.
            </summary>
            <param name="readerInfo">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> storing reader information.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute"/> class.
            </summary>
            <param name="connectionString">The connection string to the database from which to retrieve data.</param>
            <param name="query">The query to perform to retrieve data.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.CreateReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.Database.DBParametersReader"/> for retrieving data from a SQL database.
            </summary>
            <param name="readerInfo">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> storing reader information.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.ConnectionString">
            <summary>
            Gets the connection string to the database from which to retrieve data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.Query">
            <summary>
            Gets the query to perform to retrieve data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.SqlParameterNames">
            <summary>
            Gets or sets the list of SQL parameter names to include in the query.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.SqlParameterValues">
            <summary>
            Gets or sets the list of values of SQL parameters named in <see cref="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.SqlParameterNames"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.TableIndex">
            <summary>
            Gets or sets the index of the table (in a query returning multiple tables)
            containing values for the parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute.ExpandCombinatorials">
            <summary>
            Gets or sets a value indicating whether or not to perform combinatorial
            expansion on the values for the method's parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Database.DBParametersReader">
            <summary>
            An implementation of <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> for reading test data from a SQL database
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader">
            <summary>
            Base class for reading test data from an external source.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.AddParameters(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds parameters to be included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.AddRows(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds rows to be tested and not included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.CalculateExpandedValueCount(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Estimates the number of values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> for which to estimate the number of expanded values.</param>
            <returns>
            The number of values anticipated from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.ExpandValues(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Expands the values contained within the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> whose values to expand.</param>
            <returns>The values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.ExpandCombinatorials">
            <summary>
            Gets or sets a value indicating whether or not to expand combinatorials.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader.Tracker">
            <summary>
            Gets the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersTracker"/> for tracking already processed parameters and readers
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.IParameterColumnsReader">
            <summary>
            An interface for readers whose parameters corresond to indexes of columns in
            an external data source
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.IParameterColumnsReader.Parameters">
            <summary>
            Gets the parameters associated with this reader
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.IParameterColumnsReader.ColumnIndexes">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the index of the column containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.DataDriven.Database.DBParametersReader"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.AddParameters(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds parameters to be included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.AddRows(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds rows to be tested and not included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.CalculateExpandedValueCount(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Estimates the number of values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> for which to estimate the number of expanded values.</param>
            <returns>
            The number of values anticipated from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.ExpandValues(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Expands the values contained within the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> whose values to expand.</param>
            <returns>The values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.RetrieveData(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Retrieves data from the database and attempts to resolve the requested parameter.
            </summary>
            <param name="parameterData">The parameter to resolve as part of retrieving data.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.RetrieveData">
            <summary>
            Retrieves data from the database.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.PrepareParameters(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Prepares parameters for expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.Resolve(System.Boolean,Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Resolves the current <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> by identifying the location
            within the query results at which this parameter's values are defined.
            </summary>
            <param name="useDefault">Whether or not to use default values for column and table
            index if matching is not certain.</param>
            <param name="parameterData"></param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParametersReader.Resolve(System.Data.DataTable,Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Resolves the current <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> by determining if its values
            are contained within the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> which may contain the parameter's
            values.</param>
            <param name="parameterData"></param>
            <returns>A value indicating whether or not the specified <see cref="T:System.Data.DataTable"/> contains
            the parameter's values.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.ConnectionString">
            <summary>
            Gets or sets the connection string to the server and database from which
            to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.Query">
            <summary>
            Gets or sets the query to execute to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.SqlParameters">
            <summary>
            Gets the list of SQL parameters to include in the query.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.Command">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.DataSet">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.DataDriven.Database.DBParametersReader.DataSet"/> containing the values to test for
            this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.Parameters">
            <summary>
            Gets the parameters associated with this reader
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.ColumnIndexes">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the index of the column containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.ColumnNames">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the name of the column containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.TableIndex">
            <summary>
            Gets or sets the index of the table (in a query returning multiple tables)
            containing values for the parameter represented by this
            instance of <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.TableIndexes">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the index of the table containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParametersReader.IncludeNull">
            <summary>
            Gets or sets a value indicating whether or not to include null values
            retrieved from the database in testing for this <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute">
            <summary>
            An attribute describing a database query whose results contain the values
            to test for a single parameter, or identifying the location within a dataset
            at which the parameter's values are to be found (used in conjunction with
            the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute"/> at the method level).
            </summary>
            <example>
            The <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/> attribute most commonly defines
            a query whose results contain the values to test for the parameter of a helper
            method in test classes deriving from <see cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>. In this
            example, a test method calls <see cref="M:Microsoft.Test.DataDriven.DataDrivenTest.Invoke(System.String)"/> to invoke
            the method that will perform the test for all combinations of those parameters
            as calculated by the <see cref="T:Microsoft.Test.DataDriven.Combination"/> class:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                public void SomeTestHelper(
                    [DBParameterValueSet(ConnectionString = "Server=server;Database=database;Integrated_Security=yes", Query = "SELECT [SomeID] FROM [SomeTable]")] int a,
                    [DBParameterValueSet(ConnectionString = "Server=server;Database=database;Integrated_Security=yes", Query = "SELECT [SomeName] FROM [SomeOtherTable]")] string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            <br/>
            The <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/> can be used in combination with
            other types of <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> on both other parameters and those
            corresponding to the same parameter. In this example, the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/>
            decorates only one of the test helper method's parameters, whereas instances of
            <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> are created for both in the call to invoke. Values
            tested for the first parameter will include both those values defined in the call
            to invoke as well as those resulting from the query defined by the
            <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/>, and will be included in combinatorial
            expansion with values defined in the call to invoke for the second parameter.
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke(this.SomeTestHelper, CreateData(1, 2, 3), CreateData("a", "b", "c"));
                }
                <para/>
                public void SomeTestHelper([DBParameterValueSet(ConnectionString = "Server=server;Database=database;Integrated_Security=yes", Query = "SELECT [SomeID] FROM [SomeTable]")] int a, string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            The <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/> can also be used to identify
            the location within the results of a query defined elsewhere at which the parameter's
            values are to be found. In this example, the test helper method is decorated with
            the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterSetAttribute"/> defining the query to execute, and
            each parameter is assigned the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/> defining
            the location within the results at which its values are to be found.
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    this.Invoke("SomeTestHelper");
                }
                <para/>
                [DBParameterSet("Server=server;Database=database;Integrated_Security=yes", "SELECT [SomeID], [SomeName] FROM [SomeTable]")]
                public void SomeTestHelper(
                    [DBParameterValueSet(ColumnIndex = 0)] int a,
                    [DBParameterValueSet(ColumnIndex = 1)] string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterValueSetAttribute">
            <summary>
            An attribute describing a parameter whose values will be retrieved from an external resource.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterValueSetAttribute.Process(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processes the attribute.
            </summary>
            <param name="sender">The caller.</param>
            <param name="args">The information about this particular processor.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterValueSetAttribute.CreateParameterAndReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> and <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> for
            expanding values.
            </summary>
            <param name="readerInfo">A <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> object to which to assign
            the created reader and parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterValueSetAttribute.PostProcess(System.Reflection.ParameterInfo,Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs)">
            <summary>
            
            </summary>
            <param name="parameterInfo"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.CreateParameterAndReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> and <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> for
            expanding values.
            </summary>
            <param name="readerInfo">A <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> object to which to assign
            the created reader and parameter.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.ConnectionString">
            <summary>
            Gets or sets the connection string to the database from which to retrieve data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.Query">
            <summary>
            Gets or sets the query to perform to retrieve data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.SqlParameterNames">
            <summary>
            Gets or sets the list of SQL parameter names to include in the query.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.SqlParameterValues">
            <summary>
            Gets or sets the list of values of SQL parameters named in <see cref="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.SqlParameterNames"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.ColumnIndex">
            <summary>
            Gets or sets the index of the column containing values for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.ColumnName">
            <summary>
            Gets or sets the name of the column containing values for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.TableIndex">
            <summary>
            Gets or sets the index of the table (in a query returning multiple tables)
            containing values for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.DBParameterValueSetAttribute.IncludeNull">
            <summary>
            Gets or sets a value indicating whether or not to include null values
            retrieved from the database in testing for this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1">
            <summary>
            A class representing a method's parameter of type <typeparamref name="T"/> and its possible values
            for combinatorial generation as read from a SQL database.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/>.</typeparam>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> representing a parameter
            whose values are retrieved from an external resource.
            </summary>
            <typeparam name="T">The type of data represented by the parameter.</typeparam>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ParameterData`1">
            <summary>
            A class representing a method's parameter of type <typeparamref name="T"/> and its possible values
            for combinatorial generation.
            </summary>
            <typeparam name="T">The type of parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> class representing
            a method's parameter of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/> class representing
            a method's parameter named <paramref name="name"/> of type <typeparamref name="T"/>.
            </summary>
            <param name="name">The name of the method's parameter represented by the <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAllValuesSet(System.Collections.IEnumerable)">
            <summary>
            Adds all of a set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="data">The values included in the set being added.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(System.Collections.Generic.IList{`0},Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="values">The values included in the equivalent set being added.</param>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used for selecting values from the set.</param>
            <returns>An <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> representing the equivalent set that was added.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(System.Collections.Generic.IList{`0},Microsoft.Test.MaDLybZ.Seed,System.Int32)">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="values">The values included in the equivalent set being added.</param>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used for selecting values from the set.</param>
            <param name="count">The number of times to use the equivalent set.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(System.Collections.Generic.IList{`0})">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="values">The values included in the equivalent set being added.</param>
            <returns>An <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> representing the equivalent set that was added.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="values">The values included in the equivalent set being added.</param>
            <param name="count">The number of times to use the equivalent set.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(Microsoft.Test.MaDLybZ.FactorySet{`0})">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="toAdd">The FactorySet included in the equivalent set being added.</param>
            <returns>An <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> representing the equivalent set that was added.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddAsEquivalentSet(Microsoft.Test.MaDLybZ.FactorySet{`0},System.Int32)">
            <summary>
            Adds an equivalent set of values to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="toAdd">The FactorySet included in the equivalent set being added.</param>
            <param name="count">The number of times to use the equivalent set.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.AddSelectableData(Microsoft.Test.DataDriven.ISelectableData)">
            <summary>
            Adds an equivalent set of values selected from the specified <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/>
            to the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <param name="data">The values included in the equivalent set being added.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.CalculateExpandedValueCount">
            <summary>
            Calculates the number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <returns>
            The number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.ExpandValues">
            <summary>
            Expands the values contained within the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
            <returns>The values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ParameterData`1.MergeWith(Microsoft.Test.DataDriven.ParameterData{`0})">
            <summary>
            Merges the with.
            </summary>
            <param name="toMergeWith">To merge with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toMergeWith"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ParameterData`1.AllValueSets">
            <summary>
            Gets a collection of all values for the method's parameter represented by the current
            <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ParameterData`1.EquivalentSets">
            <summary>
            Gets a collection of the equivalent sets of values for the method's parameter represented
            by the current <see cref="T:Microsoft.Test.DataDriven.ParameterData`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1.CalculateExpandedValueCount">
            <summary>
            Calculates the number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/>.
            </summary>
            <returns>
            The number of values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1.ExpandValues">
            <summary>
            Expands the values contained within the current <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/>.
            </summary>
            <returns>The values expanded from the current <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1.Reader">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> which will retrieve data
            from an external resource for this parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlParameterData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> class representing
            a method's parameter of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.ConnectionString">
            <summary>
            Gets or sets the connection string to the server and database from which
            to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.Query">
            <summary>
            Gets or sets the query to execute to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.SqlParameters">
            <summary>
            Gets the list of SQL parameters to include in the query.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.Command">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to read parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.DataSet">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.DataSet"/> containing the values to test for
            this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.ColumnIndex">
            <summary>
            Gets or sets the index of the column containing values for the parameter
            represented by this instance of <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.ColumnName">
            <summary>
            Gets or sets the name of the column containing values for the parameter
            represented by this instance of <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.TableIndex">
            <summary>
            Gets or sets the index of the table (in a query returning multiple tables)
            containing values for the parameter represented by this
            instance of <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.IncludeNull">
            <summary>
            Gets or sets a value indicating whether or not to include null values
            retrieved from the database in testing for this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.DBParametersReader">
            <summary>
            Gets the <see cref="P:Microsoft.Test.DataDriven.Database.SqlParameterData`1.DBParametersReader"/> for this parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.CreateSqlParameters(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object})">
            <summary>
            Creates a dictionary of name/value pairs for SQL parameters.
            </summary>
            <param name="sqlParameterNames">The names of SQL parameters to add to the command.</param>
            <param name="sqlParameterValues">The values of the specified SQL parameters</param>
            <returns>A dictionary of name/value pairs representing SQL parameters.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.CreateSqlCommand(System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.Data.SqlClient.SqlCommand"/> for querying a SQL database.
            </summary>
            <param name="connectionString">The connection string to the SQL database.</param>
            <param name="query">The query to execute.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlCommand"/> using the specified connection string and query.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.CreateSqlCommand(System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object})">
            <summary>
            Creates a <see cref="T:System.Data.SqlClient.SqlCommand"/> for querying a SQL database.
            </summary>
            <param name="connectionString">The connection string to the SQL database.</param>
            <param name="query">The query to execute.</param>
            <param name="sqlParameterNames">The names of SQL parameters to add to the command.</param>
            <param name="sqlParameterValues">The values of the specified SQL parameters</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlCommand"/> using the specified connection string, query and parameters.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.CreateSqlCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a <see cref="T:System.Data.SqlClient.SqlCommand"/> for querying a SQL database.
            </summary>
            <param name="connectionString">The connection string to the SQL database.</param>
            <param name="query">The query to execute.</param>
            <param name="sqlParameters">The list of SQL parameters to include in the query.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlCommand"/> using the specified connection string, query and parameters.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.ResolveParametersWithoutExpansion(Microsoft.Test.DataDriven.Database.DBParametersReader)">
            <summary>
            Resolves <see cref="T:Microsoft.Test.DataDriven.Database.SqlParameterData`1"/> objects to the location of their values
            within a dataset when the rows are to be invoked directly rather than subjecting
            parameters to combinatorial expansion.
            </summary>
            <param name="reader"></param>
            <returns>The index of the table within the dataset containig the values to test.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.DetermineResolutionNeeded(Microsoft.Test.DataDriven.Database.DBParametersReader)">
            <summary>
            Determines if column resolution is needed for any parameters.
            </summary>
            <param name="reader"></param>
            <returns>True if resolution is not needed; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.ResolveTable(Microsoft.Test.DataDriven.Database.DBParametersReader)">
            <summary>
            Attempts to determine the table containing test data if not specified
            by the user.
            </summary>
            <param name="reader"></param>
            <returns>The index within the dataset of the table believed to contain test data.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Database.SqlUtilities.ResolveColumns(Microsoft.Test.DataDriven.Database.DBParametersReader)">
            <summary>
            Attempts to determine the columns containing test data if not specified
            by the user.
            </summary>
            <param name="reader"></param>
            <returns>True if the parameters have been able to be resolved to columns.</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute">
            <summary>
            An attribute describing a character-delimited text file whose records represent the values to test for every parameter.
            </summary>
            <seealso cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute"/> class.
            </summary>
            <param name="file">The name of, or path to, the text file from which to generate test data.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.CreateReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader"/> for retrieving data from a delimited text file.
            </summary>
            <param name="readerInfo">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> storing reader information.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.File">
            <summary>
            Gets the name of, or path to, the text file from which to generate test data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.HeaderSize">
            <summary>
            Gets or sets the number of rows comprising the file's header. The specified number of
            rows at the beginning of the file will be ignored. Defaults to zero.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.TrailerSize">
            <summary>
            Gets or sets the number of rows comprising the file's trailer. The specified number of
            rows at the end of the file will be ignored. Defaults to zero.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute.ExpandCombinatorials">
            <summary>
            Gets or sets a value indicating whether or not to perform combinatorial
            expansion on the values for the method's parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader">
            <summary>
            An implementation of <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> for reading test data from a delimited file
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.AddParameters(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds parameters to be included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.AddRows(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Adds rows to be tested and not included in combinatorial expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.CalculateExpandedValueCount(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Estimates the number of values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> for which to estimate the number of expanded values.</param>
            <returns>
            The number of values anticipated from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.ExpandValues(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Expands the values contained within the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> whose values to expand.</param>
            <returns>The values expanded from the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.RetrieveData">
            <summary>
            Retrieves data from the database.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.PrepareParameters(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Prepares parameters for expansion.
            </summary>
            <param name="args">The event arguments from the calling event.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.UpdatePath">
            <summary>
            Updates the specified path to the file from which to generate test data.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.UpdateDataForHeaderAndTrailer">
            <summary>
            Updates <see cref="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.DataTable"/> to account for <see cref="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.HeaderSize"/> and <see cref="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.TrailerSize"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.ResolveColumns">
            <summary>
            Attempts to determine the columns containing test data if not specified
            by the user.
            </summary>
            <returns>True if the parameters have been able to be resolved to columns.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.File">
            <summary>
            Gets or sets the name of, or path to, the text file from which to generate test data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.HeaderSize">
            <summary>
            Gets or sets the number of rows comprising the file's header, which should be ignored
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.TrailerSize">
            <summary>
            Gets or sets the number of rows comprising the file's trailer, which should be ignored
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.DataTable">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.DataTable"/> containing the values to test for
            this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.Parameters">
            <summary>
            Gets the parameters associated with this reader
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.ColumnIndexes">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the index of the column containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParametersReader.ColumnNames">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects belonging to this
            reader to the name of the column containing the parameter's data within the dataset.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute">
            <summary>
            An attribute describing a database query whose results contain the values
            to test for a single parameter, or identifying the location within a dataset
            at which the parameter's values are to be found (used in conjunction with
            the <see cref="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterSetAttribute"/> at the method level).
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.CreateParameterAndReader(Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> and <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> for
            expanding values.
            </summary>
            <param name="readerInfo">A <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> object to which to assign
            the created reader and parameter.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.File">
            <summary>
            Gets or sets the name of, or path to, the text file from which to generate test data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.HeaderSize">
            <summary>
            Gets or sets the number of rows comprising the file's header, which should be ignored
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.TrailerSize">
            <summary>
            Gets or sets the number of rows comprising the file's trailer, which should be ignored
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.ColumnIndex">
            <summary>
            Gets or sets the index of the column containing values for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.DelimitedTextFileParameterValueSetAttribute.ColumnName">
            <summary>
            Gets or sets the name of the column containing values for the parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersProcessor">
            <summary>
            An implementation of <see cref="T:Microsoft.Test.DataDriven.Processing.Processors.DefaultProcessor"/> for processing test data from an external source.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.DefaultProcessor">
            <summary>
            The default processor engine.  Used by the <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEngine"/> if an attribute that can be used as a default isn't used.  It can also be used to inherit from to extend the default processor behavior.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.Processor">
            <summary>
            A class that is used to extend data driven processing.  This class can be used to extend most aspects of the data driven process.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.#ctor(System.Boolean,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new instance of the Processor class, specifying whether the engine can replace the default processing engine.
            </summary>
            <param name="replacesDefault">True if the Processor derived object can be used to to replace the default processing engine.</param>
            <param name="parentSeed">The master seed for producing variants and producing variant seeds from.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentSeed"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.CreateInvocationEngine(Microsoft.Test.DataDriven.Processing.ProcessorEvents,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Creates an <see cref="T:Microsoft.Test.DataDriven.Processing.InvocationEngine"/> used to invoke data driven variants.  This allows the processing engine to override how each variant is invoked.
            </summary>
            <param name="events">The event source for invocation such as a <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEngine"/>.</param>
            <param name="args">The arguments that have been used to during the StartingInvocation event.  This indicates which variants to execute.</param>
            <returns>The engine which will be used to invoke each variant.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.GenerateVariantResult(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Generates a new TestResult from the given parent result.
            </summary>
            <param name="parent">The parent for the generated result.</param>
            <returns>A new result that is a sub result of the specified result.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parent"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.GenerateVariantSeed">
            <summary>
            Generates a new Seed for the data driven variant.
            </summary>
            <returns>The new seed.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.ProcessVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Processes a variant, this will call InvokeVariant.
            </summary>
            <param name="preArgs">The pre invocation args.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.InvokeVariant(Microsoft.Test.DataDriven.Processing.VariantExecutionInformation)">
            <summary>
            Override to use to invoke the variant for each data driven variant.
            </summary>
            <param name="executionInformation">The VariantExecutionInformation to use for invoking the variant.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Used to handle ExpandingCombinatorial events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <returns>A hint that will be returned to OnExpandedCombinatorials.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnExpandedCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs,System.Object)">
            <summary>
            Used to handle ExpandedCombinatorial events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <param name="fromExpandingCombinatorials">The hint returned from OnExpandingCombinatorials</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnStartingInvocation(System.Object,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Used to handle StartingInvocation events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <returns>A hint to pass to OnFinishedInvocation as well as variant invocation events.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnInvokingVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object)">
            <summary>
            Used to handle InvokingVariant events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <param name="fromStartingInvocation">The hint returned from OnStartingInvocation.</param>
            <returns>A hint to pass to OnInvokedVariant and OnVariantException.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnInvokedVariant(System.Object,Microsoft.Test.DataDriven.InvocationEventArgs,System.Object,System.Object,System.Object)">
            <summary>
            Used to handle InvokedVariant events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <param name="fromStartingInvocation">The hint returned from OnStartingInvocation.</param>
            <param name="fromInvokingVariant">The hint returned from OnInvokingVariant.</param>
            <param name="fromVariantException">The hint returned from OnVariantException</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnVariantException(System.Object,Microsoft.Test.DataDriven.InvocationExceptionEventArgs,System.Object,System.Object)">
            <summary>
            Used to handle VariantException events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <param name="fromStartingInvocation">The hint returned from OnStartingInvocation.</param>
            <param name="fromInvokingVariant">The hint returned from OnInvokingVariant.</param>
            <returns>A hint to pass to OnInvokedVariant.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.OnFinishedInvocation(System.Object,Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs,System.Object)">
            <summary>
            Used to handle FinishedInvocation events and send that event on to the target if it is a ProcessorEventSink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args for the event.</param>
            <param name="fromStartingInvocation">The hint returned from OnStartingInvocation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.Processors.Processor.ReplacesDefault">
            <summary>
            True if the Processor can replace the default processor engine, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.Processors.Processor.ParentSeed">
            <summary>
            The Seed that is the root for the variant invocation.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing">
            <summary>
            Used to send events to the invocation target if it is of type ProcessorEventSink 
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ProcessorEvents">
            <summary>
            The events that are exposed during processing.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.ClearAllDelegates">
            <summary>
            Clears all the delegate invocation lists
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.InvocationEngineInvokingVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Called by an <see cref="T:Microsoft.Test.DataDriven.Processing.InvocationEngine"/> to indicate that a variant is about to be invoked.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Test.DataDriven.InvocationEventArgs"/> that has data about the invocation event.</param>
            <returns>Exceptions from event delegates or null if there are none.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.InvocationEngineHandledException(Microsoft.Test.DataDriven.InvocationExceptionEventArgs)">
            <summary>
            Called by an <see cref="T:Microsoft.Test.DataDriven.Processing.InvocationEngine"/> to indicate that a variant has thrown an exception when invoked.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Test.DataDriven.InvocationEventArgs"/> that has data about the invocation exception.</param>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.InvocationEngineInvokedVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Called by an <see cref="T:Microsoft.Test.DataDriven.Processing.InvocationEngine"/> to indicate that a variant has completed invocation.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Test.DataDriven.InvocationEventArgs"/> that has data about the invocation event.</param>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireExpandingCombinatorials(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Fires the event that is fired prior to combinatorial expansion.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireExpandedCombinatorials(Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs)">
            <summary>
            Fires the event that is fired after combinatorial expansion.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireStartingInvocation(Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Fires the event that is fired before any variants are invoked.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireInvokingVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the event that is fired before a specific variant is invoked.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireInvokedVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the event that is fired after a specific variant is invoked.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireVariantExceptionOccurred(Microsoft.Test.DataDriven.InvocationExceptionEventArgs)">
            <summary>
            Fires the event that is fired if a variant throws an exception.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FireFinishedInvocation(Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs)">
            <summary>
            Fires the event that is fired after all the variants have been invoked.
            </summary>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEvents.TryFireEvent``1(System.EventHandler{``0},``0)">
            <summary>
            Fires an event and handles and returns the exception thrown if any
            </summary>
            <typeparam name="T">The argument type for the event to fire</typeparam>
            <param name="handler">The multicast delegate to fire</param>
            <param name="args">The arguments to pass to the handler</param>
            <returns>Details surrounding any exceptions that occurred or null if there were none</returns>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.ExpandingCombinatorials">
            <summary>
            The event that is fired prior to combinatorial expansion.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.ExpandedCombinatorials">
            <summary>
            The event that is fired after combinatorial expansion.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.StartingInvocation">
            <summary>
            The event that is fired before any variants are invoked.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.InvokingVariant">
            <summary>
            The event that is fired before a specific variant is invoked.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.InvokedVariant">
            <summary>
            The event that is fired after a specific variant is invoked.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.VariantExceptionOccurred">
            <summary>
            The event that is fired if a variant throws an exception.
            </summary>
        </member>
        <member name="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FinishedInvocation">
            <summary>
            The event that is fired after all the variants have been invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new instance of the TargetEventing class
            </summary>
            <param name="targets">The targets for the events</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.#ctor(System.Object)">
            <summary>
            Creates a new instance of the TargetEventing class
            </summary>
            <param name="target">The target of the events</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireExpandingCombinatorials(Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Fires the event that is fired prior to combinatorial expansion.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireExpandedCombinatorials(Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs)">
            <summary>
            Fires the event that is fired after combinatorial expansion.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireStartingInvocation(Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Fires the event that is fired before any variants are invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireInvokingVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the event that is fired before a specific variant is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireInvokedVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the event that is fired after a specific variant is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireVariantExceptionOccurred(Microsoft.Test.DataDriven.InvocationExceptionEventArgs)">
            <summary>
            Fires the event that is fired if a variant throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.Processor.TargetEventing.TargetFireFinishedInvocation(Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs)">
            <summary>
            Fires the event that is fired after all the variants have been invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.DefaultProcessor.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new instance of the DefaultProcessor class.
            </summary>
            <param name="parentSeed">The master seed to use during processing</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.DefaultProcessor.#ctor(System.Boolean,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new instance of the DefaultProcessor class.
            </summary>
            <param name="replacesDefault">True if the derived processor should replace the default, false otherwise.</param>
            <param name="parentSeed">The master seed to use during processing</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.DefaultProcessor.InvokeVariant(Microsoft.Test.DataDriven.Processing.VariantExecutionInformation)">
            <summary>
            Invokes a data driven variant.
            </summary>
            <param name="executionInformation">Information about the variant to invoke.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executionInformation"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersProcessor.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersProcessor"/> class.
            </summary>
            <param name="dataSeed">The master seed.</param>
            <param name="reader">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> instance which will retrieve data from the external source.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersProcessor.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Handles the ExpandingCombinatorials event and prepares parameters for expansion, or
            removes them for record-for-record variant execution from the resultset.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The ExpandingCombinatorials event args.</param>
            <returns>This method does not have a hint so it returns the base hint.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersProcessor.Reader">
            <summary>
            Gets or sets the processor's <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo">
            <summary>
            A class for storing information needed by a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.#ctor(Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> class.
            </summary>
            <param name="args">The arguments specified by the sender.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.#ctor(System.Reflection.ParameterInfo,Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo"/> class.
            </summary>
            <param name="parameterInfo">The parameter requiring the reader.</param>
            <param name="args">The arguments specified by the sender.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.ParameterInfo">
            <summary>
            Gets the object that is calling into the processor requiring the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.DiscoveryEventArgs">
            <summary>
            Gets the arguments specified by the sender.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.PostProcessingArgs">
            <summary>
            Gets the arguments specified by the sender.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.Reader">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.ParameterData">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderInfo.ParameterData"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReaderCollection">
            <summary>
            A class representing a list of <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> objects
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersTracker">
            <summary>
            A class for tracking previously created <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExternalData.ExternalParametersTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersTracker"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExternalData.ExternalParametersTracker.MethodReaders">
            <summary>
            Gets a dictionary mapping invoked methods with their readers.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs">
            <summary>
            Event args passed after discovery is done
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.DataEventArgs">
            <summary>
            EventArgs for events that deal with ParameterData or Rows for a data driven test.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.DataEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},Microsoft.Test.DataDriven.CompoundCollection{System.Object})">
            <summary>
            Creates a new DataEventArgs instance with the specified parameters and rows.
            </summary>
            <param name="parameters">The parameters for the data driven test, if this is null the <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters"/> collection will be an empty list.</param>
            <param name="rows">The rows for the data driven test, if this is null the <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Rows"/> collection will be an empty list.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.DataEventArgs.Add(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Adds the specified parameters to the <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters"/> collection.
            </summary>
            <param name="parameterData">The parameters to add or merge into the <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters"/> collection.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.DataEventArgs.Add(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Adds the data associated with the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> specified to <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters"/>.  If an ParameterData for the specified parameter already exists the data specified in the passed ParameterData will be merged into the existing ParameterData.
            </summary>
            <param name="parameterData">The parameter data to add into the collection <see cref="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters"/>.</param>
            <returns>Either the ParameterData that was passed in or the one that already existed in the Parameters collection.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Parameters">
            <summary>
            The parameters to use for the data driven test invocation.  These parameters will be candidates for combinatorial expansion.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.DataEventArgs.Rows">
            <summary>
            The rows for the data driven test invocation.  Each of these rows are used intact for invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.Test.DataDriven.Processing.ProcessorEventSink},System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Object,System.Reflection.MethodInfo)">
            <summary>
            Creates a new FinishedDiscoveryEventArgs instance
            </summary>
            <param name="discoveredProcessors">The processors found</param>
            <param name="parameters">The parameters found</param>
            <param name="rows">The rows found</param>
            <param name="method">The method being processed</param>
            <param name="target">The object that the method is being processed on</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs.DiscoveredProcessors">
            <summary>
            The processors that were discovered
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs.DeclaredOn">
            <summary>
            The object that <see cref="P:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs.MethodInfo"/> was defined on.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.FinishedDiscoveryEventArgs.MethodInfo">
            <summary>
            The method that the processor attribute was attached to.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ThreadedProcessorAttribute">
             <summary>
             Marks the test helper to be invoked on multiple threads simultaneously.
             </summary>
             <remarks>
             This attribute can be used to run tests on multiple threads using the .NET thread pool, multiple worker threads to a specified number, and to run a specified test in a serial manner and then in parallel to catch concurrency issues.
             <code>
             [TestMethod]
             public void InvokeOnMultipleThreads()
             {
                 this.Invoke(this.InvokeOnMultipleThreads, CreateData(1, 2, 3), CreateData(1, 2, 3));
             }
            
             [ThreadedProcessor]
             public void InvokeOnMultipleThreads(int a, int b)
             {
                 var product = a * b;
                 Assert.IsTrue((b == 0 &amp;&amp; product == 0) || (product / b == a));
             }
             </code>
             </remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.#ctor">
            <summary>
            Creates a new instance of the ThreadedProcessorAttribute class, by default the threaded processor will use the .NET thread pool and will replace default invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.DiscoverProcessor(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            This is used to create a processor for this attribute
            </summary>
            <param name="sender">The caller</param>
            <param name="args">Information about the discovered processor</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.UseThreadPool">
            <summary>
            If true the invocation will take place on the .Net thread pool, if false the number of threads specified by <see cref="P:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.ThreadCount"/> will be spawned and used instead.  The default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.ThreadCount">
            <summary>
            This specifies the number of threads to use when invoking variants.  If <see cref="P:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.UseThreadPool"/> is set to true this parameter is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ThreadedProcessorAttribute.DefaultInvocation">
            <summary>
            If true the variants will execute only using multi-threaded invocation, if false the variants will execute both serially and then in parallel.  The default is true.
            </summary>
            <remarks>
            The difference in invocation here is based off the intent of running variants in parallel.  If the intent is to speed up execution this property should be set to true.  If the intent is to reuse tests for concurrency this property should be set to false.
            </remarks>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.CombinatorialProcessingException">
            <summary>
            Exception that is thrown when a non-recoverable error happens while processing data for combinatorial invokation.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.CombinatorialProcessingException.#ctor">
            <summary>
            Creates a default CombinatorialProcessingException.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.CombinatorialProcessingException.#ctor(System.String)">
            <summary>
            Creates a CombinatorialProcessException with the specified error message.
            </summary>
            <param name="error">A message describing the error that occurred.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.CombinatorialProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a CombinatorialProcessException with the specified error message and inner exception.
            </summary>
            <param name="error">A message describing the error that occurred.</param>
            <param name="inner">An exception that was caught while processing.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.CombinatorialProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a CombinatorialProcessException.
            </summary>
            <param name="info">The serialized information.</param>
            <param name="context">The context for the serialization.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.DataDrivenProcessorAttribute">
            <summary>
            The DataDrivenProcessorAttribute is used to define a new processor for data driven tests.  This processor is a method defined on an attribute that is used to decorate a method or parameter to that method that is invoked through a data driven test.   If extending an existing attribute use an extension method and decorate that method with this attribute.
            </summary>
            <remarks>
            The DataDrivenProcessorAttribute is used to decorate a method that is a delegate of type <see cref="T:Microsoft.Test.DataDriven.Processing.Processors.DiscoverDataDrivenProcessor"/>.  This can be used to augment the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> or row data that is sent into each variant.  Additionally this method can return a <see cref="T:Microsoft.Test.DataDriven.Processing.Processors.Processor"/> which can hook processing events.
            
            Consider an attribute designed to retrieve data from a SQL table and use it for invoking data driven tests.  This would be a good attribute to have, but there is already one in Microsoft.VisualStudio.TestTools.UnitTesting called DataSourceAttribute.  So let's illustrate extending this attribute.
            <code>
            TODO
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ProcessorEngine">
            <summary>
            The ProcessorEngine class is the class that takes care of processing data driven variants, from discovering all variants attached to a target method to combining them and executing them.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.engines">
            <summary>
            Processor queue, the default processor comes first, everything else is executed in discovery order
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.method">
            <summary>
            MethodInfo for the method to be executed
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.parameters">
            <summary>
            Parameters specified by the data driven processors discovered
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.rows">
            <summary>
            Rows specified by the data driven processors discovered
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.seed">
            <summary>
            Master seed used for expanding combinations and generating the seed for each variant.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.Processing.ProcessorEngine.target">
            <summary>
            The target for invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEngine.#ctor(System.Object,System.Reflection.MethodInfo,Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.DataDriven.Processing.ProcessorEventSink[])">
            <summary>
            Creates a new ProcessorEngine object.
            </summary>
            <param name="target">The invocation target.</param>
            <param name="method">The method to invoke.</param>
            <param name="masterSeed">The seed to use when combining data and invoking variants.</param>
            <param name="dataSeed">The seed to use when producing data.</param>
            <param name="additionalProcessors"></param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEngine.Dispose">
            <summary>
            Disposes of the ProcessorEngine
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEngine.Invoke(Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData},System.Predicate{System.Exception},System.Type,System.Int32,System.Delegate[])">
            <summary>
            Invokes a method through the <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEngine"/>.
            </summary>
            <param name="rowData">User specified rows.</param>
            <param name="parameterData">User specified parameters.</param>
            <param name="onException">The delegate to call when a exception occurs while invocation.</param>
            <param name="combinatorialCollectionType">The type of the combinatorial collection class to use to perform combinatorial expansion</param>
            <param name="order">The combinatorial order to use when doing expansion.</param>
            <param name="constraints">The constraints to apply during expansion.</param>
            <returns>The information about each combinatorial invocation.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEngine.Current">
            <summary>
            The current Processor being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.DiscoverDataDrivenProcessor">
            <summary>
            Target that defines a data driven processor.
            </summary>
            <param name="sender">The object that is discovering the processors attached to a data driven variant.</param>
            <param name="args">Used to specify the data or processor engine to extend data driven variant.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler">
            <summary>
            Class to wrap a Predicate&lt;Exception&gt; based exception delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.#ctor(System.Predicate{System.Exception})">
            <summary>
            Creates a new instance of the ExceptionPredicateHandler wrapping the specified predicate.
            </summary>
            <param name="occurred"></param>
            <remarks>This just wraps the delegate specified, the method <see cref="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.Sink(Microsoft.Test.DataDriven.Processing.ProcessorEvents)"/> needs to be called to sink the proper event in order for the predicate to be called.</remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.OnVariantExceptionOccurred(System.Object,Microsoft.Test.DataDriven.InvocationExceptionEventArgs)">
            <summary>
            The event handler that calls the predicate delegate this class was initialized with.
            </summary>
            <param name="sender">The processor queue or manager that is sending this event</param>
            <param name="args">The data surrounding the exception that occurred and the data that was used to invoke the variant that failed.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.Remove">
            <summary>
            Removes the event sink from the event source passed into <see cref="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.Sink(Microsoft.Test.DataDriven.Processing.ProcessorEvents)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ExceptionPredicateHandler.Sink(Microsoft.Test.DataDriven.Processing.ProcessorEvents)">
            <summary>
            Sinks the VariantExceptionOccurred event from the instance specified.
            </summary>
            <param name="eventSource">The event source to sink the VariantExceptionOccurred event on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="eventSource"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.InvocationEventArgs">
            <summary>
            Event args used for combinatorial events.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.InvocationEventArgs.#ctor(Microsoft.Test.DataDriven.Processing.VariantExecutionInformation,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.InvocationEventArgs"/> class.
            </summary>
            <param name="info">The variant execution information.</param>
            <param name="variantIndex">Index of the current variant.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> is null, this is not supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="variantIndex"/> parameter is less than zero, this parameter has to be set to a postive index.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.InvocationParameters">
            <summary>
            Gets the invocation parameters.
            </summary>
            <value>The invocation parameters.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.Target">
            <summary>
            The target of invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.MethodInfo">
            <summary>
            The method to be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.TestOutcome">
            <summary>
            The outcome of the invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.VariantExecutionInformation">
            <summary>
            Data to use when invoking the method to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationEventArgs.VariantIndex">
            <summary>
            The number of the variant executed.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.InvocationExceptionEventArgs">
            <summary>
            Class that used when exposing an invocation exception.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.#ctor(Microsoft.Test.DataDriven.Processing.VariantExecutionInformation,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.InvocationExceptionEventArgs"/> class.
            </summary>
            <param name="info">The info about the variant.</param>
            <param name="index">The index of the variant.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter was null, this should be a valid reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter was less than zero, this index must be positive.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.Continue">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Test.DataDriven.InvocationExceptionEventArgs"/> is continue.
            </summary>
            <value><c>true</c> if continue; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.InvocationParameters">
            <summary>
            Gets or sets the invocation parameters.
            </summary>
            <value>The invocation parameters.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.VariantIndex">
            <summary>
            Index of the variant.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.InvocationExceptionEventArgs.VariantExecutionInformation">
            <summary>
            The variation execution information about the variant.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.LineItemAttribute">
            <summary>
            An attribute describing an object array to be used for a method invocation.
            </summary>
            <example>  
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {   
                    InvokeLineItemTestMethod("SomeTest");
                }    
                [LineItem(1,"cat")]
                [LineItem(2,"dog")]
                public void SomeTest(int a, string b)
                {
                    Console.WriteLine("testing LineItem a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.DataDriven.DataDrivenTest"/>        
        </member>
        <member name="M:Microsoft.Test.DataDriven.LineItemAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.AllValueSetAttribute"/> class
            having the specified values.
            </summary>
            <param name="values">All possible values for a parameter.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.LineItemAttribute.RowProcessor(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Rows the processor.
            </summary>
            <param name="sender">The caller.</param>
            <param name="args">The information about this particular processor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.LineItemAttribute.Values">
            <summary>
            Gets all possible values for a parameter.
            </summary>
            <value>All possible values for a parameter.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.LineItemAttribute.ExpectedException">
            <summary>
            Gets or sets the type of exception expected.
            </summary>
            <value>The type of the expected exception.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.LineItemAttribute.ExceptionMessage">
            <summary>
            Gets or sets the exception message.
            </summary>
            <value>The exception message.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.LineItemAttribute.SubstringMatch">
            <summary>
            Gets or sets a value indicating whether to match on exception substring.l
            </summary>
            <value><c>true</c> if to use substring match on the exception message; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.MemberFactoryAttribute">
            <summary>
            MethodFactory is used to specify a member name that returns IEnumerable
            for use in datageneration
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.MemberFactoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.MemberFactoryAttribute"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.MemberFactoryAttribute.ProcessAttributeData(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processor for the member factory set
            </summary>
            <param name="sender">The caller.</param>
            <param name="args">The information for the processor and details about the processor information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.MemberFactoryAttribute.MemberName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.MemberFactoryAttribute.DeclaringType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type that the <see cref="P:Microsoft.Test.DataDriven.MemberFactoryAttribute.MemberName"/> is implemented on.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.NWiseCombinationCollection">
            <summary>
            A collection of combinations of parameter values generated by n-wise combinatorial generation.
            </summary>
            <example>
            In this example, a test method has two parameters expecting enumeration values, a scenario
            which is likely best tested using pairwise combinatorials.
            <code>
            private enum First
            {
                A,
                B,
                C
            }
            <para/>
            private enum Second
            {
                X,
                Y,
                Z
            }
            <para/>
            [TestMethod]
            public void SomeTest()
            {
                MethodInfo testMethod = this.GetType().GetMethod("SomeTestWithParameters");
                IList&lt;ParameterData&gt; parameters = this.GenerateParameterData(testMethod);
                DataTable testSchema = CombinatorialInvoker.CreateTestSchema(parameters);
                List&lt;ExpandedValueCollection&gt; expandedParameterValues = new List&lt;ExpandedValueCollection&gt;();
                foreach (ParameterData param in parameters)
                {
                    expandedParameterValues.Add(param.ExpandValues());
                }
                <para/>
                NWiseCombinationCollection combination = new NWiseCombinationCollection(
                    this.Seed.Spawn(),
                    2, // Pairwise
                    expandedParameterValues,
                    testSchema,
                    null);
                <para/>
                foreach (DataRow test in combination)
                {
                    testMethod.Invoke(this, test.ItemArray);
                }
            }
            <para/>
            public void SomeTestWithParameters(
                [AllValueSet(First.A, First.B, First.C)] First a,
                [AllValueSet(Second.X, Second.Y, Second.Z)] Second b)
            {
                Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.DataDriven.CombinationCollection">
            <summary>
            A class facilitating enumeration through combinations of parameters' values.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinationCollection.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Int32,System.Collections.Generic.IList{Microsoft.Test.DataDriven.ExpandedValueCollection},System.Data.DataTable,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/> class.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to select combinations
            at random.</param>
            <param name="orderN">The order of the collection.</param>
            <param name="expandedValuesList">The expanded values contained within the <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/>.</param>
            <param name="testSchema">The <see cref="T:System.Data.DataTable"/> which will contain the combinations.</param>
            <param name="constraints">The constraints modeling valid combinations.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="seed"/>, <paramref name="testSchema"/> or <paramref name="expandedValuesList"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinationCollection.CreateCompoundCollection">
            <summary>
            Creates a CompoundCollection from the CombinationCollection instance.
            </summary>
            <returns>The compound collection created</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinationCollection.IsValidCombination(System.Data.DataRow)">
            <summary>
            Determines whether the specified combination is valid given the <see cref="T:Microsoft.Test.DataDriven.Constraint"/>s
            defined within the current <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/>.
            </summary>
            <param name="testCase">The combination of parameter values to validate.</param>
            <returns>
            <c>true</c> if the specified combination of parameters is valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="testCase"/> parameter was null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CombinationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.Constraints">
            <summary>
            Gets the constraints modeling valid combinations.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.Current">
            <summary>
            Gets the current parameter value.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.ExpandedValuesList">
            <summary>
            Gets the expanded values contained within the current <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.Seed">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to select combinations
            at random.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.TestSchema">
            <summary>
            Gets the <see cref="T:System.Data.DataTable"/> which will contain the combinations.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CombinationCollection.OrderN">
            <summary>
            Gets or sets the order of combinations formed in the current <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/>.
            </summary>
            <remarks>
            A value of 1 will produce the minimum number of combinations. A value of 2 will produce pairwise
            combinations. A value of 3 will produce threewise combinations, and so forth.
            </remarks>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseCombinationCollection.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Int32,System.Collections.Generic.IList{Microsoft.Test.DataDriven.ExpandedValueCollection},System.Data.DataTable,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.NWiseCombinationCollection"/> class.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to select combinations
            at random.</param>
            <param name="orderN">The order of the collection.</param>
            <param name="expandedValues">The expanded values contained within the <see cref="T:Microsoft.Test.DataDriven.NWiseCombinationCollection"/>.</param>
            <param name="testSchema">The <see cref="T:System.Data.DataTable"/> which will contain the combinations.</param>
            <param name="constraints">The constraints modeling valid combinations.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseCombinationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Test.DataDriven.NWiseEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.NWiseCombinationCollection.CoveredTuples">
            <summary>
            Gets the all the tuples covered in the combinations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.NWiseEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.NWiseEnumerator.MaxTries">
            <summary>
            Maximum number of retries before giving up on a pair
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseEnumerator.#ctor(Microsoft.Test.DataDriven.NWiseCombinationCollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.NWiseCombinationCollection"/> class.
            </summary>
            <param name="combinationCollection">The combination collection.</param>
            <param name="orderN">The order N.</param>       
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseEnumerator.MoveNext">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseEnumerator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseEnumerator.ValidateCurrentCombination">
            <summary>
            Validates the current combination.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.NWiseEnumerator.CoveredTuples">
            <summary>
            For testability purposes, expose covered tuples;
            e.g. for pairwise testing, all the pairs covered in the combation.
            </summary>
            <value>The covered tuples.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.NWiseHelper">
             <summary>
             
            The basic pairwise enumeration logic is
            for (int i = 0; i &lt; parameters.Length; i++)
            {
              for (int j = i + 1; j &lt; parameters.Length; j++)
              {
                  for (int primary = 0; primary &lt; primarySetLength; primary++)
                  {
                     for (int secondary = 0; secondary &lt; secondarySetLength; secondary++)
                     {
                        Create pair for parameter[i]'s value at index primary
                          with parameter[j]'s value at index secondary 
                     }
                   }
               }
            }
             This logic is encapsulated in this helper class
             </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Int32,System.Collections.Generic.IList{Microsoft.Test.DataDriven.ExpandedValueCollection},System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.NWiseHelper"/> class.
            </summary>
            <param name="seed">The seed.</param>
            <param name="orderN">The order N.</param>
            <param name="expandedValuesList">The expanded values list.</param>
            <param name="coveredPairs">The covered pairs.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="coveredPairs"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.AddCoveredTupleCombinations">
            <summary>Adds the tuple combinations covered in the current combination to the list 
            of covered tuple combinations to keep track of which tuple combinations we
            have covered so far</summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.RandomizeOtherValues">
            <summary>
            Randomizes the other values.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.FindNextTupleIndexes(System.Int32[])">
            <summary>
            Finds the next tuple indexes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NWiseHelper.GetTupleCombinationId(System.Int32[])">
            <summary>Get the combination id that identifies the tuple combination of given ParameterDatas
            with given indices</summary>        
            <returns>The tupe combination id</returns>        
        </member>
        <member name="P:Microsoft.Test.DataDriven.NWiseHelper.CoveredPairs">
            <summary>
            Gets or sets the covered pairs.
            </summary>
            <value>The covered pairs.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.NWiseHelper.Seed">
            <summary>
            Gets or sets the seed.
            </summary>
            <value>The seed.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1">
            <summary>
            A collection of equivalent sets of a parameter's values.
            </summary>
            <typeparam name="T">The type of the parameter whose values are contained
            within the collection.</typeparam>
        </member>
        <member name="F:Microsoft.Test.DataDriven.EquivalentSetCollection`1.data">
            <summary>
            The list of values contained within the current <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Add(Microsoft.Test.DataDriven.ISelectableData{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">The argument <paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Contains(Microsoft.Test.DataDriven.ISelectableData{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.CopyTo(Microsoft.Test.DataDriven.ISelectableData{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.IndexOf(Microsoft.Test.DataDriven.ISelectableData{`0})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Insert(System.Int32,Microsoft.Test.DataDriven.ISelectableData{`0})">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">The argument <paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Remove(Microsoft.Test.DataDriven.ISelectableData{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.EquivalentSetCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.EquivalentSetCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:Microsoft.Test.DataDriven.EquivalentSetCollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.EquivalentSetCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> at the specified index.
            </summary>
            <param name="index">The index at which to get or set the <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/>.</param>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than 0 or greater than the last element in the collection.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.NamedArgument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.NamedArgument.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.NamedArgument"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.NamedArgument.Argument">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.NamedArgument.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs">
            <summary>
            EventArgs for the <see cref="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.FinishedInvocation"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.GroupInvocationEventArgs">
            <summary>
            Base class for group invocation events arguments <see cref="T:Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs"/> and <see cref="T:Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.GroupInvocationEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.Test.DataDriven.Processing.VariantExecutionInformation})">
            <summary>
            Creates a new GroupInvocationEventArgs instance for the group of invocations specified.
            </summary>
            <param name="executionInformation">The invocation group that is part of this event.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executionInformation"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.GroupInvocationEventArgs.ExecutionInformation">
            <summary>
            Represents the invocation execution information for this invocation group.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs.#ctor(Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Initializes a new instance of the FinishedInvocationEventArgs class.
            </summary>
            <param name="startingInvocation">The data from the starting invocation event.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.InvocationEngine">
            <summary>
            The InvocationEngine class is designed to allow ProcessorEngines to change the way variants are invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.#ctor(Microsoft.Test.DataDriven.Processing.VariationInvoker,Microsoft.Test.DataDriven.Processing.SeedGenerator,Microsoft.Test.DataDriven.Processing.ProcessorEvents,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Creates a new instance of the InvocationEngine class.
            </summary>
            <param name="processorInvoker">The method that will invoke the variant method.</param>
            <param name="seedGenerator">A method that will generate a variant seed.</param>
            <param name="events">The event source for processor events.</param>
            <param name="args">The args that specify which variants to invoke.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="processorInvoker"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="seedGenerator"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="events"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.InvokeVariants">
            <summary>
            This method invokes the variants that was specified to the InvocationEngine on creation.
            </summary>
            <returns>The execution information from variant invocation.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.FireInvokingVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the invoking variant event on the event sink that this instance was initialized with.
            </summary>
            <param name="args">The args to pass to the event.</param>
            <returns>True if the variant should be invoked, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.FireInvokedVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Fires the invoked variant event on the event sink that this instance was initialized with.
            </summary>
            <param name="args">The args to pass to the event.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.FireVariantInvocationException(Microsoft.Test.DataDriven.InvocationExceptionEventArgs)">
            <summary>
            Fires the variant exception event on the event sink that this instance was initialized with.
            </summary>
            <param name="args">The args to pass to the event.</param>
            <returns>True if invocation should continue, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.InvokeVariant(Microsoft.Test.DataDriven.Processing.VariantExecutionInformation,System.Int32)">
            <summary>
            Method used to invoke a specific variant.
            </summary>
            <param name="executionInformation">The information about the variant to invoke.</param>
            <param name="variantIndex">The variant number.</param>
            <returns>True if invocation should continue, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executionInformation"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.InvokeVariant(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Invokes the specified variant.
            </summary>
            <param name="args">Arguments that specify which variant to execute.</param>
            <returns>True if invocation should continue, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.InvokeVariants(Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs)">
            <summary>
            The method to use to invoke the variants attached to the invocation engine.
            </summary>
            <param name="args">The information about the variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.InvocationEngine.TryInvoke(Microsoft.Test.DataDriven.InvocationEventArgs)">
            <summary>
            Invokes the variant specified and handles any exceptions returned along with firing the exception event if the variant does throw an exception.B
            </summary>
            <param name="args">Data about the variant to invoke.</param>
            <returns>True if invocation should continue, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.InvocationEngine.VariationInvoker">
            <summary>
            The method that will invoke the variant method.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.InvocationEngine.SeedGenerator">
            <summary>
            A method that will generate a variant seed.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.ThreadedInvocationEngine">
            <summary>
            This is the invocation engine to drive multi-threaded test variants.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ThreadedInvocationEngine.#ctor(System.Boolean,System.Int32,Microsoft.Test.DataDriven.Processing.VariationInvoker,Microsoft.Test.DataDriven.Processing.SeedGenerator,Microsoft.Test.DataDriven.Processing.ProcessorEvents,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Creates a new instance of the ThreadedInvocationEngine class
            </summary>
            <param name="useThreadPool">True if invocation should use the .Net thread pool, false if invocation should spawn a specified number of threads.</param>
            <param name="numberOfThreads">The number of threads to spawn.  If <paramref name="useThreadPool"/> is true this parameter is ignored.</param>
            <param name="processorInvoker">The processor invocation method.</param>
            <param name="seedGenerator">The seed generator.</param>
            <param name="eventSource">The event source.</param>
            <param name="args">The variants to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ThreadedInvocationEngine.InvokeVariants(Microsoft.Test.DataDriven.Processing.FinishedInvocationEventArgs)">
            <summary>
            Invokes the variants in a multi-threaded fashion
            </summary>
            <param name="args">The variants to invoke</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.ThreadedProcessor">
            <summary>
            Processor class to generate a multi-threaded processor
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ThreadedProcessor.#ctor(System.Boolean,System.Int32,System.Boolean,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new instance of the ThreadedProcessor
            </summary>
            <param name="replaceDefault">Whether or not to use this processor in lieu of the default processor</param>
            <param name="numberOfThreads">Number of threads to use, this is ignored if the <paramref name="useThreadPool"/> parameter is set to true.</param>
            <param name="useThreadPool">True if invocation should use the .Net thread pool, false otherwise.</param>
            <param name="parentSeed">The parent seed.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ThreadedProcessor.CreateInvocationEngine(Microsoft.Test.DataDriven.Processing.ProcessorEvents,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Creates an <see cref="T:Microsoft.Test.DataDriven.Processing.Processors.ThreadedInvocationEngine"/> used to invoke data driven variants.
            </summary>
            <param name="events">The event source for invocation such as a <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEngine"/>.</param>
            <param name="args">The arguments that have been used to during the StartingInvocation event.  This indicates which variants to execute.</param>
            <returns>The engine which will be used to invoke each variant.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs">
            <summary>
            EventArgs for the <see cref="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.ExpandedCombinatorials"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.#ctor(Microsoft.Test.DataDriven.CombinationCollection,Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the PostExpansionEventArgs class.
            </summary>
            <param name="expandedData">The combinatorially expanded parameters.</param>
            <param name="rows">The row data to use for data driven invocation.</param>
            <param name="target">The target to be invoked.</param>
            <param name="method">The method to be invoked.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expandedData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.MergeData">
            <summary>
            Merges the data from <see cref="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.ExpandedData"/> and <see cref="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.Rows"/>.  This method leaves the original data intact so it can be used without affecting the outcome of downstream callers.
            </summary>
            <returns>The merged output.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.Count">
            <summary>
            The count of variants that will be invoked with the current information contained in <see cref="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.ExpandedData"/> and <see cref="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.Rows"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.ExpandedData">
            <summary>
            The combinatorially expanded parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.MethodInfo">
            <summary>
            The method to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.Rows">
            <summary>
            The rows for data driven invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PostExpansionEventArgs.Target">
            <summary>
            The target of invocation.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs">
            <summary>
            The arguments used for the <see cref="E:Microsoft.Test.DataDriven.Processing.ProcessorEvents.ExpandingCombinatorials"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Object,System.Reflection.MethodInfo,Microsoft.Test.MaDLybZ.Seed,System.Type,System.Collections.Generic.IEnumerable{System.Delegate})">
            <summary>
            Creates a new instance of the PreExpansionEventArgs class.
            </summary>
            <param name="parameters">The ParameterData inputs into the combinatorial expansion process.</param>
            <param name="rows">The row inputs for variant invocation.</param>
            <param name="target">The object target that implements the method specified by the <paramref name="method"/> parameter.</param>
            <param name="method">The method that will be invoked for each data driven variant.  This method is invoked on the instance specified by <paramref name="target"/>.</param>
            <param name="seed">The seed to used to produce data.</param>
            <param name="combinationCollectionType">The type of <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/> class to use for combinatorial expansion.</param>
            <param name="constraints">The constraints to apply during combinatorial expansion of the <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> contained in <paramref name="parameters"/>.</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.CombinatorialCollectionType">
            <summary>
            The type of the <see cref="T:Microsoft.Test.DataDriven.CombinationCollection"/> class to use for combinatorial expansion.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.Constraints">
            <summary>
            A list of constraints to use during combinatorial expansion.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.Target">
            <summary>
            The object instance that implements the method specified by <see cref="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.MethodInfo">
            <summary>
            The method to use to invoke the data driven variants.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.Order">
            <summary>
            The order that should be used for combinatorial expansion.  For example if this value is 2 then pairwise expansion will be used.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs.Seed">
            <summary>
            The Seed that should be used for producing random data.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs">
            <summary>
            The EventArgs to use for processor discovery.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.#ctor(System.Object,System.Reflection.MethodInfo,System.Reflection.ParameterInfo,System.Attribute,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new instance of the ProcessorDiscoveryEventArgs class.
            </summary>
            <param name="instance">The instance of the class that the processor attribute was discovered on.</param>
            <param name="attachedToMethod">The method that the processor attribute was discovered on.</param>
            <param name="attachedToParameter">The parameter that the processor attribute was discovered on or null if the processor attribute was specified on a method.</param>
            <param name="attribute">The processor attribute instance.</param>
            <param name="seed">The seed to use during processor discovery.  Can be used to instantiate new randomly generated data.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attachedToMethod"/> or <paramref name="attribute"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.Add(Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Adds a <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> to the ProcessorDiscoveryEventArgs instance.
            </summary>
            <param name="parameterData">The parameter to add</param>
            <returns>The added parameter or the parameter that the data was added to if a ParameterData instance existed for the specified parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.Attribute">
            <summary>
            The processor attribute instance that discovery is being run on.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.DeclaredOn">
            <summary>
            The object that <see cref="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.Attribute"/> was defined on.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.MethodInfo">
            <summary>
            The method that the processor attribute was attached to.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.ParameterInfo">
            <summary>
            The parameter that the processor attribute was attached to or null if the processor attribute was attached to the method only.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.Processor">
            <summary>
            Used by the processor discover method to specify a <see cref="T:Microsoft.Test.DataDriven.Processing.ProcessorEventSink"/> to use during processing.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.Seed">
            <summary>
            Seed to use if the discovery algorithm needs to generate random data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs.FinishedDiscoveryCallback">
            <summary>
            This will be called back after processor discovery is finished.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail">
            <summary>
            This class holds details of an exception that was thrown during firing a processor event.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.#ctor(System.Exception,System.Object,System.String,System.EventArgs)">
            <summary>
            Creates a new instance of the ProcessorEventExceptionDetail class.
            </summary>
            <param name="exception">The exception handled</param>
            <param name="target">The target that threw the exception</param>
            <param name="eventSource">The name of the event that triggered the exception</param>
            <param name="args">The arguments for the event</param>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.Exception">
            <summary>
            The exception that occurred
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.EventArgs">
            <summary>
            The event arguments that were sent with the event.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.Target">
            <summary>
            The object that threw the exception
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.EventSource">
            <summary>
            The name of the event on which the exception occurred
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.ProcessorEventExceptionDetail.ProcessorSpecifiedErrorMessage">
            <summary>
            The name of the event which triggered the exception
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.OrderProcessor">
            <summary>
            Overrides the order for the variants executed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.OrderProcessor.#ctor(System.Int32,System.String[])">
            <summary>
            Creates a new order processor with the specified order.
            </summary>
            <param name="order">The combinatorial order to use when combining data.</param>
            <param name="constraints">The constraints.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.OrderProcessor.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            Used to override the combinatorial order prior to combinatorial expansion.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">Data about the combinatorial expansion to occur.</param>
            <returns>This processor just passes the hint returned from the base method.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.Processors.ReproductionProcessor">
            <summary>
            Class that sets up a specific reproduction.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ReproductionProcessor.#ctor(System.Int32,System.Nullable{System.Int32},Microsoft.Test.MaDLybZ.Seed,System.Nullable{System.Int32})">
            <summary>
            Creates a new ReproductionProcessor instance given the seed, variant and the master seed.
            </summary>
            <param name="seed">The seed to use for reproduction.</param>
            <param name="variant">The variant index.</param>
            <param name="dataSeed">The master seed.</param>
            <param name="workItem">Work item to associate this item with, if any.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ReproductionProcessor.#ctor(System.Int32,System.Nullable{System.Int32},Microsoft.Test.MaDLybZ.Seed,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a new ReproductionProcessor instance given the seed, variant and the master seed.  This constructor allows the user to specify the repro attribute to only reproduce values, in other words no default expansion would be performed.
            </summary>
            <param name="seed">The seed to use for reproduction.</param>
            <param name="variant">The variant index.</param>
            <param name="dataSeed">The master seed.</param>
            <param name="workItem">Work item to associate this item with, if any.</param>
            <param name="onlyRepro">When true yhis processor will replace the default processor and no random variants will be expanded otherwise the default processor will be not be replaced.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ReproductionProcessor.OnExpandingCombinatorials(System.Object,Microsoft.Test.DataDriven.Processing.PreExpansionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.Processors.ReproductionProcessor.OnStartingInvocation(System.Object,Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs)">
            <summary>
            Handles the StartingInvocation event and removes all but the variant to be reproduced.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The StartingInvocation event arguments.</param>
            <returns>This method does not have a hint to pass so it passes the base hint.</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.SeedGenerator">
            <summary>
            Delegate that generates seeds for data driven variants.
            </summary>
            <returns>The generated seed.</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs">
            <summary>
            Event arguments for the StartingInvocation event.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs.#ctor(System.Object,System.Reflection.MethodInfo,Microsoft.Test.DataDriven.CompoundCollection{System.Object},System.Collections.Generic.IList{Microsoft.VisualStudio.TestTools.Common.TestResult})">
            <summary>
            Creates a new instance of the StartingInvocationEventArgs class.
            </summary>
            <param name="target">Target of the invocation.</param>
            <param name="method">Method to be invoked.</param>
            <param name="invocationData">The expanded data to use for invocation.</param>
            <param name="results">The test results for the invocation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="invocationData"/> or <paramref name="results"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <paramref name="invocationData"/> and the <paramref name="results"/> collections does not match.  These collections should match each other in length.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs.AbortVariants(Microsoft.VisualStudio.TestTools.Common.TestOutcome,System.Exception,System.String)">
            <summary>
            Aborts execution of the variants with the specified outcome, exception and error.
            </summary>
            <param name="outcome">The outcome for the tests.</param>
            <param name="exception">The exception to specify for each variant.</param>
            <param name="error">The error for each variant.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="error"/> and <paramref name="exception"/> parameters were null, either <paramref name="error"/> should be specified (can be empty) or <paramref name="exception"/> must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.StartingInvocationEventArgs.Aborted">
            <summary>
            True if the invocation has been aborted, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation">
            <summary>
            The VariantExecutionInformation class contains data pertaining to a data driven variant execution.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.#ctor(System.Collections.Generic.IList{System.Object},System.Reflection.MethodInfo,System.Object,Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Creates a new instance of the VariantExecutionInformation class.
            </summary>
            <param name="variationData">The data to use to invoke the data driven variant.</param>
            <param name="methodInfo">The method to be invoked.</param>
            <param name="target">The object to invoke.</param>
            <param name="result">The TestResult to associate results of the invocation with.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.#ctor(System.Collections.Generic.IList{System.Object},System.Reflection.MethodInfo,System.Object,System.String,System.Exception,Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Creates a new instance of the VariantExecutionInformation class.
            </summary>
            <param name="variationData">The data to use to invoke the data driven variant.</param>
            <param name="methodInfo">The method to be invoked.</param>
            <param name="target">The object to invoke.</param>
            <param name="error">The error message for the failed test.</param>
            <param name="exception">The exception that occurred during test execution.</param>
            <param name="result">The TestResult to associate results of the invocation with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="variationData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.DetermineOutcome(Microsoft.VisualStudio.TestTools.Common.TestOutcome)">
            <summary>
            Determines the test outcome based off the information provided.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.Error">
            <summary>
            The error message for the test.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.Exception">
            <summary>
            The exception that occurred during execution.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.MethodInfo">
            <summary>
            The method to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.Result">
            <summary>
            The returned object from the invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.Seed">
            <summary>
            The seed value for this variant.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.Target">
            <summary>
            The target object to invoke the method specified in <see cref="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.MethodInfo"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.TestResult">
            <summary>
            The result for the variant.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation.VariationData">
            <summary>
            The data for the variant.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Processing.VariationInvoker">
            <summary>
            Delegate that will invoke a specific variant
            </summary>
            <param name="args">Data about the variant to invoke.</param>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ReproAttribute">
            <summary>
            Allows the user to specify a particular repro, for reproducing test results.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ReproAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ReproAttribute"/> class.
            </summary>
            <param name="seed">The seed that will reproduce the results desired.</param>
            <param name="variation">The variation to reproduce.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ReproAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ReproAttribute"/> class.
            </summary>
            <param name="seed">The seed that will reproduce the results desired.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ReproAttribute.ProcessReproAttribute(System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Hands back a processor engine to process the repro represented
            </summary>
            <param name="sender">The object that is calling into the repro attribute to get the processor arguments</param>
            <param name="args">The arguments to be specified by the repro attribute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ReproAttribute.Seed">
            <summary>
            Gets or sets the seed.
            </summary>
            <value>The seed that will reproduce the results desired.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ReproAttribute.Variation">
            <summary>
            Gets or sets the variation number.
            </summary>
            <value>The variation to reproduce.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ReproAttribute.WorkItem">
            <summary>
            Associates the work item with a bug
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ReproAttribute.OnlyRepro">
            <summary>
            When true only the repro will be invoked, meaning that no random expansion will be performed.  When false random variants will be produced then the repro will be produced.  The default value for this property is false.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.RandomCombinationCollection">
            <summary>
            A collection of parameter value combinations chosen at random.
            </summary>
            <example>
            In this example, a test method has an integer parameter whose possible values as defined
            by <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> include all possible integers, and a string parameter
            whose possible values as defined <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> can be from 1 to 10
            characters in length and can include any alphanumeric character. In this case, since the
            parameters being tested are not expecting values from domain data, such as enumeration values,
            but rather can be chosen from wide ranges of unrelated values, random combinations may be
            preferred so as to provide additional coverage and greater distribution.
            <code>
            [TestMethod]
            public void SomeTest()
            {
                MethodInfo testMethod = this.GetType().GetMethod("SomeTestWithParameters");
                IList&lt;ParameterData&gt; parameters = this.GenerateParameterData(testMethod);
                DataTable testSchema = CombinatorialInvoker.CreateTestSchema(parameters);
                List&lt;ExpandedValueCollection&gt; expandedParameterValues = new List&lt;ExpandedValueCollection&gt;();
                foreach (ParameterData param in parameters)
                {
                    expandedParameterValues.Add(param.ExpandValues());
                }
                <para/>
                RandomCombinationCollection combination = new RandomCombinationCollection(
                    this.Seed.Spawn(),
                    expandedParameterValues,
                    testSchema,
                    null,
                    100);
                <para/>
                foreach (DataRow test in combination)
                {
                    testMethod.Invoke(this, test.ItemArray);
                }
            }
            <para/>
            public void SomeTestWithParameters([IntegerRange()] int a, [StringSet(MinLength = 1, MaxLength = 10, NamedCharacterSet = StringSet.NamedCharacterRange.Alphanumeric)] string b)
            {
                Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
            }
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.DataDriven.RandomCombinationCollection.maxIterations">
            <summary>
            The maximum number of combinations to include.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.RandomCombinationCollection.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Collections.Generic.IList{Microsoft.Test.DataDriven.ExpandedValueCollection},System.Data.DataTable,System.Collections.Generic.IList{System.Delegate},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.RandomCombinationCollection"/> class.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to select combinations
            at random.</param>
            <param name="expandedValues">The expanded values contained within the <see cref="T:Microsoft.Test.DataDriven.RandomCombinationCollection"/>.</param>
            <param name="testSchema">The <see cref="T:System.Data.DataTable"/> which will contain the combinations.</param>
            <param name="constraints">The constraints modeling valid combinations.</param>
            <param name="maxIterations">The maximum number of combinations to include.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.RandomCombinationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.CompoundCollection`1">
            <summary>
            A collection of <see cref="T:System.Collections.Generic.IList`1"/>s containing values of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values contained within each <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
        </member>
        <member name="F:Microsoft.Test.DataDriven.CompoundCollection`1.data">
            <summary>
            The <see cref="T:System.Collections.Generic.IList`1"/>s contained within the current row.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.CompoundCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.CompoundCollection`1"/> class.
            </summary>
            <param name="size">Size to reserve for elements in the list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="size"/> parameter was less than 0.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.Add(System.Collections.Generic.IList{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.Contains(System.Collections.Generic.IList{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.CopyTo(System.Collections.Generic.IList{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.IndexOf(System.Collections.Generic.IList{`0})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.Insert(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.Remove(System.Collections.Generic.IList{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.CompoundCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CompoundCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CompoundCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.CompoundCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The index at which to get or set the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <value>The value of the specified <paramref name="index"/>.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.Constraint">
            <summary>
            A delegate method that evaluates whether a set of parameters meets a constraint.
            </summary>
            <param name="parameters">The parameters to evaluate</param>
            <returns>True if the values of <paramref name="parameters"/> meet the constraint.</returns>
            <example>
            When a <see cref="T:Microsoft.Test.DataDriven.Combination"/> object's combinations are being generated, they are verified
            to meet all constraints that have been added. For simple constraints, a lambda expression is
            recommended:
            <code>
            [TestClass]
            public class SomeTestClass : DataDrivenTest
            {
                [TestMethod]
                public void SomeTest()
                {
                    MethodInfo testMethod = this.GetType().GetMethod("SomeTest", new Type[] { typeof(int), typeof(string) });
                    IList&lt;ParameterData&gt; parameters = this.GenerateParameterData(testMethod);
                    Combination combination = new Combination(Seed.NextSeed(), parameters.ToArray();
                    combination.AddConstraint(DataRow test =&gt; (int)test["a"] != 2 || (string)test["b"] != "dog");
                    foreach (DataRow test in combination.FullCombinations)
                    {
                        testMethod.Invoke(this, test.ItemArray);
                    }
                }
                <para/>
                public void SomeTest([AllValueSet(1, 2, 3)] int a, [AllValueSet("cat", "dog")] string b)
                {
                    Console.WriteLine("testing DataRow: a=" + a + ", b=" + b);
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ArgumentsDoNotMatch">
            <summary>
              Looks up a localized string similar to Attempted to call a method with the wrong type of parameters.  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AsymetricUseOfValidationContext">
            <summary>
              Looks up a localized string similar to Asymmetric use of validation context detected, this can be caused by overriding OnVariantInvoked() and failing to call the base method. Expected validation context with ID {0} to be available on validation context stack after call to DataDrivenTest::Initialize()..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemptedToAddResultTwice">
            <summary>
              Looks up a localized string similar to An attempt was made to add a TestResult object to the output capture twice, this is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemptedToAddToReadOnlyCollection">
            <summary>
              Looks up a localized string similar to An attempt was made to add data to a read only collection..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemptedToCreateCompoundParameterDataWithNullReference">
            <summary>
              Looks up a localized string similar to One or more of the ParameterData values passed was null.  CompoundParameter data should be created from all valid references..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemptingToEnumerateNonEnumType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; specified is not an enum type.  This is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemptToExpandPastMaxInt">
            <summary>
              Looks up a localized string similar to The number of expanded values in this ExpandedValuesCollection for the instance of ParameterData being expanded would exceed maximum value for integer.  This is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.AttemtpedToModifyReadOnlyCollection">
            <summary>
              Looks up a localized string similar to An attempt was made to modify a read only collection, this is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CombinatorialProcessingEventFailed">
            <summary>
              Looks up a localized string similar to During combinatorial processing for the class [{0}] the event [{1}] threw an exception:  &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CombinatorialProcessingEventFailedOverride">
            <summary>
              Looks up a localized string similar to {0}  The processor that threw the exception provided a specialized error message:  {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CouldNotFindProperMethod">
            <summary>
              Looks up a localized string similar to Could not find the proper method &apos;{0}&apos; to invoke..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CouldNotProperlyResolveMethodPositionalOnly">
            <summary>
              Looks up a localized string similar to The method {0} could not be found with the matching a signature of {0}({2})..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CouldNotProperlyResolveMethodWithNamedParameters">
            <summary>
              Looks up a localized string similar to The method {0} could not be found with the named parameters {1} or matching a signature of {0}({2})..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CreateDataWithNoParameters">
            <summary>
              Looks up a localized string similar to A call was made to Create{0}Data but no parameters were passed..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.CreateFactoryDataWithNullData">
            <summary>
              Looks up a localized string similar to A call was made to CreateFactoryData where one or more of the factories passed were null..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.DataRowAndResultCountsDoNotMatch">
            <summary>
              Looks up a localized string similar to The number of variants to be executed is mismatched, the number of data rows passed was {0} and the number of results was {1}.  These lists should have an equivalent number of elements..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.DestinationArrayIsNotLargeEnough">
            <summary>
              Looks up a localized string similar to An attempt was made to copy data to a target array that was too small to accommodate the source elements..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.EmptyMethodName">
            <summary>
              Looks up a localized string similar to This parameter cannot be empty string, it must be a valid method name..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.FactorySetDoesNotSupportSettingSeed">
            <summary>
              Looks up a localized string similar to SelectableFactorySet cannot replace the Seed on the FactorySet that it contains, reseed the existing seed instead of replacing the seed..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.FailedToResolveParameterTypeForValue">
            <summary>
              Looks up a localized string similar to ParameterType for value {0} was not specified.  An attempt was made to resolve the ParameterType through set membership but the value {0} is not a member in any set.  Either specify the type explicitly or create a set that contains the value {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.FoundTwoDifferingParameterTypes">
            <summary>
              Looks up a localized string similar to Attempted to determine ParameterType of value {0} by which set it is contained in, but it is contained in multiple sets which differ by type.  Found set of type {1} and set of type {2} containing value {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvalidContextWhenAttemptingToModifyStack">
            <summary>
              Looks up a localized string similar to When pushing or popping the current context the operation has to be called from the current context.  In case of pop the context can additionally be the parent context..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvalidMethodName">
            <summary>
              Looks up a localized string similar to The method &quot;{0}&quot; could not be found to invoke.  Check the method name and try again..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvalidProcessorReturnType">
            <summary>
              Looks up a localized string similar to &quot;Failed to cast the result of processor {0}.{1} to the proper type.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvocationAborted">
            <summary>
              Looks up a localized string similar to Variant was aborted by before it was invoked with error:  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvocationFailedDueToAccessibility">
            <summary>
              Looks up a localized string similar to Could not access the method {0} in order to invoke it.  Failed with error {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvokedDelegateThrewException">
            <summary>
              Looks up a localized string similar to The user provided delegate for Invoked threw an exception &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.InvokeWithNoData">
            <summary>
              Looks up a localized string similar to A call was made to the combinatorial invocation engine to invoke the method {0} where one or more of the parameters did not have data specified.  This is not supported. Parameter(s) with no data associated with them were: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.MemberFactoryReflectionFailed">
            <summary>
              Looks up a localized string similar to Could not find the proper member &apos;{0}&apos; to invoke on type &apos;{1}&apos;.  (Is it defined?  Is it public?{5})  Processing of MethodFactoryAttribute attached to parameter {2} on member {3}.{4} failed..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.MethodNameIsEmpty">
            <summary>
              Looks up a localized string similar to The specified method name was empty..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.NeedTargetToInvoke">
            <summary>
              Looks up a localized string similar to The method {0} is not static so the target to invoke cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.NotAllVariantsPassed">
            <summary>
              Looks up a localized string similar to {0} out of {1} variants had non-passing results ({2:P1} pass rate).{3}.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.OneDataDrivenVariantFailed">
            <summary>
              Looks up a localized string similar to One or more data driven test variants failed when invoking &quot;{0}.{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.OneDataDrivenVariantInconclusive">
            <summary>
              Looks up a localized string similar to One or more data driven test variants reported inconclusive when invoking &quot;{0}.{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ParameterCountIncorrect">
            <summary>
              Looks up a localized string similar to Attempted to invoke a method with the wrong number of parameters.  There were {0} parameters provided but {1} were needed for a successful invocation..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ParameterMissingAfterProcessing">
            <summary>
              Looks up a localized string similar to Failed to find the parameter {0} after processing parameters.  All parameters must be specified..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.PreviousFailureCausedVariantToBeAborted">
            <summary>
              Looks up a localized string similar to A previous variation failed.  While processing the exception user code instructed the framework to abort all pending variations..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ProcessorDiscoveryMethodThrewAnException">
            <summary>
              Looks up a localized string similar to The processor defined by the attribute {0} decorating method {1}.{2} failed to process. The exception thrown was &quot;{3}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ProcessorDiscoverySignatureDidNotMatch">
            <summary>
              Looks up a localized string similar to The processor defined by the attribute {0} decorating method {1}.{2} had a discovery method that was not of the proper signature.  All processor discovery methods should be of type {3}.  Check the method {4}.{5}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ProcessorThrewException">
            <summary>
              Looks up a localized string similar to &quot;Failed to run the processor for {0}.{1}.  Invocation failed with exception {2}.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ReflectNameFromOrderParameterCountMismatch">
            <summary>
              Looks up a localized string similar to Method {0} does not have {1} parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ReproData">
            <summary>
              Looks up a localized string similar to The current test variant failed, to reproduce the failure add the following attribute to your invoked method:
            [Repro({0}, {1})].
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ReproductionVariantOutOfRange">
            <summary>
              Looks up a localized string similar to An attempt was made to set up a reproduction specifying variant number {0}.  A number greater than zero is required..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ReproductionVariantTooHigh">
            <summary>
              Looks up a localized string similar to An request was made to reproduce variant {0} but there were only {1} variants produced..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.TestContextIsNull">
            <summary>
              Looks up a localized string similar to The current test instance has a TestContext property that currently evaluates to null.  This is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.TestContextMissing">
            <summary>
              Looks up a localized string similar to The current test instance is missing a TestContext property..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.TestResultDoesNotContainInnerResults">
            <summary>
              Looks up a localized string similar to The given TestResult does not contain inner results.  This could mean that the current test is not a unit test and therefore inner results are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.TestResultIsNull">
            <summary>
              Looks up a localized string similar to The current test instance has a TestContext that has a known result member but this member is null.  This is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.UnhandledExceptionOnDifferentThread">
            <summary>
              Looks up a localized string similar to The test threw an exception from a different thread than it was started on and the exception was not based off of System.Exception..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.UnknownCollectionType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from CombinationCollection, this is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.UnknownProcessingException">
            <summary>
              Looks up a localized string similar to An unknown exception occurred during processing combinatorial attributes and instructions..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.UnknownTestContextType">
            <summary>
              Looks up a localized string similar to The current test instance has a TestContext that does not have a known result member.  This is not supported.  Check that you are using the Visual Studio unit testing framework..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.UnnamedParameterData">
            <summary>
              Looks up a localized string similar to ParameterData needs to be named to add it to the ParameterData collection..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.ValidationFailed">
            <summary>
              Looks up a localized string similar to Validation failed for the {0} with the result:  {1}  Call stack for validation failure was {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.VariantFailed">
            <summary>
              Looks up a localized string similar to The variant &quot;{0}&quot; FAILED with &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ErrorMessages.VariantFailedAndValidationFailed">
            <summary>
              Looks up a localized string similar to The variant {0} failed.  In addition, validation failed with the result:
            {1}.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExpandedValue">
            <summary>
            A class representing one combinatorial value.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ExpandedValue.data">
            <summary>
            The expanded value.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValue.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> class with a specific expanded value
            </summary>
            <param name="data">The expanded value.</param>
            <param name="underlyingType">The underlying data type</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValue.#ctor(Microsoft.Test.DataDriven.ISelectableData,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> class with a <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/>
            to get the next expanded value at random.
            </summary>
            <param name="selector">The implementation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> which will be used to get
            the next expanded value at random.</param>
            <param name="underlyingType">The underlying data type</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValue.#ctor(System.Object,Microsoft.Test.DataDriven.ISelectableData,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> class with either a specific expanded
            value or with a <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> to get the next expanded value at random.
            </summary>
            <remarks>A non-null value should be provided for only one of the constructor's parameters. If a non-
            null value is provided for both parameters, the first will never be used.</remarks>
            <param name="data">The expanded value.</param>
            <param name="selector">The implmentation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> which will be used to get
            the next expanded value at random.</param>
            <param name="underlyingType">The underlying data type</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValue.ReseedSelector(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Reseeds the <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> used to get the next expanded value at random.
            </summary>
            <param name="seed">The value with which to reseed the <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/></param>
            <exception cref="T:System.ArgumentNullException">The argument <paramref name="seed"/> is null.</exception>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValue.Data">
            <summary>
            Gets the expanded value.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValue.IsRandomlySelectable">
            <summary>
            Gets a value indicating whether a value can be selected at random.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValue.Selector">
            <summary>
            Gets or sets the selector.
            </summary>
            <value>The selector.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValue.ExpandedValueType">
            <summary>
            The underlying data type of the expanded value
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExpandedValueCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ExpandedValueCollection.expandedValues">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>s contained within this collection.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> class that is empty
            and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> class that is empty
            and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new collection can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument <paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ExpandedValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> class containing
            the specified elements.
            </summary>
            <param name="data">The collection whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">The argument <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Add(Microsoft.Test.DataDriven.ExpandedValue)">
            <summary>
            Adds an <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to the end of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to be added to the end of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Clear">
            <summary>
            Removes all <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>s from the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Contains(Microsoft.Test.DataDriven.ExpandedValue)">
            <summary>
            Determines whether an <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> is in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to locate in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</param>
            <returns>True if <paramref name="item"/> is found in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.CopyTo(Microsoft.Test.DataDriven.ExpandedValue[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the
            specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>s
            copied from the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.IndexOf(Microsoft.Test.DataDriven.ExpandedValue)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> and returns the zero-based index of the first occurrence
            within the elements in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to locate in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</param>
            <returns>The zero-based index of the first occurrence within the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> of the
            desired <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Insert(System.Int32,Microsoft.Test.DataDriven.ExpandedValue)">
            <summary>
            Inserts an <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> into the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> should be inserted.</param>
            <param name="item">The <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to insert.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Remove(Microsoft.Test.DataDriven.ExpandedValue)">
            <summary>
            Removes the first occurrence of a specified <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> from the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to remove from the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</param>
            <returns>true if <paramref name="item"/> is successfully removed; otherwise, false. This method also returns false
            if <paramref name="item"/> was not found in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> at the specified index of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to remove.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Reseed(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Reseeds the <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> used by each <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> in the collection.
            </summary>
            <param name="seed">The value with which to reseed each <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>'s <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/></param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.SetNext">
            <summary>
            Sets <see cref="P:Microsoft.Test.DataDriven.ExpandedValueCollection.CurrentIndex"/> to the index of the next value in the collection.
            </summary>
            <returns>True if an element exists in the collection after the previous one; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExpandedValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValueCollection.Count">
            <summary>
            Gets the number of <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/>s actually contained in the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValueCollection.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValueCollection.CurrentIndex">
            <summary>
            Gets or sets the index of the current.
            </summary>
            <value>The index of the current.</value>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValueCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/> is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ExpandedValueCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> at the specified index of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValueCollection"/>
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.Test.DataDriven.ExpandedValue"/> to get or set.</param>
            <returns>The expanded value at the index passed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument <paramref name="index"/> was either negative or the collection was empty and therefore cannot be indexed into.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ExtensionMethods">
            <summary>
            Class containing extension methods defined for the Combinatorial namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.ProcessFactorySet(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object,Microsoft.Test.DataDriven.Processing.ProcessorDiscoveryEventArgs)">
            <summary>
            Processes the factory set.
            </summary>
            <param name="myAttribute">The FactorySetAttribute being extended to provide combinatorial invocation support.</param>
            <param name="sender">The caller of ProcessorFactorySet.</param>
            <param name="args">The processor discovery event args.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="myAttribute"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CompareSorted``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Determines whether two instances of <see cref="T:System.Collections.Generic.IEnumerable`1"/> contain the same values in the same order.
            </summary>
            <typeparam name="TLeft">The type of values enumerated by the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TRight">The type of values enumerated by the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to which
            the current one is being compared.</typeparam>
            <param name="left">The current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="right">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to which the current one will be compared.</param>
            <param name="comparer">A method to compare the current values of the two instances of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>True if the two instances of <see cref="T:System.Collections.Generic.IEnumerable`1"/> contain the same values in the same order;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="comparer"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.FindMostCommonAncestor``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the most common ancestor for the collection of the specified type.
            </summary>
            <typeparam name="T">The type of the collection, this will not necessarily be the same type as returned.</typeparam>
            <param name="collection">The collection to go through for the most common ancestor.</param>
            <returns>The type of the most common ancestor for all objects contained in the specified collection.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.FindMostCommonAncestor(System.Collections.IEnumerable)">
            <summary>
            Finds the most common ancestor for the collection
            </summary>
            <param name="collection">The collection to go through for the most common ancestor.</param>
            <returns>The type of the most common ancestor for all objects contained in the specified collection.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the specified <see cref="T:System.Action`1"/> for each value in the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of values contained within the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="enumerable">The current <see cref="T:System.Collections.Generic.IEnumerable`1"/> for each of whose values to 
            execute <paramref name="action"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to execute for each value in the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerable"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.OfType``1(Microsoft.Test.DataDriven.ISelectableData)">
            <summary>
            Converts an object that implements <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> to <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/>.
            </summary>
            <typeparam name="T">The type of data that the <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> interface will return.</typeparam>
            <param name="selectableData">The implementation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> to convert to typed equivalent.</param>
            <returns>The typed equivalent of <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> expanded with the type specified in <typeparamref name="T"/>.</returns>
            <remarks>This method will attempt to cast the non-specific interface to the typed equivalent.  If this is not successful it will wrap the interface provided with a type specific implementation.  At this point if the object returned by <see cref="M:Microsoft.Test.DataDriven.ISelectableData.NextObject"/> does not cast to the type provided the method <see cref="M:Microsoft.Test.DataDriven.ISelectableData`1.SelectData"/> will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selectableData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.GenerateNamedArgumentList(System.Reflection.MethodBase,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Generates a list of <see cref="T:Microsoft.Test.DataDriven.NamedArgument"/> objects that represent the parameters provided.
            </summary>
            <param name="method">The method that the parameters will be passed to</param>
            <param name="parameters">The parameters that will be passed</param>
            <returns>A list of <see cref="T:Microsoft.Test.DataDriven.NamedArgument"> objects.</see></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.GenerateNamedArgumentList(System.Reflection.MethodBase,System.Func{System.String,System.Object,Microsoft.Test.DataDriven.NamedArgument},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Generates a list of <see cref="T:Microsoft.Test.DataDriven.NamedArgument"/> objects that represent the parameters provided using the delegate provided to provide the text for the value of each parameter.
            </summary>
            <param name="method">The method that the parameters will be passed to</param>
            <param name="parameters">The parameters that will be passed</param>
            <param name="resolver">A delegate that will input the value for each parameter and output a string to represent that parameter.</param>
            <returns>A list of <see cref="T:Microsoft.Test.DataDriven.NamedArgument"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resolver"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameters"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.GenerateSchema(System.Reflection.MethodBase)">
            <summary>
            Generates a DataTable that represents the schema for a method.
            </summary>
            <param name="fromMethod">The method to use when generating the schema.</param>
            <returns>The DataTable that represents the schema for the method provided.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="fromMethod"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CheckIfArgumentIsNull(System.Object,System.String)">
            <summary>
            Checks to see if an argument is null and if so throws an ArgumentNullException for the specified argument
            </summary>
            <param name="toCheck">argument to check</param>
            <param name="objectName">Name of the object</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.SetExternalParametersReader(Microsoft.Test.DataDriven.ParameterData,Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader)">
            <summary>
            Assigns a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParametersReader"/> object to a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> object
            </summary>
            <param name="parameterData">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> to which to assign the reader</param>
            <param name="reader">The reader to assign to the parameter</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CreateExpandedParameterValues(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Creates the expanded values for each of the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s.
            </summary>
            <param name="parameters">The list of <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects whose
            values to expand.</param>
            <returns>The expanded values for each of the specified <see cref="T:Microsoft.Test.DataDriven.ParameterData"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameters"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CreateTestSchema(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Creates a <see cref="T:System.Data.DataTable"/> which represents the parameter combination schema.
            </summary>
            <param name="parameters">The list of <see cref="T:Microsoft.Test.DataDriven.ParameterData"/> objects whose combinations'
            schema should be created.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> which represents the parameter combination schema.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameters"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.MergeParameterData(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Merges the parameter data from two collections of parameter data.
            </summary>
            <param name="addTo">The parameter data list that is the target of the merge.</param>
            <param name="mergeWith">An enumerable collection of parameters to merge into the addTo collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="addTo"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="mergeWith"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.MergeParameterData(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},Microsoft.Test.DataDriven.ParameterData)">
            <summary>
            Merges the parameter data from a specified parameter data into a list of parameter data.
            </summary>
            <param name="addTo">The parameter data list that is the target of the merge.</param>
            <param name="parameter">The parameter to merge in.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.FlattenParameterData(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Flattens a collection of ParameterData objects
            </summary>
            <param name="toFlatten">The collection to flatten</param>
            <returns>A collection of all the ParameterData objects contained in the collection specified.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toFlatten"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.SortByParameters(System.Collections.Generic.IList{Microsoft.Test.DataDriven.ParameterData},System.Reflection.MethodBase)">
            <summary>
            Sorts the IList&lt;ParameterData&gt; by the order of parameters for the method provided.
            </summary>
            <param name="toOrder">The list to order</param>
            <param name="method">The method to use when ordering the list</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.AddInnerResult(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Adds a new inner result to the specified TestResult.
            </summary>
            <param name="addOn">The TestResult to add a new inner result to.</param>
            <returns>The new inner result.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="addOn"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.AddInnerResult(Microsoft.VisualStudio.TestTools.Common.TestResult,Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Adds the specified TestResult as an inner result of the extended TestResult.
            </summary>
            <param name="addOn">The TestResult to add the inner result to.</param>
            <param name="toAdd">The inner result to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="addOn"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toAdd"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.SetDataRow(Microsoft.VisualStudio.TestTools.Common.TestResult,System.String)">
            <summary>
            Sets the data row for the specified result
            </summary>
            <param name="setOn">Result to set the data row on</param>
            <param name="dataRowInfo">The data row text</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="setOn"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.GetDataRow(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Gets the data row for the specified result
            </summary>
            <param name="getOn">Result to set the data row on</param>
            <returns>The data row text</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="getOn"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.GetInnerResults(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Gets the inner results for the specified TestResult.
            </summary>
            <param name="getFrom">The TestResult to retrieve the inner results from.</param>
            <returns>The inner results.</returns>
            <remarks>This method will return null for TestResult derived classes that do not have a m_innerResults member.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="getFrom"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.OverrideResultType(Microsoft.VisualStudio.TestTools.Common.TestResult,System.String)">
            <summary>
            Sets the result type for the TestResult.
            </summary>
            <param name="toOverride">The result to override</param>
            <param name="newResultType">The new type for the TestResult.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="toOverride"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newResultType"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.ReflectInnerResults(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Reflects on the results that are contained in the specified TestResult and then rolls it up.
            </summary>
            <param name="reflectOn">The TestResult to reflect the inner results from.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reflectOn"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.ReflectResult(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Retrieves the TestResult from the specified TestContext.
            </summary>
            <param name="context">The context to pull the result from.</param>
            <returns>The TestResult contained in the context.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.SetInnerResults(Microsoft.VisualStudio.TestTools.Common.TestResult,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestTools.Common.TestResult})">
            <summary>
            Sets the inner results for the specified TestResult
            </summary>
            <param name="setOn">The TestResult to set the inner results on.</param>
            <param name="setValue">The inner results.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="setOn"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.SetResult(System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.Processing.VariantExecutionInformation},Microsoft.VisualStudio.TestTools.Common.TestOutcome,System.Exception,System.String)">
            <summary>
            Takes a list of <see cref="T:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation"/> and sets a particular outcome for each element in the list.
            </summary>
            <param name="executionData">The list of <see cref="T:Microsoft.Test.DataDriven.Processing.VariantExecutionInformation"/> to act on.</param>
            <param name="outcome">The TestOutcome to set on each element.</param>
            <param name="exception">The exception to set on each element.</param>
            <param name="error">The error string to set on each element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executionData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.FindMostCommonAncestor(System.Type,System.Type)">
            <summary>
            Finds the most common ancestor for the specified type.
            </summary>
            <param name="myType">Type object that is being extended.</param>
            <param name="compareType">Type to compare to.</param>
            <returns>The most commmon ancestor to the two types specified</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="myType"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.FindExtensionMethods(System.Type)">
            <summary>
            Finds the extension methods for the type.
            </summary>
            <param name="myType">My type.</param>
            <returns>Extension methods that have been loaded for the current type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="myType"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.RetrieveData(System.Data.SqlClient.SqlCommand)">
            <summary>
            Retrieves data from a database.
            </summary>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute to get data.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the retrieved data.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CopyToCompoundCollection(System.Data.DataTable,Microsoft.Test.DataDriven.ExternalData.IParameterColumnsReader,Microsoft.Test.DataDriven.CompoundCollection{System.Object})">
            <summary>
            Adds rows to a <see cref="T:Microsoft.Test.DataDriven.CompoundCollection`1"/> to serve as variants of data-driven
            tests from the results of a SQL query.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> containing the rows to add.</param>
            <param name="reader">The <see cref="T:Microsoft.Test.DataDriven.ExternalData.IParameterColumnsReader"/> whose data to copy to the collection.</param>
            <param name="rows">The collection to which to add rows from the query results.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="table"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rows"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CreateExternalParameterData(System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> object for a method's parameter
            </summary>
            <param name="parameterInfo">The invoked method's parameter</param>
            <returns>A new <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> object</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ExtensionMethods.CreateExternalParameters(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Collections.Generic.IEnumerable{Microsoft.Test.DataDriven.ParameterData})">
            <summary>
            Creates <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> objects for a method's parameters
            </summary>
            <param name="methodParameters">The invoked method's parameters</param>
            <param name="discoveredParameters">Parameters already discovered by MadMan</param>
            <returns>New <see cref="T:Microsoft.Test.DataDriven.ExternalData.ExternalParameterData`1"/> objects</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ISelectableData">
            <summary>
            The interface for selectable objects to implement.  A selectable object is one which the value can be randomly selected.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ISelectableData.NextObject">
            <summary>
            Nexts the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ISelectableData.Seed">
            <summary>
            Gets or sets the seed.
            </summary>
            <value>The seed.</value>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ISelectableData`1">
            <summary>
            Defines methods to select data for combinatorial expansion.
            </summary>
            <typeparam name="T">The type of the data selected.</typeparam>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ISelectableData`1.SelectData">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture">
            <summary>
            The OutputCapture class is designed to capture output during test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.#ctor">
            <summary>
            Creates a new capture for the root result.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.Finalize">
            <summary>
            Finalizes the OutputCapture class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.AddResult(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Adds a new result to capture output for.
            </summary>
            <param name="result">The result to add</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.InitializeOutputCapture(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Initializes output capture for the specified test.
            </summary>
            <param name="root">The TestResult root.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="root"/> parameter was null, this must be a valid reference.</exception>
            <exception cref="T:System.NotSupportedException">Output capture for the <paramref name="root"/> parameter was already initialized, cannot initialize output capture for the same result twice.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.ReleaseOutputCapture(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Releases the output capture for the current thread.
            </summary>
            <param name="root">Root test result to remove</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.RemoveResult(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Removes a result from the output capture.
            </summary>
            <param name="result">The result to remove</param>
            <returns>The buffer for the specified result.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.Write(System.String,Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot,System.Boolean)">
            <summary>
            Writes the specified output to the specified output capture buffer.
            </summary>
            <param name="passed">The output to write</param>
            <param name="slot">The slot to write to.</param>
            <param name="writeLine">Whether or not to append a new line</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture.Capture">
            <summary>
            Gets the <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture"/> for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer">
            <summary>
            This class contains the buffers for console output, error and debug listening.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer.#ctor(System.Boolean)">
            <summary>
            Creates a new OutputCaptureBuffer
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer.Root">
            <summary>
            True if the result being captured is the root context, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer.Debug">
            <summary>
            Buffer to capture the debug output from a test
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer.StdErr">
            <summary>
            Buffer to capture the standard error console output from a test
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureBuffer.StdOut">
            <summary>
            Buffer to capture the standard console output from a test
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot">
            <summary>
            This enumeration is used to designate the output capture buffer to use when writing capture data.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot.Debug">
            <summary>
            Represents debug output
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot.StdErr">
            <summary>
            Represents StdErr output
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot.StdOut">
            <summary>
            Represents StdOut output
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter">
            <summary>
            OutputCaptureWriter is a text writer designed to work with console output and debug output.  This writer writes specifically to the <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.OutputCapture"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter.#ctor(Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureSlot)">
            <summary>
            Initializes a new OutputCaptureWriter that will write to the buffer slot specified
            </summary>
            <param name="slot">The buffer slot to write to</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter.Write(System.String)">
            <summary>
            Writes output to the buffer slot that was specified on creation.
            </summary>
            <param name="value">Output to write</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter.WriteLine(System.String)">
            <summary>
            Writes output to the buffer slot that was specified on creation.
            </summary>
            <param name="value">Output to write</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter.WriteLine">
            <summary>
            Writes output to the buffer slot that was specified on creation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.OutputCaptureWriter.Encoding">
            <summary>
            This is abstract on TextWriter so it needs to be implemented
            </summary>
            <exception cref="T:System.NotImplementedException">This property is not implemented.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext">
            <summary>
            The TestResultContext class manages the thread specific context for test results.  This can be used regardless of the number of threads that are being executed at a time.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.TestResultContextKey">
            <summary>
            The key that is used to store the thread specific test result context.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.TestResultContextLockKey">
            <summary>
            The key that is used to store the thread specific test result context lock.
            </summary>
        </member>
        <member name="F:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.testResults">
            <summary>
            The test result stack for this specific context
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Creates a new TestResultContext instance.
            </summary>
            <param name="context">The test context for this TestResultContext.   This context is used to root the result context.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.#ctor(Microsoft.Test.DataDriven.ResultsManagement.TestResultContext)">
            <summary>
            Creates a new TestResultContext instance that is a child of the specified TestResultContext.
            </summary>
            <param name="parent">The parent for this new result context.</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.FinishTestResultContext">
            <summary>
            Completes the currently running tests and clears out all result contexts that were created for the test.
            </summary>
            <returns>If true the stack of test results were finished symetrically, false if there were child contexts on the stack.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.InitializeTestResultContext(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Initializes a new TestResultContext for the current test.
            </summary>
            <param name="testContext">The TestContext that is attached to the currently running test case.</param>
            <returns>The result context created.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="testContext"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.PopResult">
            <summary>
            Pops the current result off of the result stack.
            </summary>
            <returns>The result popped.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.PopResultContext">
            <summary>
            Pops the current child test context from the test result context stack.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.PushNewResult">
            <summary>
            Pushes a new result on to the test result stack for this context.
            </summary>
            <returns>The new result pushed onto the stack.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.PushResult(Microsoft.VisualStudio.TestTools.Common.TestResult)">
            <summary>
            Pushes the specified test result onto the test result stack for this context.
            </summary>
            <param name="toPush">The test result to push onto the stack</param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.PushResultContext">
            <summary>
            Pushes a new <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/> onto TestResultContext stack.
            </summary>
            <returns>The new <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/> pushed.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.CurrentContext">
            <summary>
            The current TestResultContext for the calling thread.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.CurrentResult">
            <summary>
            The current result for this context.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.IsRootContext">
            <summary>
            True if this is the root <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/>, false if this <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/> was created from another.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.Parent">
            <summary>
            The parent <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/> for this context.  This is null if the <see cref="T:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext"/> is the root test result context.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.ResultStackDepth">
            <summary>
            Indicates how many results are pushed on the result stack.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.ResultsManagement.TestResultContext.TestContext">
            <summary>
            The TestContext from the currently running test.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.SelectableFactorySet`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> that selects a value by utilizing
            a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.
            </summary>
            <typeparam name="T">The type of values from which to select.</typeparam>
        </member>
        <member name="F:Microsoft.Test.DataDriven.SelectableFactorySet`1.factorySet">
            <summary>
            The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which will produce the value selected by
            the current <see cref="T:Microsoft.Test.DataDriven.SelectableFactorySet`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableFactorySet`1.#ctor(Microsoft.Test.MaDLybZ.FactorySet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.SelectableFactorySet`1"/> class
            with the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.
            </summary>
            <param name="factorySet">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which will produce the
            value selected by the <see cref="T:Microsoft.Test.DataDriven.SelectableFactorySet`1"/></param>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableFactorySet`1.NextObject">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableFactorySet`1.SelectData">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.SelectableFactorySet`1.Seed">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.DataDriven.SelectableFactorySet`1"/>
            to select a value at random.
            </summary>
            <exception cref="T:System.NotSupportedException">An attempt was made to set the Seed property.  This is not supported, reseed the seed using the Reset method instead.</exception>
        </member>
        <member name="T:Microsoft.Test.DataDriven.SelectableList`1">
            <summary>
            A simple implementation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> which selects from a list of possible values.
            </summary>
            <typeparam name="T">The type of values from which to select.</typeparam>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableList`1.#ctor(System.Collections.Generic.IList{`0},Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.SelectableList`1"/> class which can select
            from the specified list of possible values.
            </summary>
            <param name="data">The values from which the <see cref="T:Microsoft.Test.DataDriven.SelectableList`1"/> can select.</param>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.DataDriven.SelectableList`1"/>
            to select a value at random from <paramref name="data"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> or the <paramref name="seed"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableList`1.Microsoft#Test#DataDriven#ISelectableData#NextObject">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.SelectableList`1.SelectData">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.SelectableList`1.Data">
            <summary>
            Gets the list of possible values from which to select.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.SelectableList`1.Seed">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.DataDriven.SelectableList`1"/>
            to select a value at random.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.TypedSelectableData`1">
            <summary>
            A simple implementation of <see cref="T:Microsoft.Test.DataDriven.ISelectableData`1"/> which selects a value
            of type <typeparamref name="T"/> by getting the next object from an <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/>.
            </summary>
            <typeparam name="T">The type of data which the <see cref="T:Microsoft.Test.DataDriven.TypedSelectableData`1"/> selects.</typeparam>
        </member>
        <member name="F:Microsoft.Test.DataDriven.TypedSelectableData`1.nonTypedData">
            <summary>
            The <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> from which to get the next object when selecting
            data.
            </summary>
        </member>
        <member name="M:Microsoft.Test.DataDriven.TypedSelectableData`1.#ctor(Microsoft.Test.DataDriven.ISelectableData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.DataDriven.TypedSelectableData`1"/> class with
            the specified <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/>.
            </summary>
            <param name="nonTypedData">The <see cref="T:Microsoft.Test.DataDriven.ISelectableData"/> from which to get
            the next object when selecting data.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nonTypedData"/> parameter was null, this must be a valid reference.</exception>
        </member>
        <member name="M:Microsoft.Test.DataDriven.TypedSelectableData`1.NextObject">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="M:Microsoft.Test.DataDriven.TypedSelectableData`1.SelectData">
            <summary>
            Selects the next object.
            </summary>
            <returns>The next object selected.</returns>
        </member>
        <member name="P:Microsoft.Test.DataDriven.TypedSelectableData`1.Seed">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used for random value generation.
            </summary>
        </member>
        <member name="T:Microsoft.Test.DataDriven.UserMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.UserMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.UserMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.UserMessages.BeginningDataDrivenVariant">
            <summary>
              Looks up a localized string similar to Beginning data driven variant \&quot;{0}\&quot;....
            </summary>
        </member>
        <member name="P:Microsoft.Test.DataDriven.UserMessages.ReproData">
             <summary>
               Looks up a localized string similar to To reproduce this particular variant please specify the repro attribute:
            [Repro({0}, {1})].
             </summary>
        </member>
    </members>
</doc>
