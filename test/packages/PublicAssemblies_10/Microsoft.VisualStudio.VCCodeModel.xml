<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.VCCodeModel</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.MFCDialogNumberVariableExtender">
      <summary>Provides access to the minimum and maximum range of a numeric-type variable in an MFC dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.MFCDialogNumberVariableExtender.Initialize(System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExtendeeObject"> Extendee object to initialize</param>
      <param name="ExtenderSite"> Site of the extender</param>
      <param name="Cookie"> Provided cookie</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogNumberVariableExtender.MaxValue">
      <summary>Gets or sets the maximum value for the numeric-type variable represented by the parent object.</summary>
      <returns>A string representing the maximum numeric value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogNumberVariableExtender.MinValue">
      <summary>Gets or sets the minimum value for the numeric-type variable represented by the parent object.</summary>
      <returns>A string representing the minimum numeric value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.MFCDialogStringVariableExtender">
      <summary>Provides access to the maximum character range of a string-type variable in an MFC dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.MFCDialogStringVariableExtender.Initialize(System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExtendeeObject">Input object for initialization</param>
      <param name="ExtenderSite">Site of the extender</param>
      <param name="Cookie">Input cookie</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogStringVariableExtender.MaxChars">
      <summary>Gets or sets the maximum characters for the string-type variable represented by the parent object.</summary>
      <returns>A string representing the maximum number of characters.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.MFCDialogVariableExtender">
      <summary>Provides access to a variable code element in an existing MFC dialog box.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogVariableExtender.ControlID">
      <summary>Gets the ID of the control representing the dialog member variable.</summary>
      <returns>A string representing the control ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogVariableExtender.IDType">
      <summary>Gets the type of the dialog variable.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMMFCDialogVariableIDType" /> enumeration value indicating the dialog variable type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.MFCDialogVariableExtender.Initialize(System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="ExtendeeObject"> Input object</param>
      <param name="ExtenderSite"> Site of the extender</param>
      <param name="Cookie"> Input cookie</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vcCMConstants">
      <summary>The Visual C++ Code Model defines a collection of GUIDs for use in implementing automation extenders. An automation extender allows you to extend the properties, which are determined by your needs and which are automated by the Visual C++ Code Model. For more information on automation extenders and support for them, see Implementing and Using Automation Extenders.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDAttribute">
      <summary>Represents a code attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDClass">
      <summary>Represents a code class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDDelegate">
      <summary>Represents a code delegate.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDEnum">
      <summary>Represents a code enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDEvent">
      <summary>Represents a code event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDFunction">
      <summary>Represents a code function.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDIDLCoClass">
      <summary>Represents a code coclass.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDIDLImport">
      <summary>Represents a code import.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDIDLImportLib">
      <summary>Represents a code import library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDIDLLibrary">
      <summary>Represents a code library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDImportStmt">
      <summary>Represents a code import statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDIncludeStmt">
      <summary>Represents a code include (C++) statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDInterface">
      <summary>Represents a code interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDMacro">
      <summary>Represents a code macro.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDMap">
      <summary>Represents a code map.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDMapEntry">
      <summary>Represents an entry in a code map.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDNamespace">
      <summary>Represents a code namespace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDParameter">
      <summary>Represents a code parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDProperty">
      <summary>Represents a code property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDStruct">
      <summary>Represents a code struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDTypeDef">
      <summary>Represents a code type definition (typedef).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDUnion">
      <summary>Represents a code union.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDUsingStmt">
      <summary>Represents a code using (C# Reference) statement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDVariable">
      <summary>Represents a code variable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMCATIDVCBase">
      <summary>Represents a code Visual C++ base class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMMFCDialogNumberVariableExtender">
      <summary>Represents an Extender for number variables in an MFC dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMMFCDialogStringVariableExtender">
      <summary>Represents an Extender for string variables in an MFC dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMMFCDialogVariableExtender">
      <summary>Represents an Extender for variables in an MFC dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vcCMConstants.vcCMVCDialogExtender">
      <summary>Represents an Extender for an MFC dialog box.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute">
      <summary>Provides access to an item attribute.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.AddParameter(System.String,System.String,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.</param>
      <param name="Value">The default value for the parameter.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.AddParameter(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Children">
      <summary>Gets a collection of child code elements of the specified attribute.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection, each representing a code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object representing the code model for the attribute's project.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Collection">
      <summary>Gets the collection containing the code element supporting this attribute.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection relating to the code attribute.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Delete">
      <summary>Removes the attribute.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.DisplayName">
      <summary>Gets the full name of the attribute.</summary>
      <returns>A string representing the name of the attribute.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>An array of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.File">
      <summary>Gets the file in which the parent object is declared.</summary>
      <returns>A file name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Index">
      <summary>Gets the position of an attribute in the attribute block.</summary>
      <returns>A value indicating the position of an attribute within the attribute block.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsCaseSensitive">
      <summary>Gets whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsInjected">
      <summary>Determines if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsReadOnly">
      <summary>Gets whether the file containing the parent object is read-only.</summary>
      <returns>true if the file containing the parent object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.IsZombie">
      <summary>Gets whether the parent object exists.</summary>
      <returns>true if the parent object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the parent object declaration.</summary>
      <returns>The location of the parent object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object representing the attributes parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeAttribute.Value">
      <summary>Gets or sets the data for the object.</summary>
      <returns>The value of the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase">
      <summary>An object providing access to the base class list of the parent object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Access">
      <summary>Sets or gets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Class">
      <summary>Gets the base class or the actual base class declaration of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>A comment associated with the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase" /> element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.DeclarationText">
      <summary>Gets or sets the declaration of the parent object.</summary>
      <returns>A string representing the declaration of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.DisplayName">
      <summary>Gets the full name of the parent object.</summary>
      <returns>The full name of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.EndPoint">
      <summary>Gets the text point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.File">
      <summary>Gets the file in which this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase" /> is contained.</summary>
      <returns>A file name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>A full path of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase" />'s file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsCaseSensitive">
      <summary>Gets whether a code element is case-sensitive.</summary>
      <returns>true if the code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsInjected">
      <summary>Gets whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsReadOnly">
      <summary>Gets whether the file containing the parent object is read-only.</summary>
      <returns>true if the file is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the parent code element is compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsVirtual">
      <summary>Sets or gets whether the parent object is virtual.</summary>
      <returns>true if the parent object is virtual; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.IsZombie">
      <summary>Gets whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase" /> object exists.</summary>
      <returns>true if it does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Kind">
      <summary>Returns an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Language">
      <summary>For code model objects, returns the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the parent object declaration.</summary>
      <returns>The location of the parent object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeBase" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeBase.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass">
      <summary>An object providing access to any class element collected in a <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Access">
      <summary>Sets or gets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation. For <see cref="T:EnvDTE.CodeClass" /> objects, this is either a <see cref="T:EnvDTE.CodeClass" /> or a fully qualified type name. Visual C++ requires the colon-separated (::) format for its fully qualified type names. All other languages support the period-separated format.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddEvent(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Name">Event name</param>
      <param name="Type">Event type</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The location to insert the code.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddImplementedInterface(System.Object,System.Object)">
      <summary>Adds an interface to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Base">Required. The interface the class will implement. This is either a <see cref="T:EnvDTE.CodeInterface" /> or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddImplementedInterface(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddMap(System.String,System.String,System.Object,System.Object)">
      <summary>Adds a map entry to the parent object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</returns>
      <param name="Name">Required. Specifies the name of the map entry.</param>
      <param name="ParameterText">Optional. The parameters to the map object.</param>
      <param name="Position">Optional. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddTemplateParameter(System.String,System.Object,System.Object)">
      <summary>Adds a parameter to a template definition.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the new template parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddTemplateParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a Typedef statement to the parent object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the parent object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.BodyText">
      <summary>Gets or sets the body text of the parent object.</summary>
      <returns>The body text of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Classes">
      <summary>Gets a collection of classes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Comment">
      <summary>Gets or sets the comment associated with the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" />.</summary>
      <returns>The comment associated with the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.DeclarationText">
      <summary>Gets or sets the declaration of the parent object.</summary>
      <returns>The declaration of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.DisplayName">
      <summary>Gets the full name of the parent object.</summary>
      <returns>The full name of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Enums">
      <summary>Gets a collection of enumerations for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Events">
      <summary>Gets a collection of events for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>The GUID representing the CATID of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extender objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.File">
      <summary>Gets the file in which the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> is declared.</summary>
      <returns>The file in which the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Functions">
      <summary>Gets a collection of functions for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.ImplementedInterfaces">
      <summary>Gets a collection of interfaces implemented by this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsAbstract">
      <summary>Gets or sets a value indicating whether or not an item is declared as abstract.</summary>
      <returns>true if the item is declared as abstract; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base; otherwise, false.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsManaged">
      <summary>Gets or sets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is managed.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is managed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is read-only.</summary>
      <returns>true if the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsSealed">
      <summary>Gets or sets a value indicating whether the __sealed keyword is applied to the parent object.</summary>
      <returns>true if the __sealed keyword is applied to the parent object; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsTemplate">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is a template.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object is a template; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsValue">
      <summary>Gets or sets a value indicating whether the __value keyword is applied to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object.</summary>
      <returns>true if the __value keyword is applied to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.IsZombie">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object exists.</summary>
      <returns>true if the object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object declaration.</summary>
      <returns>The location of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Maps">
      <summary>Gets the collection of maps for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Properties">
      <summary>Gets the collection of properties for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.RemoveInterface(System.Object)">
      <summary>Removes an interface from the list of implemented interfaces.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.RemoveTemplateParameter(System.Object)">
      <summary>Removes a parameter from a template definition.</summary>
      <param name="Element">The index or name of parameter to remove.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Structs">
      <summary>Gets the collection of structure elements for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.TemplateParameters">
      <summary>Gets a collection of parameters contained in a class template.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Templatizations">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Typedefs">
      <summary>Gets the collection of <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> elements for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Unions">
      <summary>Gets the collection of <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> elements for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the object's name validates; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeClass.Variables">
      <summary>Gets the collection of variables for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeClass" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate">
      <summary>An object representing a delegate code element (declared with the __delegate keyword).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Access">
      <summary>Gets or sets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddParameter(System.String,System.Object,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" />constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.AddParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.BaseClass">
      <summary>Gets the class from which this object inherits.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.DisplayName">
      <summary>Gets the full name of the parent object.</summary>
      <returns>The full name of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.File">
      <summary>Gets the file in which the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" /> object is declared.</summary>
      <returns>The file in which the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" /> object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base, false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" /> object is read-only.</summary>
      <returns>true if the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the specified code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.IsZombie">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate" /> object exists.</summary>
      <returns>true when the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the parent object declaration.</summary>
      <returns>The location of the parent object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.ProjectItem">
      <summary>Gets <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>Returns a string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates what the string contents should be, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A CodeElement object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.Type">
      <summary>Gets or sets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeDelegate.TypeString">
      <summary>Gets or sets the type of the parent object using a string representation of the type.</summary>
      <returns>The type of the parent object</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement">
      <summary>An object providing access to any code element within a source file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.DisplayName">
      <summary>Gets the display name of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object.</summary>
      <returns>The full name of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.File">
      <summary>Gets the file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object.</summary>
      <returns>The file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsInjected">
      <summary>Gets a value indicating if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsReadOnly">
      <summary>Gets a value indicating if the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object is read-only.</summary>
      <returns>true if the file containing the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the specified code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.IsZombie">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElement" /> object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the parent object declaration.</summary>
      <returns>The location of the parent object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElement.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElements">
      <summary>A collection of objects (representing individual code elements) within one or more source files.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Count">
      <summary>Gets a value indicating the number of objects in the collection.</summary>
      <returns>A value indicating the number of objects in the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.CreateUniqueID(System.String,System.String@)">
      <summary>Creates a programmatic identifier that does not collide with other identifiers in the scope, and follows the current language naming rules. This method is not implemented in Visual C#.</summary>
      <returns>true if the name is a unique identifier, false if it is not.</returns>
      <param name="Prefix">Required. The prefix string or whole name to check to see whether or not it is unique for the collection of code elements.</param>
      <param name="NewName">Optional. If supplied, this returns with a guaranteed unique name.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Find(System.String)">
      <summary>Returns the specified code element of the parent object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeReference" /> object.</returns>
      <param name="bstrSearch">Required. The name of the code element to search for. The string must be enclosed in double quotes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.GetEnumerator">
      <summary>Gets an enumerator for items in the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeElements" /> collection.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Item(System.Object)">
      <summary>Returns the specified code element of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="index">An object representing the location of an item in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Reserved1(System.Object)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Element">object</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Sort(Microsoft.VisualStudio.VCCodeModel.vsCMSort)">
      <summary>Sorts a collection of elements.</summary>
      <param name="vsCMSort">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMSort" /> value representing the type of sorting to be done (alphanumeric or position in source file).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum">
      <summary>An object representing an enumeration code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Access">
      <summary>Gets or sets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation. For <see cref="T:EnvDTE.CodeEnum" /> objects, <paramref name="Base" /> is a variant containing a fully qualified type name or <see cref="T:EnvDTE.CodeType" /> object upon which the new enum is based. For C#, this is the underlying type of enum. </param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddMember(System.String,System.Object,System.Object)">
      <summary>Creates a new member code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new member.</param>
      <param name="Value">Optional. The <see cref="P:EnvDTE.CodeVariable.InitExpression" /> of the <see cref="T:EnvDTE.CodeVariable" /> object is returned. It can be passed in either as a string or as an expression object.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.AddMember(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.BodyText">
      <summary>Gets or sets the body text of the parent object.</summary>
      <returns>The body text of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The associated comment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.DeclarationText">
      <summary>Gets or sets the declaration of the parent object.</summary>
      <returns>The declaration of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.DisplayName">
      <summary>Gets the full name of the parent object.</summary>
      <returns>The full name of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.File">
      <summary>Gets the file in which the parent object is declared.</summary>
      <returns>The file in which the parent object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base; otherwise, false.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsManaged">
      <summary>Gets or sets a value indicating whether the parent object is managed.</summary>
      <returns>true if a parent object is managed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the parent object is read-only.</summary>
      <returns>true if the file containing the parent object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the specified code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsValue">
      <summary>Gets or sets a value indicating whether the __value keyword is applied to the parent object.</summary>
      <returns>true if the __value keyword is applied to the parent object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.IsZombie">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum" /> object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum" /> object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEnum.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent">
      <summary>An object representing an event code element (declared with the __event keyword).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.DeclarationText">
      <summary>Gets or sets the declaration of the parent object.</summary>
      <returns>The declaration of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.DisplayName">
      <summary>Gets the full name of the parent object.</summary>
      <returns>The full name of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.File">
      <summary>Gets the file in which the object is declared.</summary>
      <returns>The file in which the object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Functions">
      <summary>Gets the collection of implemented child methods of an event (e.g. ‘Add’, ‘Throw’, ‘Remove’, ‘Raise’).</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsCaseSensitive">
      <summary>Gets a value indicating if a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsShared">
      <summary>
        <see cref="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsShared" /> is true if the event was declared with the static keyword.</summary>
      <returns>true if the event was declared with the static keyword; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsVirtual">
      <summary>
        <see cref="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsVirtual" /> is true if the event was declared with the virtual keyword.</summary>
      <returns>true if the event was declared with the virtual keyword; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeEvent.TypeString">
      <summary>Gets or sets the type of the object using a string representation of the type.</summary>
      <returns>The type of the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction">
      <summary>An object defining a function construct in a source file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Access">
      <summary>Gets or sets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddInitializer(System.String)">
      <summary>Adds a C++ initializer to a constructor's member initializer list.</summary>
      <param name="bstrText">Required. The full text of the initializer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddParameter(System.String,System.Object,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddTemplateParameter(System.String,System.Object,System.Object)">
      <summary>Adds a parameter to a template definition.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the new template parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.AddTemplateParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.BodyText">
      <summary>Gets or sets the body text of the parent object.</summary>
      <returns>The body text of the parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.CanOverride">
      <summary>Gets or sets a value indicating whether or not the function can be overridden.</summary>
      <returns>true if the function can be overridden; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.FunctionKind">
      <summary>Gets an enumeration describing how a function is used.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMFunction" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsConstant">
      <summary>Gets or sets a value indicating whether or not the item is a constant.</summary>
      <returns>true if the item is a constant, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsInjected">
      <summary>Gets a value indicating if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsInline">
      <summary>Gets or sets the inline property of the function object.</summary>
      <returns>true if the function is defined as inline; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsOverloaded">
      <summary>Gets a value indicating whether or not a function is overloaded.</summary>
      <returns>true if a function is overloaded; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the parent object is read-only.</summary>
      <returns>true if the file containing the parent object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsSealed">
      <summary>Sets or gets the IsSealed keyword on a function.</summary>
      <returns>Determines whether the file containing the parent object is read only</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the specified code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsShared">
      <summary>Gets or sets a value indicating whether or not the item is statically defined, that is, if the item is common to all instances of this object type, or only to this object specifically.</summary>
      <returns>true if the method is shared, false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsTemplate">
      <summary>Gets a value indicating whether the parent object is a template.</summary>
      <returns>true if a parent object is a template; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsVirtual">
      <summary>Gets or sets a value indicating whether the parent object is virtual.</summary>
      <returns>true if the parent object is virtual; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Kind">
      <summary>Gets an enumeration value indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.MustImplement">
      <summary>Gets or sets a value indicating whether or not the item is declared abstract and thus requires an implementation.</summary>
      <returns>true if the method is declared abstract and thus requires an implementation; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Overloads">
      <summary>Gets a collection of overloaded methods for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Prototype(System.Int32)">
      <summary>Gets a string holding the stub definition of this object.</summary>
      <returns>A string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates what the string contents should be, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.RemoveTemplateParameter(System.Object)">
      <summary>Removes a parameter from a template definition.</summary>
      <param name="Element">The parameter to remove.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.TemplateParameters">
      <summary>Gets a collection of parameters contained in a class template.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Templatizations">
      <summary>Internal Microsoft Use Only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.Type">
      <summary>Gets or sets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeFunction.TypeString">
      <summary>Gets or sets the type of object using a string representation of the type.</summary>
      <returns>The type of object using a string representation of the type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass">
      <summary>An object defining a CoClass element in a .idl file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.File">
      <summary>Gets the file in which the object is declared.</summary>
      <returns>The file in which the object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.IsZombie">
      <summary>Gets a value indicating whether the parent object exists.</summary>
      <returns>true if an object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass" />  object.</summary>
      <returns>The immediate parent object of a <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport">
      <summary>An object defining an import element in an .idl file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
      <param name="Where">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.IsZombie">
      <summary>Gets a value indicating whether the parent exists.</summary>
      <returns>true if an object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Parent">
      <summary>Gets the immediate object of a given object.</summary>
      <returns>The parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib">
      <summary>An object defining an importlib element in an .idl file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.File">
      <summary>Gets the file in which the object is declared.</summary>
      <returns>The file in which the object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsInjected">
      <summary>Gets a value indicating whether  a code element has been injected by an attribute or a macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary">
      <summary>An object defining a library element in an .idl file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddIDLCoClass(System.String,System.Object)">
      <summary>Adds a new CoClass statement to the .idl file of the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLCoClass" /> object.</returns>
      <param name="Name">Required. Specifies the name of the component object represented by the <see cref="P:Microsoft.VisualStudio.VsWizard.IControl.CoClass" /> statement.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it. Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddIDLImportLib(System.String,System.Object)">
      <summary>Adds a new importlib statement to the .idl file of the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImportLib" /> object.</returns>
      <param name="Name">Required. Specifies the name of the library to be imported by the importlib statement.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it. Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the new interface.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.   Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or<see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef statement to the parent object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IDLCoClasses">
      <summary>Gets the collection of CoClass statements from the .idl file of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IDLImportLibs">
      <summary>Gets the collection of importlib statements from the .idl file of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Interfaces">
      <summary>Gets the collection of interfaces for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true of a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.IsZombie">
      <summary>Gets a value indicating whether the object no longer exists.</summary>
      <returns>true if an object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Typedefs">
      <summary>Gets the collection of typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Unions">
      <summary>Gets the collection of Union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the object.</summary>
      <returns>true if the name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeImport">
      <summary>An object representing a #import code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsSelf(System.Object)">
      <summary>Gets a value indicating whether the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.IsZombie">
      <summary>Gets a value indicating whether the object no longer exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeImport.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude">
      <summary>An object representing a #include code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Comment">
      <summary>Get or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface">
      <summary>An object representing either a standard .idl interface, a dispinterface code element, or a code element (modified by the __interface keyword) in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Access">
      <summary>Gets or sets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extender objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.File">
      <summary>Gets the file in which the object is declared.</summary>
      <returns>The file in which the object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsCaseSensitive">
      <summary>Gets a value indicating whether the current language is case-sensitive.</summary>
      <returns>true if the current language is case-sensitive; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base; false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsManaged">
      <summary>Gets or sets a value indicating whether the object is managed.</summary>
      <returns>true if the object is managed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.IsZombie">
      <summary>Gets a value indicating whether the object no longer exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the name is valid; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeInterface.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro">
      <summary>An object representing a macro (#define statement) code element in the source code of a solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.AddParameter(System.String,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the parameter.Optional. Default = 0. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.AddParameter(System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>The Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object does not exist; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro.Value">
      <summary>Gets or sets the data for the object.</summary>
      <returns>The data for the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap">
      <summary>An object representing a map code element in the source code of a solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.AddEntry(System.String,System.Object)">
      <summary>Inserts a map entry into the map code element represented by the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry" /> object.</returns>
      <param name="Name">Required. The name of the map entry.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Entries">
      <summary>Gets the entries of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.RemoveEntry(System.Object)">
      <summary>Removes the specified map entry from the map code element represented by the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</summary>
      <param name="Element">Required. The map entry to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMap.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry">
      <summary>An object defining a map entry construct in a source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.AddParameter(System.String,System.Object)">
      <summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Value">Required. The name of the parameter.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the event element. If the value is a CodeElement, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element being compared to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.IsZombie">
      <summary>Gets a value indicating whether the object no longer exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.RemoveParameter(System.Object)">
      <summary>Removes a parameter from the argument list.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeMapEntry.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel">
      <summary>An object providing project-level access to any contained code element.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AbortTransaction">
      <summary>Cancels the current transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Location">Required. The path and file name for the new attribute. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)" /> fails.</param>
      <param name="Value">Required. The value of the attribute, which may be a comma-separated list of parameters for a parameterized property.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddAttribute(System.String,System.Object,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Location">Required. The path and file name for the new class definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Location">Required. The path and file name for the new delegate definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This value can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Location">Required. The path and file name for the new enum definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Location">Required. The path and file name for the new function definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddIDLImport(System.String,System.Object,System.Object)">
      <summary>Adds a new import statement to a specific .idl file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes) of the header, IDL, or ODL file to be imported.</param>
      <param name="Location">Required. The path or file name of the .idl file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddIDLImport(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddIDLLibrary(System.String,System.Object,System.Object)">
      <summary>Adds a new library statement to a specific .idl file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary" /> object.</returns>
      <param name="Name">Required. Specifies the name of the new library.</param>
      <param name="Location">Required. The path or file name of the .idl file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddIDLLibrary(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddImport(System.String,System.Object,System.Object,System.String)">
      <summary>Adds a #import element to a specific file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeImport" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or between angle brackets &lt;&gt;) of the type library being imported.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddImport(System.String,System.Object,System.Object,System.String)" /> fails.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Attributes">Optional. One or more #import attributes. For a complete list, see the #import Attributes section of The #import Directive. Separate attributes with either a space or comma.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddInclude(System.String,System.Object,System.Object)">
      <summary>Adds a #include element to a specific file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or angle brackets) of the file being included.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddInclude(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the interface to add.</param>
      <param name="Location">Required. The path and file name for the new interface definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddMacro(System.String,System.Object,System.String,System.Object)">
      <summary>Adds a #define element to a specific file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro" /> object.</returns>
      <param name="Name">Required. Specifies the name of the macro.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddMacro(System.String,System.Object,System.String,System.Object)" /> fails.</param>
      <param name="Value">Optional. The text of the macro's definition.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddMap(System.String,System.Object,System.String,System.Object)">
      <summary>Adds a map entry to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</returns>
      <param name="Name">Required. Specifies the name of the map entry.</param>
      <param name="Location">Optional. The location.</param>
      <param name="ParameterText">Optional. The parameters to the map object.</param>
      <param name="Position">Optional. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddNamespace(System.String,System.Object,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Location">Required. The path and file name for the new namespace definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddNamespace(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddNamespace(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Location">Required. The path and file name for the new structure definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or CodeInterfaces representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddTypedef(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef element to a specific file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. The name (or identifier) of the type declaration.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddTypedef(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Type">Required. The type of the element. Can be any standard C++ type.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. Not used by the Visual C++ Code Model.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddUnion(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. The name (or identifier) of the union element.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddUnion(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. Not used by the Visual C++ Code Model.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddUsing(System.String,System.Object,System.Object)">
      <summary>Adds a #using element to a specific file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing" /> object.</returns>
      <param name="Name">Required. Specifies the name of the assembly being imported.</param>
      <param name="Location">Required. The path or file name of the file to be modified. If the file does not exist, it is created automatically. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddUsing(System.String,System.Object,System.Object)" /> fails.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> fails.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Classes">
      <summary>Gets a collection of classes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeElementFromFullName(System.String)">
      <summary>Gets a collection of the specified code elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
      <param name="Name">Required. The full name of the elements to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeElementFromFullName2(System.String)">
      <summary>Gets a collection of the specified code elements for the object. It is identical to <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeElementFromFullName(System.String)" />, except that it ignores namespaces during lookup.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
      <param name="Name">Required. The full name of the elements to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeElements">
      <summary>Gets a collection of code elements.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeTypeFromFullName(System.String)">
      <summary>Returns a code element based on a fully qualified name.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
      <param name="Name">Required. A fully qualified symbol name, such as Namespace1.Namespace2.Class1.Member1.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeTypeFromFullName2(System.String)">
      <summary>Returns a code element based on a fully qualified name. It is identical to <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CodeTypeFromFullName(System.String)" /> except that it will attempt typedef resolution.</summary>
      <returns>A <see cref="T:EnvDTE.CodeType" /> object.</returns>
      <param name="Name">Required. A fully qualified symbol name, such as Namespace1.Namespace2.Class1.Member1.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CommitTransaction">
      <summary>Commits the current transaction for the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.CreateCodeTypeRef(System.Object)">
      <summary>A <see cref="T:EnvDTE.CodeTypeRef" /> object based on the data type indicator passed.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Delegates">
      <summary>Gets a collection of delegates for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.DialogClasses(System.String)">
      <summary>Gets a collection of dialog classes.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
      <param name="Filter">Optional. If supplied, this returns only those dialog classes whose resource ID matches the value of <paramref name="Filter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.DotNetNameFromLanguageSpecific(System.String)">
      <summary>Translates the namespace to a .NET form.</summary>
      <returns>A fully qualified .NET namespace.</returns>
      <param name="LanguageName">The name of the language to translate to a fully qualified .NET namespace.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.ElementFromID(System.String)">
      <summary>Not implemented.</summary>
      <param name="ID"> Input ID used for lookup.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.IDLImports">
      <summary>Gets the collection of Import statements from the .idl file of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.IDLLibraries">
      <summary>Gets the collection of Library elements on the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Imports">
      <summary>Gets the collection of #import statements for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Includes">
      <summary>Gets the collection of #include statements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Interfaces">
      <summary>Gets the collection of interfaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.IsSynchronized">
      <summary>Determines whether VCCodeModel is in sync with the source code for the solution.</summary>
      <returns>Type: <see cref="System.Boolean" /></returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.IsValidID(System.String)">
      <summary>Returns whether a specified name is a valid programmatic identifier for the current language.</summary>
      <returns>true when the identifier is valid; false when it is not, such as if it is a keyword.</returns>
      <param name="Name">Required. The name of the identifier to check.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.LanguageSpecificNameFromDotNet(System.String)">
      <summary>Translates from the fully qualified name to an unmanaged namespace form.</summary>
      <returns>An unmanaged namespace.</returns>
      <param name="DotNETName">The name of the fully qualified namespace.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Macros">
      <summary>Gets the collection of macros (#define statements) for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Maps">
      <summary>Gets the collection of maps for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Namespaces">
      <summary>Gets the collection of namespaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Remove(System.Object)">
      <summary>Removes the specified project from the solution.</summary>
      <param name="Element">Required. The project to remove from the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.RemoveEx(System.Object,System.Int32)">
      <summary>Removes the specified project from the solution.</summary>
      <param name="Element">Required. The project to remove from the solution.</param>
      <param name="Delete">True, if the project is to be deleted, false otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.StartTransaction(System.String)">
      <summary>Begins a transaction.</summary>
      <param name="bstrName">Required. The name of the transaction. This name identifies the item placed on the Undo stack once the transaction is completed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Synchronize">
      <summary>Synchronizes all code model objects in the solution with edits made to source files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.SynchronizeCancellable(System.String,System.String)">
      <summary>Displays a dialog box that has a progress bar. The user can cancel waiting and unblock the thread.</summary>
      <param name="Caption">Caption in the title bar of the dialog box.</param>
      <param name="Message">Message in the dialog box.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.SynchronizeFiles">
      <summary>Ensures that the FileCodeModel property on a project file is not null.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Typedefs">
      <summary>Gets the collection of Typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Unions">
      <summary>Gets the collection of Union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Usings">
      <summary>Gets the collection of #using elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the proposed name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeModel.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace">
      <summary>An object representing a namespace element in the source code of a solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the new interface.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddMap(System.String,System.String,System.Object)">
      <summary>Adds a map to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</returns>
      <param name="Name">Required. Specifies the name of the map code element.</param>
      <param name="ParameterText">Optional. A text string representing the list of map parameters.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddNamespace(System.String,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddNamespace(System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Classes">
      <summary>Gets a collection of classes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.DocComment">
      <summary>Gets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.File">
      <summary>Gets the file in which the object is declared.</summary>
      <returns>The file in which the object is declared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Interfaces">
      <summary>Gets the collection of interfaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsCaseSensitive">
      <summary>Gets whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsInjected">
      <summary>Gets whether a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsReadOnly">
      <summary>Gets whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the parent object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the specified code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.IsZombie">
      <summary>Gets whether the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Macros">
      <summary>Gets the collection of macros (#define statements) for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Maps">
      <summary>Gets the collection of maps for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Namespaces">
      <summary>Gets the collection of namespaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Remove(System.Object)">
      <summary>Removes the specified project from the solution.</summary>
      <param name="Element">Required. The project to remove from the solution.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Typedefs">
      <summary>Gets the collection of Typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Unions">
      <summary>Gets the collection of union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the object.</summary>
      <returns>true if the proposed name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeNamespace.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter">
      <summary>An object representing a parameter of a function, property, and so on, in a source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.DefaultExpression">
      <summary>Gets or sets an object defining the initialization code for an element.</summary>
      <returns>The initialization code for an element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>The Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders for the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Index">
      <summary>Gets the position of a parameter in a parameter list.</summary>
      <returns>The position of a parameter in a parameter list.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsCaseSensitive">
      <summary>Determines if a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsConstant">
      <summary>Gets or sets a value to describe whether this item is a constant.</summary>
      <returns>true if this item is a constant; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsInjected">
      <summary>Gets if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsReadOnly">
      <summary>Gets a value that indicates whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the code element.</summary>
      <returns>true if the specified code element is the same as the code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsVolatile">
      <summary>Gets or sets a value indicating whether the volatile keyword is used.</summary>
      <returns>true if the volatile keyword is used; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.IsZombie">
      <summary>Determines if the object exists.</summary>
      <returns>true when the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object of a given object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.StartPoint">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>The start point of the object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.Type">
      <summary>Gets or sets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeParameter.TypeString">
      <summary>Gets or sets the type of the object using a string representation of the type.</summary>
      <returns>The type of the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty">
      <summary>An object representing a property code element (declared with the __property keyword).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Access">
      <summary>Defines the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Attributes">
      <summary>Gets a collection of all attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Collection">
      <summary>Returns the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.DisplayName">
      <summary>Gets or sets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>The Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.ExtenderCATID">
      <summary>Returns the Extender category ID (CATID) for the object.</summary>
      <returns>The Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.ExtenderNames">
      <summary>Returns a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Functions">
      <summary>Gets a collection of functions for the parent object.</summary>
      <returns>A collection of functions as CodeElements.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Getter">
      <summary>Gets or sets an object defining the code to return a property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsCaseSensitive">
      <summary>Determines if a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsInjected">
      <summary>Gets if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsReadOnly">
      <summary>Gets a value indicating whether the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as another code element.</summary>
      <returns>true if the specified code element is the same as another code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsShared">
      <summary>Sets or gets whether the IsShared flag is set on a property.</summary>
      <returns>Returns true if the property is shared.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsTrivial">
      <summary>Gets or sets a value indicating whether the property is trivial.</summary>
      <returns>true if the property is trivial; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsVirtual">
      <summary>Sets or gets whether the property is virtual.</summary>
      <returns>Returns true for virtual properties, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.IsZombie">
      <summary>Determines if the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Kind">
      <summary>Returns an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Parameters">
      <summary>Gets a collection of parameters for this item.</summary>
      <returns>Returns a set of parameters as CodeElements.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>A string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates the string contents, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Setter">
      <summary>Gets or sets an object defining the code to set a property.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.Type">
      <summary>Gets or sets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeProperty.TypeString">
      <summary>Gets or sets the type of object using a string representation of the type.</summary>
      <returns>The type of object using a string representation of the type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeReference">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Children">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.CodeModel">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Collection">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Comment">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.DisplayName">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.DTE">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.EndPoint">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Not currently implemented.</summary>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Extender(System.String)">
      <summary>Not currently implemented.</summary>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.ExtenderCATID">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.ExtenderNames">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.File">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.FullName">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Not currently implemented.</summary>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Not currently implemented.</summary>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.InfoLocation">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsCaseSensitive">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsCodeType">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsInjected">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsReadOnly">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsSelf(System.Object)">
      <summary>Not currently implemented.</summary>
      <param name="pOther">Input comparison object</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.IsZombie">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Kind">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Language">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Not currently implemented.</summary>
      <param name="Where">A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Name">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Parent">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Picture">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.Project">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.ProjectItem">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.StartPoint">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeReference.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Not currently implemented.</summary>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct">
      <summary>An object representing a structure code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Access">
      <summary>Defines the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddEvent(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Microsoft Internal Use Only.</summary>
      <param name="Name">Event name</param>
      <param name="Type">Event type</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. Location for adding the new function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddImplementedInterface(System.Object,System.Object)">
      <summary>Adds an interface to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Base">Required. The interface the class will implement. This is either a <see cref="T:EnvDTE.CodeInterface" /> or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddImplementedInterface(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new property code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeProperty" /> object.</returns>
      <param name="GetterName">Required. The name of the function that gets the property's value.</param>
      <param name="PutterName">Required. The name of the function that sets the property.</param>
      <param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> value, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess" /> constant value.</param>
      <param name="Location">Optional. The location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddTemplateParameter(System.String,System.Object,System.Object)">
      <summary>Adds a parameter to a template definition.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the new template parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddTemplateParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a CodeElement, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and filename for the new variable definition. Depending on the language, the filename is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Attributes">
      <summary>Gets a collection of all of the attributes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Classes">
      <summary>Gets a collection of classes for the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.CodeModel">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.DisplayName">
      <summary>Gets the full name of the object.</summary>
      <returns>The full name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.DocComment">
      <summary>Gets or sets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Events">
      <summary>Gets a collection of events for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>A Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.ImplementedInterfaces">
      <summary>Gets a collection of interfaces implemented by this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.InfoLocation">
      <summary>Describes the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsAbstract">
      <summary>Gets or sets a value indicating whether or not an item is declared as abstract.</summary>
      <returns>true if the item is declared as abstract; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsCaseSensitive">
      <summary>Gets a value indicating if a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base; otherwise, false.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsInjected">
      <summary>Gets if a code element has been injected by an attribute or macro expansion.</summary>
      <returns>true if a code element has been injected by an attribute or macro expansion; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsManaged">
      <summary>Sets or gets if the object is managed.</summary>
      <returns>true if the object is managed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsReadOnly">
      <summary>Gets if the file containing the object is read-only.</summary>
      <returns>true if the file containing the object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsSealed">
      <summary>Sets or gets if the __sealed keyword is applied to the parent object.</summary>
      <returns>true if the __sealed keyword is applied to the parent object; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the parent code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsTemplate">
      <summary>Gets if the object is a template.</summary>
      <returns>true if the object is a template; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsValue">
      <summary>Sets or gets if the __value keyword is applied to the object.</summary>
      <returns>true if the __value keyword is applied to the object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.IsZombie">
      <summary>Gets if the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Namespace">
      <summary>Gets an object defining the parent namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Properties">
      <summary>Gets the collection of properties for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.RemoveInterface(System.Object)">
      <summary>Removes an interface from the list of implemented interfaces.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.RemoveTemplateParameter(System.Object)">
      <summary>Removes a parameter from a template definition.</summary>
      <param name="Element">The parameter to remove.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.TemplateParameters">
      <summary>A collection of template parameters.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Templatizations">
      <summary>Microsoft Internal Use Only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Typedefs">
      <summary>Gets the collection of Typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Unions">
      <summary>Gets the collection of union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid Visual C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the proposed name is a valid Visual C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeStruct.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef">
      <summary>An object representing a typedef code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Access">
      <summary>Defines the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Collection">
      <summary>Returns the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.File">
      <summary>Gets the file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> element.</summary>
      <returns>The file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsCaseSensitive">
      <summary>Gets whether a code element is case-sensitive.</summary>
      <returns>true if a code element's name is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsInjected">
      <summary>Gets whether a code element has been injected by an attribute.</summary>
      <returns>true if a code element was automatically generated by an attribute; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsReadOnly">
      <summary>Gets whether the file containing the object is read-only.</summary>
      <returns>true if the current element is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the code element.</summary>
      <returns>true if the specified code element is the same as the parent code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.IsZombie">
      <summary>Gets if the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.References">
      <summary>Not currently implemented.</summary>
      <returns>An empty <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef.TypeString">
      <summary>Gets or sets the type of the object using a string representation of the type.</summary>
      <returns>The type of the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion">
      <summary>An object representing a union code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Access">
      <summary>Sets or gets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddBase(System.Object,System.Object)">
      <summary>Adds an item to the list of inherited objects.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Base">Required. The class from which to derive implementation.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddBase(System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. Location for placing the new function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddTemplateParameter(System.String,System.Object,System.Object)">
      <summary>Adds a parameter to a template definition.</summary>
      <returns>A <see cref="T:EnvDTE.CodeParameter" /> object.</returns>
      <param name="Name">Required. The name of the new template parameter.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddTemplateParameter(System.String,System.Object,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Since collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
      <param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)" /> fails.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Bases">
      <summary>Gets a collection of classes from which this item derives.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.BodyText">
      <summary>Gets or sets the body text of the object.</summary>
      <returns>The body text of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Classes">
      <summary>Gets a collection of classes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.DerivedTypes">
      <summary>Gets a collection of objects derived from this object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.DisplayName">
      <summary>Gets the formatted name to be displayed to users.</summary>
      <returns>The formatted name to be displayed to users.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.DocComment">
      <summary>Sets or gets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.File">
      <summary>Gets the file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" />.</summary>
      <returns>The file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsCaseSensitive">
      <summary>Gets if a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsDerivedFrom(System.String)">
      <summary>Gets a value indicating whether an object has another object as a base.</summary>
      <returns>true if an object has another object as a base, false if otherwise.</returns>
      <param name="FullName">Required. The type to search for in the lineage of this type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsInjected">
      <summary>Gets whether a code element has been injected by an attribute.</summary>
      <returns>true if this element was automatically generated by an attribute; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsReadOnly">
      <summary>Gets whether the file containing the object is read-only.</summary>
      <returns>true if the current element is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the code element.</summary>
      <returns>true if the specified code element is the same as the code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsTemplate">
      <summary>Gets whether the object is a template.</summary>
      <returns>true if this element is a template; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.IsZombie">
      <summary>Gets whether the object exists.</summary>
      <returns>true if object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Members">
      <summary>Gets a collection of items contained by this element.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> associated with the given object.</summary>
      <returns>Gets a <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.References">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.RemoveBase(System.Object)">
      <summary>Removes an object from the list of bases.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.RemoveMember(System.Object)">
      <summary>Removes a member code construct.</summary>
      <param name="Element">Required. A <see cref="T:EnvDTE.CodeElement" /> object or the name of one in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.RemoveTemplateParameter(System.Object)">
      <summary>Removes a parameter from a template definition.</summary>
      <param name="Element">The parameter to remove.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.TemplateParameters">
      <summary>Gets a collection of template parameters.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Templatizations">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Typedefs">
      <summary>Gets the collection of typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Unions">
      <summary>Gets the collection of union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the proposed element name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion.Variables">
      <summary>Gets the collection of variables.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing">
      <summary>An object representing a The #using Directive code element in the source code of a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Gets the end point of the parent object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Extender(System.String)">
      <summary>Gets the requested Extender object if it is available for this object.</summary>
      <returns>The Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>The Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.File">
      <summary>Gets the file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing" /> element.</summary>
      <returns>The file associated with this <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing" /> element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing" /> element's name is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsInjected">
      <summary>Gets a value indicating whether a code element has been injected by an attribute.</summary>
      <returns>true if this element was automatically generated by an attribute; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsReadOnly">
      <summary>Gets a value indicating whether the current element is read-only.</summary>
      <returns>true if the current element is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsSelf(System.Object)">
      <summary>Gets a value indicating whether the specified code element is the same as the code element.</summary>
      <returns>true if the specified code element is the same as the code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.IsZombie">
      <summary>Gets a value indicating whether the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.StartPoint">
      <summary>Returns a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable">
      <summary>An object representing a variable construct in a source file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Access">
      <summary>Sets or gets the access attributes of this item.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMAccess" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Children">
      <summary>Gets a collection of objects contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.CodeModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object for the project.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Collection">
      <summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Comment">
      <summary>Gets or sets the comment associated with the code element.</summary>
      <returns>The comment associated with the code element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.DeclarationText">
      <summary>Gets or sets the declaration of the object.</summary>
      <returns>The declaration of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.DisplayName">
      <summary>Gets the name used in the user interface for this output group.</summary>
      <returns>The name used in the user interface for this output group.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.DocComment">
      <summary>Gets the document comment for the current code model element.</summary>
      <returns>The document comment for the current code model element.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.EndPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the end point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Extender(System.String)">
      <summary>Returns the requested Extender object if it is available for this object.</summary>
      <returns>An Extender object.</returns>
      <param name="ExtenderName">Required. The name of the Extender to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.ExtenderCATID">
      <summary>Gets the Extender category ID (CATID) for the object.</summary>
      <returns>An Extender CATID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.ExtenderNames">
      <summary>Gets a list of available Extenders for the object.</summary>
      <returns>A list of available Extenders.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.File">
      <summary>Gets the file where this object is defined.</summary>
      <returns>The file where this object is defined.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.FullName">
      <summary>Gets the full path and name of the object's file.</summary>
      <returns>The full path and name of the object's file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.GetEndPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that marks the end of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.GetStartPoint(EnvDTE.vsCMPart)">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code element definition.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart" /> constant specifying the portion of the code to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.InfoLocation">
      <summary>Gets the capabilities of the code model.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMInfoLocation" /> constant value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.InitExpression">
      <summary>Gets or sets an object defining the initialization code for an element.</summary>
      <returns>An object defining the initialization expression for the code variable.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsCaseSensitive">
      <summary>Gets a value indicating whether a code element is case-sensitive.</summary>
      <returns>true if a code element is case-sensitive; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsCodeType">
      <summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType" /> object can be obtained from this object.</summary>
      <returns>true if a <see cref="T:EnvDTE.CodeType" /> object can be obtained; otherwise returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsConstant">
      <summary>Sets or gets whether the item is a constant.</summary>
      <returns>true if the item is a constant; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsInjected">
      <summary>Gets if a code element has been injected by an attribute.</summary>
      <returns>true if this element was automatically generated by an attribute; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsReadOnly">
      <summary>Determines if the file containing the object is read-only.</summary>
      <returns>true if the current element is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsSelf(System.Object)">
      <summary>Determines if the specified code element is the same as the current code element.</summary>
      <returns>true if the specified code element is the same as the current code element; otherwise, false.</returns>
      <param name="pOther">Required. The code element to which the code element is being compared.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsShared">
      <summary>Gets or sets a value indicating whether or not the item is statically defined, that is, if the item is common to all instances of this object type, or only to this object specifically.</summary>
      <returns>true if the method is shared; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsVolatile">
      <summary>Gets or sets a value indicating whether the volatile keyword is used.</summary>
      <returns>true if the volatile keyword is used; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.IsZombie">
      <summary>Gets if the object exists.</summary>
      <returns>true if the object no longer exists; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Kind">
      <summary>Gets an enumeration indicating the type of object.</summary>
      <returns>A <see cref="T:EnvDTE.vsCMElement" /> value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Location(Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>The location of the object declaration.</summary>
      <returns>The location of the object declaration.</returns>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the location of the declaration or the definition is returned.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Name">
      <summary>Gets or sets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Namespace">
      <summary>Gets an object defining the namespace.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>The immediate parent object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Picture">
      <summary>Gets a picture automation object to be used as an icon in the user interface.</summary>
      <returns>A picture object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Project">
      <summary>Gets the <see cref="T:EnvDTE.Project" /> object associated with the object.</summary>
      <returns>A <see cref="T:EnvDTE.Project" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.ProjectItem">
      <summary>Gets the <see cref="T:EnvDTE.ProjectItem" /> object associated with the given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Prototype(System.Int32)">
      <summary>Returns a string holding the stub definition of this object.</summary>
      <returns>A string describing the element.</returns>
      <param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype" /> value that indicates what the string contents should be, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.References">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.StartPointOf(EnvDTE.vsCMPart,Microsoft.VisualStudio.VCCodeModel.vsCMWhere)">
      <summary>Returns the start point of the object.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
      <param name="Part">Required. A <see cref="T:EnvDTE.vsCMPart" /> value specifying which part of the definition or the declaration to use (attributes block, body, and so on).</param>
      <param name="Where">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere" /> value specifying whether the <see cref="T:EnvDTE.TextPoint" /> object is the definition or the declaration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.Type">
      <summary>Gets or sets an object representing the programmatic type.</summary>
      <returns>A <see cref="T:EnvDTE.CodeTypeRef" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCCodeVariable.TypeString">
      <summary>Gets or sets the type of the object using a string representation of the type.</summary>
      <returns>The type of the object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCDesignElement">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.DisplayName">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.DTE">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.IsCaseSensitive">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.IsReadOnly">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.IsSelf(System.Object)">
      <summary>Microsoft internal use only.</summary>
      <param name="pOther">Object used for comparison</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.IsZombie">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.Name">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.Parent">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElement.Picture">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCDesignElements">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.Count">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.DTE">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.Find(System.String)">
      <summary>Microsoft internal use only.</summary>
      <param name="bstrSearch">Search string</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.GetEnumerator">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.Item(System.Object)">
      <summary>Microsoft internal use only.</summary>
      <param name="vItem">Input item</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDesignElements.Parent">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCDialogExtender">
      <summary>An object providing access to an existing dialog box class in a solution.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCDialogExtender.DialogID">
      <summary>Gets the ID of the dialog box class represented by the object.</summary>
      <returns>The ID of the dialog box class represented by the object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCDialogExtender.Initialize(System.Object,EnvDTE.IExtenderSite,System.Int32)">
      <summary>Microsoft internal use only.</summary>
      <param name="ExtendeeObject">Input object for initialization</param>
      <param name="ExtenderSite">Site of the extender</param>
      <param name="Cookie">Input cookie</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel">
      <summary>An object representing the code elements in a source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AbortTransaction">
      <summary>Halts the current transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddAttribute(System.String,System.String,System.Object)">
      <summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeAttribute" /> object.</returns>
      <param name="Name">Required. The name of the new attribute.</param>
      <param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddAttribute(System.String,System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new class code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeClass" /> object.</returns>
      <param name="Name">Required. The name of the class.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass" /> objects from which the new class inherits its implementations.</param>
      <param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing an interface that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeDelegate" /> object.</returns>
      <param name="Name">Required. The name of the delegate to add.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeEnum" /> object.</returns>
      <param name="Name">Required. The name of the enum to add.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType" /> objects that specify the underlying type of the new enum.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new function code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeFunction" /> object.</returns>
      <param name="Name">Required. The name of the new function.</param>
      <param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction" /> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddIDLImport(System.String,System.Object)">
      <summary>Adds a new import statement to the .idl file of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLImport" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes) of the header, IDL, or ODL file to be imported.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddIDLLibrary(System.String,System.Object)">
      <summary>Adds a new library statement to the .idl file of the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeIDLLibrary" /> object.</returns>
      <param name="Name">Required. Specifies the name of the new library.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddImport(System.String,System.Object,System.String)">
      <summary>Adds a #import element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:EnvDTE80.CodeImport" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or between angle brackets &lt;&gt;) of the type library being imported.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Alias">Optional. One or more #import attributes. For a complete list, see the #import Attributes section of The #import Directive. Separate attributes with either a space or comma.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddImport_2(System.String,System.Object,System.String)">
      <summary>Adds a #import element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:EnvDTE80.CodeImport" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or between angle brackets &lt;&gt;) of the type library being imported.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Attributes">Optional. One or more #import attributes. For a complete list, see the #import Attributes section of The #import Directive. Separate attributes with either a space or comma.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddInclude(System.String,System.Object)">
      <summary>Adds a #include element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeInclude" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or angle brackets) of the file being included.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeInterface" /> object.</returns>
      <param name="Name">Required. The name of the new interface.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Optional. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddMacro(System.String,System.String,System.Object)">
      <summary>Adds a #define element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMacro" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or angle brackets) of the file being included.</param>
      <param name="Value">Optional. The text of the macro's definition.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddMap(System.String,System.String,System.Object)">
      <summary>Adds a map to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeMap" /> object.</returns>
      <param name="Name">Required. Specifies the name of the map code element.</param>
      <param name="ParameterText">Optional. A text string representing the list of map parameters.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddNamespace(System.String,System.Object)">
      <summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeNamespace" /> object.</returns>
      <param name="Name">Required. The name of the new namespace.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddNamespace(System.String,System.Object)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeStruct" /> object.</returns>
      <param name="Name">Required. The name of the new structure.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Bases">Required. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects from which the new interface derives.</param>
      <param name="ImplementedInterfaces">Required. Default value is Nothing or null. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface" /> objects, each representing interfaces that the new class promises to implement.</param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddTypedef(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a typedef statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeTypedef" /> object.</returns>
      <param name="Name">Required. Specifies the name of the alias.</param>
      <param name="Type">Required. The type of the alias.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddUnion(System.String,System.Object,EnvDTE.vsCMAccess)">
      <summary>Adds a union statement to the object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUnion" /> object.</returns>
      <param name="Name">Required. Specifies the name of the union.</param>
      <param name="Position">Required. Default = -1. The code element after which to add the event element. If the value is a CodeElement, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddUsing(System.String,System.Object)">
      <summary>Adds a #using element to the <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.VCCodeModel.VCCodeUsing" /> object.</returns>
      <param name="Name">Required. Specifies the name (in quotes or angle brackets) of the file being included.</param>
      <param name="Position">Required. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.Because collections begin their count at one, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
      <summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
      <returns>A <see cref="T:EnvDTE.CodeVariable" /> object.</returns>
      <param name="Name">Required. The name of the new variable.</param>
      <param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef" /> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef" /> object, a <see cref="T:EnvDTE.vsCMTypeRef" /> constant, or a fully qualified type name.</param>
      <param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement" />, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)" /> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
      <param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess" /> constant.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Attributes">
      <summary>Gets a collection of all of the attributes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.BeginBatch">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Classes">
      <summary>Gets a collection of classes for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.CodeElementFromFullName(System.String)">
      <summary>Gets a collection of the specified code elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
      <param name="Name">Required. The full name of the elements to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.CodeElementFromPoint(EnvDTE.TextPoint,EnvDTE.vsCMElement)">
      <summary>Gets a code element at a specific location in a source file.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElement" /> object.</returns>
      <param name="Point">Required. A <see cref="T:EnvDTE.TextPoint" /> object representing the editor location for which you want a code element.</param>
      <param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the code element of the specified type that contains the editor location.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.CodeElements">
      <summary>Gets a collection of code elements.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.CommitTransaction">
      <summary>Commits the current transaction for the object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Delegates">
      <summary>Gets a collection of delegates for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.ElementFromID(System.String)">
      <summary>Not currently implemented.</summary>
      <param name="ID">String ID of the element to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.EndBatch">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.EndPoint">
      <summary>Gets the edit point that is the location of the end of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Enums">
      <summary>Gets a collection of enumerations for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Functions">
      <summary>Gets a collection of functions for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IDLImports">
      <summary>Gets the collection of Import statements from the .idl file of the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IDLLibraries">
      <summary>Gets the collection of Library elements on the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Imports">
      <summary>Gets the collection of #import statements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Includes">
      <summary>Gets the collection of #include statements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Interfaces">
      <summary>Gets the collection of interfaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IsBatchOpen">
      <summary>Not currently implemented.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IsManaged">
      <summary>Gets true if the ref keyword is used.</summary>
      <returns>true if the ref keyword is used; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IsMCOldSyntax">
      <summary>Gets a value indicating whether the file was compiled using the old syntax.</summary>
      <returns>true if the file was compiled using the old syntax; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.IsSynchronized"></member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Language">
      <summary>Gets the programming language used to author the code.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Macros">
      <summary>Gets the collection of macros (#define statements) for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Maps">
      <summary>Gets the collection of maps for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Namespaces">
      <summary>Gets the collection of namespaces for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Parent">
      <summary>Gets the immediate parent object of a given object.</summary>
      <returns>A <see cref="T:EnvDTE.ProjectItem" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.ParseStatus">
      <summary>Gets an enumeration defining the outcome of parsing the file for the code model.</summary>
      <returns>A <see cref="T:EnvDTE80.vsCMParseStatus" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Remove(System.Object)">
      <summary>Removes the specified project from the solution.</summary>
      <param name="Element">Required. The project to remove from the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.RemoveEx(System.Object,System.Int32)">
      <summary>Removes the specified project from the solution with an option to delete.</summary>
      <param name="Element">Required. The project to remove from the solution.</param>
      <param name="Delete">Indicates whether the element is deleted or not. If <paramref name="Delete" /> = 1, the element is deleted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.StartPoint">
      <summary>Gets a <see cref="T:EnvDTE.TextPoint" /> object that defines the beginning of the code item.</summary>
      <returns>A <see cref="T:EnvDTE.TextPoint" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.StartTransaction(System.String)">
      <summary>Begins a transaction.</summary>
      <param name="bstrName">Required. The name of the transaction. This name identifies the item placed on the Undo stack after the transaction is completed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Structs">
      <summary>Gets the collection of structure elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Synchronize">
      <summary>Synchronizes all code model objects in the solution with edits made to source files.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Typedefs">
      <summary>Gets the collection of typedef elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Unions">
      <summary>Gets the collection of union elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Usings">
      <summary>Gets the collection of #using elements for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.ValidateMember(System.String,EnvDTE.vsCMElement,System.String)">
      <summary>Validates that the proposed name is a valid C++ name for the kind given in the context of the parent object.</summary>
      <returns>true if the proposed name is a valid C++ name; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the object being validated.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value representing the type of object to be validated.</param>
      <param name="bstrType">Optional. The type of object being validated.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.VCCodeModel.VCFileCodeModel.Variables">
      <summary>Gets the collection of variables for the object.</summary>
      <returns>A <see cref="T:EnvDTE.CodeElements" /> collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager">
      <summary>An object used to validate various code elements of a C++ source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.CompareTokenStreams(System.String,System.String)">
      <summary>Compares two text streams token-wise (skipping comments and whitechars).</summary>
      <returns>true if the strings match; otherwise, false.</returns>
      <param name="bstr1">A string to compare.</param>
      <param name="bstr2">A string to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.IsReservedName(System.String,System.Boolean)">
      <summary>Determines if the specified name is a C++ reserved name.</summary>
      <returns>true for C++ reserved name; otherwise, false.</returns>
      <param name="bstrName">The name to be validated.</param>
      <param name="bManaged">Optional. true if it is Visual C++, otherwise this value is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.RefreshUserKeywords(System.String)">
      <summary>Refreshes the user-defined keywords from a file.</summary>
      <param name="bstrUserTypeFile">Optional. The name of the user keyword file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.ValidateFileName(System.String,Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension)">
      <summary>Determines if the specified file name is a valid C++ file name.</summary>
      <returns>true if the specified file name is a valid C++ file name; otherwise, false.</returns>
      <param name="bstrFile">Required. The file name to be validated.</param>
      <param name="eFileType">Optional. A <see cref="T:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension" /> value representing the valid file type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.ValidateIdentifier(System.String)">
      <summary>Determines if the specified name is a valid C++ identifier.</summary>
      <returns>true if the specified name is a valid C++ identifier; otherwise, false.</returns>
      <param name="bstrIdentifier">Required. The identifier to be validated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.ValidateParameterNames(System.String,System.String,EnvDTE.vsCMElement)">
      <summary>Determines if the specified parameter list is valid.</summary>
      <returns>true if the specified parameter list is valid; otherwise, false.</returns>
      <param name="bstrName">Required. The name of the method.</param>
      <param name="bstrParameterNames">Required. The parameters of the specified method.</param>
      <param name="Kind">Required. A <see cref="T:EnvDTE.vsCMElement" /> value specifying the parameter type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.ValidateQualifiedName(System.String)">
      <summary>Determines if the specified name is a valid C++ qualified name.</summary>
      <returns>true if the specified name is a valid C++ qualified name; otherwise, false.</returns>
      <param name="bstrName">Required. The qualified name being validated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.VCCodeModel.VCLanguageManager.ValidateType(System.String)">
      <summary>Determines if the specified expression is a valid C++ type expression.</summary>
      <returns>true if the specified expression is a valid C++ type expression; otherwise, false.</returns>
      <param name="bstrType">Required. The expression being validated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition">
      <summary>Determines the position of the new code element in relation to the parent object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition.vsCMAddPositionInvalid">
      <summary>Enumeration is uninitialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition.vsCMAddPositionDefault">
      <summary>The default placement determined by the library (same as <see cref="F:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition.vsCMAddPositionEnd" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition.vsCMAddPositionEnd">
      <summary>Item inserted at end of parent object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMAddPosition.vsCMAddPositionStart">
      <summary>Item inserted at beginning of parent object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vsCMMFCDialogVariableIDType">
      <summary>Used by the <see cref="P:Microsoft.VisualStudio.VCCodeModel.MFCDialogVariableExtender.IDType" /> property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMMFCDialogVariableIDType.vsCMMFCDialogVarIDNone">
      <summary>Enumeration is uninitialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMMFCDialogVariableIDType.vsCMValueType">
      <summary>Variable is a standard type (int, bool).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMMFCDialogVariableIDType.vsCMControlType">
      <summary>Variable is a control type (CButton, CEdit, and so on.)</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vsCMSort">
      <summary>Used by the <see cref="M:Microsoft.VisualStudio.VCCodeModel.VCCodeElements.Sort(Microsoft.VisualStudio.VCCodeModel.vsCMSort)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMSort.vsCMSortAlpha">
      <summary>Sort by name of element (from A to Z).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMSort.vsCMSortLine">
      <summary>Sort by position of element in source file or project (ascending order).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension">
      <summary>Used by the ValidateFile method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension.vsCMValidateFileExtNone">
      <summary>Valid file may have any extension.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension.vsCMValidateFileExtCpp">
      <summary>Valid file has a .cpp or .h extension.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension.vsCMValidateFileExtCppSource">
      <summary>Valid file has a .cpp extension.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMValidateFileExtension.vsCMValidateFileExtHtml">
      <summary>Valid file has a .html or .htm extension.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VCCodeModel.vsCMWhere">
      <summary>Used by the StartPointOf, EndPointOf, and Location properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMWhere.vsCMWhereInvalid">
      <summary>Enumeration is uninitialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMWhere.vsCMWhereDefault">
      <summary>Avoids errors by searching for either a definition or declaration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMWhere.vsCMWhereDeclaration">
      <summary>The declaration of the parent object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VCCodeModel.vsCMWhere.vsCMWhereDefinition">
      <summary>The definition of the parent object.</summary>
    </member>
  </members>
</doc>