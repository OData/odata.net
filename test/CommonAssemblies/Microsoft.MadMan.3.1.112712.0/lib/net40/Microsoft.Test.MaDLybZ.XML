<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Test.MaDLybZ</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Test.MaDLybZ.BooleanSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type <see cref="T:System.Boolean"/>.
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Boolean"/>:
            <code>
            BooleanSet booleanSet = new BooleanSet(Seed.NextSeed());
            bool testValue = booleanSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.BooleanSetAttribute"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactorySet`1">
            <summary>
            A weighted represention of a set of data of type <typeparamref name="T"/>, which can 
            randomly produce data from the set it represents based on a given <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <typeparam name="T">The type of data which the set contains and can produce.</typeparam>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactorySet">
            <summary>
            A weighted represention of a set of data which can randomly produce data
            from the set it represents based on a given <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.IWeightedChoice">
            <summary>
            A value with a certain "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s
            </summary>
            <example>
            In this example, the <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> interface is implemented to create a class that always
            has a weight of 0.5:
            <code>
            public class FiftyPercentChoice : IWeightedChoice
            {
                public double Weight
                {
                    get
                    {
                        return 0.5D;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.IWeightedChoice.Weight">
            <summary>
            Gets the "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s
            </summary>
            <example>
            In this example, the <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> interface is implemented to create a class that always
            has a weight of 0.5:
            <code>
            public class FiftyPercentChoice : IWeightedChoice
            {
                public double Weight
                {
                    get
                    {
                        return 0.5D;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.FactorySet.empty">
            <summary>
            The empty set for this factory set
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.FactorySet.productionOptions">
            <summary>
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.ProductionOptions"/> to be added when producing from the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> class with the specified <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">seed, attribute or delegateTarget is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> class with the specified <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/>.
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.InitializeSet(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> class specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.CreateFactorySet``1(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of the specified type, with the specified <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/>
            </summary>
            <typeparam name="T">Type of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to be created</typeparam>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/> for the newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></param>
            <returns>A newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type T</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.CreateFactorySet(System.Type,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of the specified type, with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="componentType">Type of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to be created</param>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.FactorySet.Seed"/> for the newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></param>
            <returns>A newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></returns>
            <exception cref="T:System.ArgumentNullException">componentType or seed is null</exception>
            <exception cref="T:System.ArgumentException">componentType is not assignable to <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></exception>
            <exception cref="T:System.ArgumentException">componentType does not implement the proper constructor of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.CreateFactorySet(Microsoft.Test.MaDLybZ.FactorySetAttribute,Microsoft.Test.MaDLybZ.Seed,System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>
            defined at <paramref name="delegateTarget"/>, with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> that describes the desired <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> for random value generation.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.</returns>
            <exception cref="T:System.ArgumentNullException">attribute, seed or delegateTarget is null</exception>
            <exception cref="T:System.ArgumentException">attribute.SetType is not assignable to <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></exception>
            <exception cref="T:System.ArgumentException">attribute.SetType does not implement the proper constructor of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.Produce(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces data for the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> corresponding to the original call to Produce</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
            <exception cref="T:Microsoft.Test.MaDLybZ.ProductionException">The current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is empty.</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.CreateProductionEventArgs(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption},Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <param name="options">User-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the data to produce.</param>
            <param name="parentEventArgs"><see cref="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.CallerEventArgs"/> for the newly created production event args.</param>
            <returns><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.IsEmpty">
            <summary>
            Determines if the set is empty
            </summary>
            <returns>True if the set is empty, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.Equals(System.Object)">
            <summary>
            Overriden from base class to identify all empty sets of the same type as equal.
            </summary>
            <param name="obj">Object to compare the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> to</param>
            <returns>True if the specifed object equals the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/></returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.GetHashCode">
            <summary>
            Overriden from the base class to provide the same hash code for all empty sets of the same type.
            </summary>
            <returns>Hashcode for the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/></returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.SpawnSet``1">
            <summary>
            Spawns a new <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type T where T is a subclass of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to spawn</typeparam>
            <returns>A newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type T</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.SpawnSet(System.Type)">
            <summary>
            Spawns a new <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type T where T is a subclass of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            </summary>
            <param name="factorySetType">Type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to spawn</param>
            <returns>A newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type factorySetType</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.OnCreatingData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Performs functionality before the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> method is called, and invokes the <see cref="E:Microsoft.Test.MaDLybZ.FactorySet.CreatingData"/> event.
            </summary>
            <remarks>
            Deriving classes can override this method, instead of attaching to the event.
            </remarks>
            <param name="e">Event arguments for the current production</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.OnCreatedData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Performs functionality after the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> method is called, and invokes the <see cref="E:Microsoft.Test.MaDLybZ.FactorySet.CreatedData"/> event.
            </summary>
            <remarks>
            Deriving classes can override this method, instead of attaching to the event.
            </remarks>
            <param name="e">Event arguments for the current production</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates data for the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <remarks>
            If overridden, this should store the created data in the <see cref="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.Product"/> of the passed-in
            <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/>. The base implementation invokes the <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.CreateDataDelegate"/>. Deriving 
            classes should override this method, instead of simply specifying a delegate as the delegate is public and could be
            changed at anytime.
            </remarks>
            <param name="e">Event arguments for the current production operation.</param>
        </member>
        <member name="E:Microsoft.Test.MaDLybZ.FactorySet.CreatingData">
            <summary>
            Event which is raised before the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> method is called
            </summary>
        </member>
        <member name="E:Microsoft.Test.MaDLybZ.FactorySet.CreatedData">
            <summary>
            Event which is raised after the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> method is called
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.Empty">
            <summary>
            Gets an empty set
            </summary>
            <remarks>Empty sets contain no data and therefore cannot produce.  
            By default calling produce on an empty set will result in a <see cref="T:System.NotSupportedException"/>.  
            By definition all empty sets which produce type T data are equal.</remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.DataGenerator">
            <summary>
            Gets the <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.DataGenerator"/> that will produce values for the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.Seed">
            <summary>
            Gets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> by which data is generated.
            </summary>
            <remarks>
            By definition two instances of <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.DataGenerator"/> with the same seed will produce the same data in the same 
            order. This must be conformed to when implementing data generation functions in deriving classes.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.Weight">
            <summary>
            Gets or sets the weight of the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <remarks>
            The higher the weight of a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>, the more likely it is to be selected when choosing from
            between multiple <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s. <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s with a weight less then or equal to zero will never be chosen.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.ProductUse">
            <summary>
            Gets or sets the the inteded use of the product of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.CreateDataDelegate">
            <summary>
            Gets or sets the method that will be called upon the occurance of creating data.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.ProductionOptions">
            <summary>
            Gets <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to be added when producing from the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.ProductionArgs">
            <summary>
            Gets or sets arguments to be used in production from the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.DelegateTarget">
            <summary>
            Gets or sets the object instance on which all delegates of the class are invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySet.SyncRoot">
            <summary>
            Provides a syncronization mechanism for the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <remarks>Instances of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>, and all deriving classes are not intrinsically thread safe.  Calling 
            code must provide syncronization to use an instance of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> across multiple threads to produce data.</remarks>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactorySet.EmptySet">
            <summary>
            Class used by <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to represent an empty set.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet.EmptySet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet.EmptySet"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.op_BitwiseOr(Microsoft.Test.MaDLybZ.FactorySet{`0},Microsoft.Test.MaDLybZ.FactorySet{`0})">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> of the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> resulting from this operation when <paramref name="setA"/> and
            <paramref name="setB"/> are empty is an empty set; if one is empty and the other is not, the result
            is the one that is not empty; and if neither is empty, the resulting <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>
            will contain both sets.
            </remarks>
            <param name="setA">The first instance of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.</param>
            <param name="setB">The second instance of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.</param>
            <returns>An instance of <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> containing the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">One of the specified sets is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.op_LogicalNot(Microsoft.Test.MaDLybZ.FactorySet{`0})">
            <summary>
            Returns the inverse of the specified set
            </summary>
            <param name="set">Set whose inverse to return</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which is the inverse of the specified set</returns>
            <exception cref="T:System.ArgumentNullException">The specifed set is null</exception>
            <exception cref="T:System.NotSupportedException">The specified set type does not implement the <see cref="T:Microsoft.Test.MaDLybZ.IInvertibleSet`1"/> interface</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce">
            <summary>
            Produces a valid value of type <typeparamref name="T"/>.
            </summary>
            <returns>The produced value.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.TryProduce(`0@)">
            <summary>
            Attempts to produce a value of type <typeparamref name="T"/> by selecting one of the
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s in the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.
            </summary>
            <param name="product">A valid value of type <typeparamref name="T"/> if the set is not empty;
            otherwise the default value for type <typeparamref name="T"/>.</param>
            <returns>True if the set is not empty was able to produce; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySet`1.MergeSets(Microsoft.Test.MaDLybZ.FactorySet{`0},Microsoft.Test.MaDLybZ.FactorySet{`0})">
            <summary>
            Merges the contents of the of the two <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s.
            </summary>
            <param name="setA">The first <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> to be unioned</param>
            <param name="setB">The second <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> to be unioned</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> contains the specified sets.</returns>
            <remarks>If the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s are unions, the returned <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> will contain all of their <see cref="P:Microsoft.Test.MaDLybZ.FactoryUnion`1.Sets"/></remarks>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.BooleanSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> for random value generation.</param>
            <example>
            <code>
            BooleanSet booleanSet = new BooleanSet(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.BooleanSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.BooleanSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.BooleanSetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <remarks>
            The values of parameters and named properties supplied in the definition of <paramref name="attribute"/>
            will be copied to the corresponding properties of the current <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/>.
            </remarks>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.BooleanSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.BooleanSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.BooleanSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Boolean"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.BooleanSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> for the production of values of type <see cref="T:System.Boolean"/>.
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty",
            and if the "Boolean" option is passed into the factory's <see cref="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(System.Enum[])"/> method
            or is chosen at random, the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/> will produce a value of type <see cref="T:System.Boolean"/>:
            <code>
            [FactoryMember(typeof(object))]
            public enum SomeProperty
            {
                [IntegerRange()]
                Integer,
                <para/>
                [BooleanSet()]
                Boolean
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.BooleanSet"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactorySetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> class describing a
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which produces values of type <paramref name="productType"/>
            by calling a delegate method named <paramref name="createData"/>.
            </summary>
            <param name="productType">The type of value which the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> described 
            by the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> produces.</param>
            <param name="createData">The  name of the delegate method to call to produce the value
            for the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which this attribute describes.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> class describing a
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type <paramref name="setType"/>.
            </summary>
            <param name="setType">The type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the attribute describes. This should be a type which derives from <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/></param>
            <exception cref="T:System.ArgumentNullException">setType is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> class describing a
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> of type <paramref name="genericSetType"/> which produces values
            of type <paramref name="productType"/>.
            </summary>
            <param name="genericSetType">The type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the attribute describes. This should be a type which derives from <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/></param>
            <param name="productType">The type of value which <paramref name="genericSetType"/> produces.</param>
            <exception cref="T:System.ArgumentNullException">genericSetType or productType is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.CreateFactorySet``1(Microsoft.Test.MaDLybZ.Seed,System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to correspond to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.
            </summary>
            <typeparam name="T">The type of the desired <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</typeparam>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> for the new <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">Object instance on which all delegates are invoked</param>
            <exception cref="T:System.ArgumentException">Type parameter does not match the component's type</exception>
            <exception cref="T:System.ArgumentNullException">seed or delegateTarget is null</exception>
            <returns>Object returned by calling the constructor of passed in Type</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.CreateFactorySet(Microsoft.Test.MaDLybZ.Seed,System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to correspond to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.
            </summary>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> for the new <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">Object instance on which all delegates are invoked</param>
            <returns>The newly created <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</returns>
            <exception cref="T:System.ArgumentNullException">seed or delegateTarget is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactorySetAttribute.BuildSetType(System.Type,System.Type)">
            <summary>
            Builds componentType that is inherited from the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> using the given data type
            </summary>
            <param name="genericSetType">Type of component which the attribute describes</param>
            <param name="dataType">The data type which the genericComponent type produces</param>
            <returns>The fully qualified <see cref="T:System.Type"/> of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> represents</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="genericSetType"/> or <paramref name="dataType"/> is null</exception>
            <exception cref="T:System.ArgumentException">The build type does not derive from <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/></exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Weight">
            <summary>
            Gets or sets the weight of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.SetType">
            <summary>
            Gets the type of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductType">
            <summary>
            Gets the type of value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse">
            <summary>
            Gets or sets the the inteded use of the product of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Initialize">
            <summary>
            Gets or sets the name of the method that will be called in order to initialize the component.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Initializing">
            <summary>
            Gets or sets the name of the method that will be called before initializing the component from the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Initialized">
            <summary>
            Gets or sets the name of the method that will be called once the component is initialized from the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.CreatingData">
            <summary>
            Gets or sets the name of the method to be attatched to the <see cref="E:Microsoft.Test.MaDLybZ.FactorySet.CreatingData"/> event.
            </summary>
            <remarks>
            The specified delegate must be a non-static method defined in the class in which the current 
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> is used.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.CreatedData">
            <summary>
            Gets or sets the name of the method to be attatched to the <see cref="E:Microsoft.Test.MaDLybZ.FactorySet.CreatedData"/> event.
            </summary>
            <remarks>
            The specified delegate must be a non-static method defined in the class in which the current 
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> is used.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.CreateData">
            <summary>
            Gets or sets the name of the method which implements the <see cref="P:Microsoft.Test.MaDLybZ.FactorySet.CreateDataDelegate"/>.
            </summary>
            <remarks>
            The specified delegate must be a non-static method defined in the class in which the current 
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> is used.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.RequestedOptions">
            <summary>
            Gets or sets <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to be requested when the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            which the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes is selected.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProhibitedOptions">
            <summary>
            Gets or sets <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to be prohibited when the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            which the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> describes is selected.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductionArgs">
            <summary>
            Gets or sets arguments to be passed through production events with <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/>.<see cref="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.ProductionArgs"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.BooleanSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.BooleanSetAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ByteRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Byte"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Byte"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MinValue"/> and <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MaxValue"/>:
            <code>
            ByteRange byteRange = new ByteRange(Seed.NextSeed());
            byte testValue = byteRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            ByteRange.Min = 1;
            ByteRange.Max = 10;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryRange`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> for producing values of type <typeparamref name="T"/> from within a limited range.
            </summary>
            <typeparam name="T">The type of data which implements IComparable interface.</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryRange`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used for selecting randomly generated values</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryRange`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactoryRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactoryRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactoryRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryRange`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min">
            <summary>
            Gets or sets the minimum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.
            </summary>
            <example>
            This example demonstrates the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties using
            <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>, where the value produced will fall between 0 and 1000:
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            integerRange.Min = 0;
            integerRange.Max = 1000;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max">
            <summary>
            Gets or sets the maximum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.
            </summary>
            <example>
            This example demonstrates the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties using
            <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>, where the value produced will fall between 0 and 1000:
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            integerRange.Min = 0;
            integerRange.Max = 1000;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ByteRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> for random value generation</param>
            <example>
            <code>
            ByteRange byteRange = new ByteRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ByteRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.ByteRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ByteRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ByteRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Byte"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> for the production of values of type <see cref="T:System.Byte"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Byte"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(byte))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between byte.MinValue and byte.MaxValue
                /// &lt;/summary&gt;
                [ByteRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10
                /// &lt;/summary&gt;
                [ByteRange(Min = 1, Max = 10)]
                BetweenOneAndTen,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [ByteRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [ByteRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ByteRange"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> for the production of values from within a limited range.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryRangeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryRangeAttribute"/> class describing
            a <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> of type <paramref name="componentType"/>.
            </summary>
            <param name="componentType">The type of component which the attribute describes. This should be a type which derives from <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/>.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryRangeAttribute.CheckFactoryRangeDerivation(System.Type)">
            <summary>
            Verifies that the attribute derives from the expected generic base type
            </summary>
            <param name="componentType">The type produced by the attribute</param>
            <returns>The type produced by the attribute if the expected generic base type is correct</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ByteRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ByteRangeAttribute"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ByteRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MinValue"/>.
            </remarks>
            <example>
            <code>
            [ByteRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ByteRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.ByteRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [ByteRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.CharacterRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Char"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>,
            a minimum value of "A" and a maximum value of "Z", then calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to generate a character within that range:
            <code>
            [TestMethod]
            public void SomeTest
            {
                CharacterRange characterRange = new CharacterRange(Seed.NextSeed(), 'A', 'Z');
                char testValue = characterRange.Produce();
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.CharacterRangeAttribute"/>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.lowercaseAlpha">
            <summary>
            The set from which a character will be generated using lower_case alphabets
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.uppercaseAlpha">
            <summary>
            The set from which a character will be generated using upper_case alphabets
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.digits">
            <summary>
            The set from which a character will be generated using 0 to 9 numerics
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.alphaNumerics">
            <summary>
            The set from which a character will be generated using lower_case, uppser_case alphabets, and numbers. 
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.alphabetic">
            <summary>
            The set from which a character will be generated using alphabetic characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.ascii">
            <summary>
            The set from which a character will be generated using ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.asciiXml">
            <summary>
            The set from which a character will be generated using ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.basicPrintableAscii">
            <summary>
            The set from which a character will be generated using basic printable ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.extendedPrintableAscii">
            <summary>
            The set from which a character will be generated using extended printable ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.printableAscii">
            <summary>
            The set from which a character will be generated using all printable ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.nonprintableAscii">
            <summary>
            The set from which a character will be generated using nonprintable ascii characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.unicode">
            <summary>
            The set from which a character will be generated using unicode characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.unicodeXml">
            <summary>
            The set from which a character will be generated using unicode characters accepted in xml
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.specialEuropean">
            <summary>
            The set from which a character will be generated using special European characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.bidirectional">
            <summary>
            The set from which a character will be generated using bidi characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.doubleByte">
            <summary>
            The set from which a character will be generated using dbcs characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.mixedGlobalization">
            <summary>
            The set from which a character will be generated using bidi, dbcs, latin characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.hebrew">
            <summary>
            The set from which a character will be generated using Hebrew characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CharacterRange.chinese">
            <summary>
            The set from which a character will be generated using Chinese characters
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> for random value generation</param>
            <example>
            <code>
            CharacterRange characterRange = new CharacterRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            which will produce a character between the specified minimum and maximum
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> for random value generation</param>
            <param name="min">The character that is the inclusive minimum of the range</param>
            <param name="max">The character that is the inclusive maximum of the range</param>
            <example>
            <code>
            CharacterRange characterRange = new CharacterRange(Seed.NextSeed(), 'A', 'Z');
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Char,System.Char,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            which will produce a character between the specified minimum and maximum
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> for random value generation</param>
            <param name="min">The character that is the inclusive minimum of the range</param>
            <param name="max">The character that is the inclusive maximum of the range</param>
            <param name="weight">The expected weight that you want this CharacterRange to have</param>
            <example>
            <code>
            CharacterRange characterRange = new CharacterRange(Seed.NextSeed(), 'A', 'Z');
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.CharacterRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.CharacterRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <remarks>
            The values of parameters and named properties supplied in the definition of <paramref name="attribute"/>
            will be copied to the corresponding properties of the current <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>.
            </remarks>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.CharacterRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.CreateCommonCharacterSet(Microsoft.Test.MaDLybZ.CommonCharacterSet,Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of type char corresponding to the specified value of <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/>.
            </summary>
            <param name="commonCharacterSet">Type of <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/> to be created</param>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> for the newly created character set</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of type char corresponding to the specified value of <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/></returns>
            <exception cref="T:System.ArgumentNullException">seed is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Char"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Alphabetic">
            <summary>
            Gets the set from which a character will be generated using alphabetic characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Alphanumerics">
            <summary>
            Gets the set from which a character will be generated using lower_case, uppser_case alphabets, and numbers 
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Digits">
            <summary>
            Gets the set from which a character will be generated using 0 to 9 numerics
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.LowercaseAlpha">
            <summary>
            Gets the set from which a character will be generated using lower_case alphabets
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.UppercaseAlpha">
            <summary>
            Gets the set from which a character will be generated using upper_case alphabets
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Ascii">
            <summary>
            Gets the set from which a character will be generated using ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.AsciiXml">
            <summary>
            Gets the set from which a character will be generated using ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.BasicPrintableAscii">
            <summary>
            Gets the set from which a character will be generated using basic printable ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.ExtendedPrintableAscii">
            <summary>
            Gets the set from which a character will be generated using extended printable ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.PrintableAscii">
            <summary>
            Gets the set from which a character will be generated using all printable ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.NonprintableAscii">
            <summary>
            Gets the set from which a character will be generated using nonprintable ascii characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Unicode">
            <summary>
            Gets the set from which a character will be generated using unicode characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.UnicodeXml">
            <summary>
            Gets the set from which a character will be generated using unicode characters accepted in xml
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.SpecialEuropean">
            <summary>
            Gets the set from which a character will be generated using special European characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.DoubleByte">
            <summary>
            Gets the set from which a character will be generated using Chinese characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.MixedGlobalization">
            <summary>
            Gets the set from which a character will be generated using Chinese characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.BIDirectional">
            <summary>
            Gets the set from which a character will be generated using Hebrew characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Chinese">
            <summary>
            Gets the set from which a character will be generated using Chinese characters
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRange.Hebrew">
            <summary>
            Gets the set from which a character will be generated using Hebrew characters
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.CharacterRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> for the production of values of type <see cref="T:System.Char"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Char"/>,
            and if the "Uppercase" option is passed into the factory's <see cref="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(System.Enum[])"/> method or
            is chosen at random, the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> will produce a value between "A" and "Z":
            <code>
            [FactoryMember(typeof(char))]
            public enum SomeProperty
            {
                [CharacterRange(Min = 'A', Max = 'Z')]
                Uppercase,
                <para/>
                [CharacterRange(Min = 'a', Max = 'z')]
                Lowercase,
                <para/>
                [CharacterRange(Min = '0', Max = '9')]
                Digit
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.CharacterRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> which the attribute describes
            </summary>
            <example>
            <code>
            [CharacterRange(Min = 'A', Max = 'Z')]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.CharacterRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> which the attribute describes
            </summary>
            <example>
            <code>
            [CharacterRange(Min = 'A', Max = 'Z')]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.CommonCharacterSet">
            <summary>
            Specifies a predefined character range to use in string generation
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Alphabetic">
            <summary>
            Uppercase letters A through Z and lowercase letters a through z
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Alphanumeric">
            <summary>
            Uppercase letters, lowercase letters and digits
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Ascii">
            <summary>
            All ASCII characters from 0 to 255
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.AsciiXml">
            <summary>
            ASCII character range allowed in XML, from 0 to 255
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.BasicPrintableAscii">
            <summary>
            Basic printable ASCII characters from 20 to 126, or space to tilde
            (includes uppercase letters, lowercase letters, digits and standard keyboard characters)
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.ExtendedPrintableAscii">
            <summary>
            Extended printable ASCII characters from 128 to 254
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.LowercaseAlpha">
            <summary>
            Lowercase letters a through z
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.NonprintableAscii">
            <summary>
            ASCII characters from 0 to 19, 127 and 255
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.NonprintableAsciiUnicode">
            <summary>
            Unicode characters not present in the printable ASCII set
            (from \u0000 to \u001F, and \u007F to \uFFFF)
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.NonprintableAsciiUnicodeXml">
            <summary>
            Unicode characters not present in the printable ASCII set
            and that can be present in XML (from \u0000 to \u001F,
            and \u007F to \uFFFF)
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Numeric">
            <summary>
            Digits 0 through 9
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.PrintableAscii">
            <summary>
            Basic and extended prinable ASCII characters, from 20 to 126 and 128 to 254
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.PrintableAsciiUnicode">
            <summary>
            Unicode characters present in the prinable ASCII set
            (from \u0020 to \u007E)
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Unicode">
            <summary>
            All unicode characters from \u0000 to \uFFFF
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.UnicodeXml">
            <summary>
            Unicode character range allowed in XML, from \u0000 to \u7FFF
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.UppercaseAlpha">
            <summary>
            Uppercase letters A through Z
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.BIDirectional">
            <summary>
            All of the Unicode character range the different Bi-directional characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.DoubleByte">
            <summary>
            All of the Unicode character range the different DBCS characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.Mixed">
            <summary>
            All of the Unicode character range the different BiDi, DBCS and Latin characters
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ConstantSet`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> selects at random from a list of values.
            </summary>
            <typeparam name="T">The type of the value produced.</typeparam>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and supplies it with a list of constant values, then calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce one of those values chosen at random:
            <code>
            [TestMethod]
            public void SomeTest
            {
                ConstantSet&lt;int&gt; constantSet = new ConstantSet&lt;int&gt;(Seed.NextSeed());
                constantSet.AddValues(new int[] { 0, 1, 2 });
                int testValue = constantSet.Produce();
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ConstantSet`1.values">
            <summary>
            The possible values from which the set will select and return a value
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> for random value generation.</param>
            <example>
            <code>
            ConstantSet&lt;int&gt; constantSet = new ConstantSet&lt;int&gt;(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.ConstantSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.InvalidCastException">One of the <see cref="P:Microsoft.Test.MaDLybZ.ConstantSetAttribute.Values"/> specified on the attribute cannont be cast to type T</exception>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.ConstantValueAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.InvalidCastException">The <see cref="P:Microsoft.Test.MaDLybZ.ConstantValueAttribute.Value"/> specified on the attribute cannont be cast to type T</exception>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.IsEmpty">
            <summary>
            Determines if the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> contains no <see cref="P:Microsoft.Test.MaDLybZ.ConstantSet`1.Values"/> from which to choose
            </summary>
            <returns>True if the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/>'s <see cref="P:Microsoft.Test.MaDLybZ.ConstantSet`1.Values"/> list is empty, otherwise false</returns>
            <example>
            <code>
            ContantSet&lt;int&gt; set = new ContantSet&lt;int&gt;(Seed.NextSeed());
            return union.IsEmpty(); // This will return true because the Values property is an empty list
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.AddValues(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified values to the <see cref="P:Microsoft.Test.MaDLybZ.ConstantSet`1.Values"/> list of candidates to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <param name="toAdd">The values to add to the current <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="toAdd"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSet`1.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <typeparamref name="T"/> by selecting an item from <see cref="P:Microsoft.Test.MaDLybZ.ConstantSet`1.Values"/>
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ConstantSet`1.Values">
            <summary>
            Gets the possible values from which the set will select and return a value
            </summary>
            <example>
            <code>
            ConstantSet&lt;int&gt; constantSet = new ConstantSet&lt;int&gt;(Seed.NextSeed());
            constantSet.Values = new List&lt;int&gt;(new int[] { 0, 1, 2 });
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> for the production of values of any type
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and if the "Zero" option is passed into the factory's <see cref="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(System.Enum[])"/> method or
            is chosen at random, the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> will produce the value 0:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                [ConstantSet(typeof(int), Values = new object[] { 0 })]
                Zero,
                <para/>
                [IntegerRange(Min = 1, Max = int.MaxValue)]
                Positive,
                <para/>
                [IntegerRange(Min = int.MinValue, Max = -1)]
                Negative
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/> class which describes
            a <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> that produces values of type <paramref name="productType"/>.
            </summary>
            <param name="productType">The data type of the constant to be produced.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantSetAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/> class derived from by
            <paramref name="componentType"/> and which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> that
            produces values of type <paramref name="dataType"/>.
            </summary>
            <param name="componentType">The type of the derivative of <see cref="T:Microsoft.Test.MaDLybZ.ConstantSetAttribute"/>.</param>
            <param name="dataType">The data type of the constant to be produced.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ConstantSetAttribute.Values">
            <summary>
            Gets or sets the possible values from which the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> the current attribute describes
            will select and return a value
            </summary>
            <example>
            <code>
            [ConstantSet(typeof(int), Values = new object[] { 0, 1, 2 })]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> for the production of a single value of any type
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and if the "Zero" option is passed into the factory's <see cref="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(System.Enum[])"/> method or
            is chosen at random, the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> will produce the value 0:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                [ConstantValue(typeof(int), Value = 0)]
                Zero,
                <para/>
                [IntegerRange(Min = 1, Max = int.MaxValue)]
                Positive,
                <para/>
                [IntegerRange(Min = int.MinValue, Max = -1)]
                Negative
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantValueAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute"/> class which describes
            a <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> that produces a single value of type <paramref name="productType"/>.
            </summary>
            <param name="productType">The data type of the constant to be produced.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ConstantValueAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute"/> class derived from by
            <paramref name="componentType"/> and which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> that
            produces values of type <paramref name="dataType"/>.
            </summary>
            <param name="componentType">The type of the derivative of <see cref="T:Microsoft.Test.MaDLybZ.ConstantValueAttribute"/>.</param>
            <param name="dataType">The data type of the constant to be produced.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ConstantValueAttribute.Value">
            <summary>
            Gets or sets the value which the <see cref="T:Microsoft.Test.MaDLybZ.ConstantSet`1"/> the current attribute describes
            will select and return
            </summary>
            <example>
            <code>
            [ConstantValue(typeof(int), Value = 0)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataFactory">
            <summary>
            An abstract <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> which produces a value by assembling the products of one of
            each of its <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ComplexFactorySet">
            <summary>
            An abstract <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> which produces a value by assembling the products of other <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> class using the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> class using the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.Assemble(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Assembles the data produced by the <see cref="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.Components"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembleData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Assembles data by invoking the <see cref="P:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembleDataDelegate"/> function with the current object and given parameter.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.OnAssemblingData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Calls <see cref="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssemblingData"/> before assembling data using the current component and given parameter to be added as an event handler.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.OnAssembledData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Calls <see cref="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembledData"/> after assembling data using the current component and given parameter to be added as an event handler.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production</param>
        </member>
        <member name="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssemblingData">
            <summary>
            Event to which to attach a delegate to be called before created data is assembled by the factory
            </summary>
        </member>
        <member name="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembledData">
            <summary>
            Event to which to attach a delegate to be called after created data is assembled by the factory
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembleDataDelegate">
            <summary>
            Gets or sets the delegate which will be invoked will be called upon the occurance of assembling data
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ComplexFactorySet.ProductType">
            <summary>
            Gets the type of data produced by the current <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ComplexFactorySet.SetDictionary">
            <summary>
            Gets the dictionary which stores the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s as values whose keys are the enumeration values they decorate.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DataFactory.memberDictionary">
            <summary>
            Stores <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s that belong to the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> according to their <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> for random value generation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="seed"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.RetrieveMember(System.Type)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> assigned to the specified <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/>.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/> is the enumeration to which the
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned. Usually, this is the enumeration decorated by the corresponding
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/>.
            </remarks>
            <param name="optionType">Type of enumeration to which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned.</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> assigned to the specified <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionType"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.CreateProductionEventArgs(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption},Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> which will track the current production operation.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the data to be produced.</param>
            <param name="parentEventArgs">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> tracking the parent production operation, if any.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> to track the current production operation.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.RouteProductionOption(Microsoft.Test.MaDLybZ.ProductionOption)">
            <summary>
            Routes the specified <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> to its corresponding <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>'s <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is the enumeration containing the value
            to which the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> corresponds.
            </remarks>
            <param name="productionOption">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> to route to its corresponding <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>.</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> to which the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> corresponds.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates the data which will be assembled to form the product of the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> by
            calling <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.Produce(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> on each of its <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.AssembleData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Assembles data produced by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>'s <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s to form
            its product.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.OnAssemblingData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Initializes the product of the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> and fires the
            <see cref="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssemblingData"/> event.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> corresponding to the original call to Produce</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.CreateProductionInstance(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Initializes the product of the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory.RouteProductionOptions(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption},Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Routes user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to their corresponding <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s and
            creates a list of only those <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s that correspond to <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s
            belonging to the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.
            </summary>
            <param name="options">User-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the data to produce.</param>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <returns>Those user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s which correspond to <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s
            belonging to the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataFactory.SortedMembers">
            <summary>
            Gets the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s associated with the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> sorted in production
            order based on their <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s with no specified <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey"/> will be last in the sorted collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataFactory.MemberDictionary">
            <summary>
            Gets <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s that belong to the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> according to their <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/>.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/> is the enumeration to which the
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned. Usually, this is the enumeration decorated by the corresponding
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataFactory.OptionRoutingTable">
            <summary>
            Gets the <see cref="P:Microsoft.Test.MaDLybZ.DataFactory.OptionRoutingTable"/> that maps <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to their
            corresponding <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataFactoryAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> that produces a value by assembling the products of one of
            each of its <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactoryAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataFactoryAttribute"/> class corresponding to
            a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> of type <paramref name="setType"/>.
            </summary>
            <param name="setType">Type of <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> which the attribute describes. This should be a type which derives from <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.</param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataFactory`1">
            <summary>
            An abstract <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> which produces a value of type <typeparamref name="T"/> by
            assembling the products of one of each of its <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s.
            </summary>
            <typeparam name="T">The data type of the value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> class using the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce">
            <summary>
            Produces valid data of type <typeparamref name="T"/> at random but conforming to the constraints
            modeled by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>.
            </summary>
            <returns>The produced object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(System.Enum[])">
            <summary>
            Produces data of type <typeparamref name="T"/> at random as described by <paramref name="options"/>
            but otherwise conforming to the constraints modeled by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.<see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>s describing the value to produce.</param>
            <returns>The produced object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce(Microsoft.Test.MaDLybZ.ProductionOption[])">
            <summary>
            Produces data of type <typeparamref name="T"/> at random as described by <paramref name="options"/>
            but otherwise conforming to the constraints modeled by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the value to produce.</param>
            <returns>The produced object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.Produce``1(Microsoft.Test.MaDLybZ.ProductionOption[])">
            <summary>
            Produces data of type <typeparamref name="U"/> at random as described by <paramref name="options"/>
            but otherwise conforming to the constraints modeled by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the value to produce.</param>
            <returns>The produced object of type <typeparamref name="U"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.ProduceMemberData``1(System.Type,System.Enum[])">
            <summary>
            Produces a value for the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> corresponding to <paramref name="memberOptionType"/>
            as described by <paramref name="options"/>.
            </summary>
            <typeparam name="TMember">The type of data to produce and which the desired <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> produces.</typeparam>
            <param name="memberOptionType">Type of enumeration to which the desired <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned.</param>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.<see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>s describing the value to produce for the member.</param>
            <returns>The produced value of type <typeparamref name="TMember"/> for the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> assigned
            to <paramref name="memberOptionType"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataFactory`1.ProduceMemberData``1(System.Type,Microsoft.Test.MaDLybZ.ProductionOption[])">
            <summary>
            Produces a value for the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> corresponding to <paramref name="memberOptionType"/>
            as described by <paramref name="options"/>.
            </summary>
            <typeparam name="TMember">The type of data to produce and which the desired <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> produces.</typeparam>
            <param name="memberOptionType">Type of enumeration to which the desired <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned.</param>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the value to produce for the member.</param>
            <returns>The produced value of type <typeparamref name="TMember"/> for the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> assigned
            to <paramref name="memberOptionType"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataFactory`1.ProductType">
            <summary>
            Gets the type of data produced by the current <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>.
            </summary>
            <value>The type of <typeparamref name="T"/>.</value>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataGenerationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.CharacterSetInnerArraysMustBePairs">
            <summary>
              Looks up a localized string similar to The specified character set contains one or more inner arrays that do not have exactly two items (representing a minimum character and maximum character in the range).
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.ConstructorNotFound">
            <summary>
              Looks up a localized string similar to Cannot find a constructor that takes int argument.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.EmptyDerivedInterfaceName">
            <summary>
              Looks up a localized string similar to Mangled derived interface name is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.FactorySubFactoryCircularDependency">
            <summary>
              Looks up a localized string similar to Circular dependency exists between factory type and sub-factory type.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.FactoryUnionOptionsMustNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The options parameter must not be null and must contain at least one element.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.IFactoryComponentAttributeNotImplemented">
            <summary>
              Looks up a localized string similar to Class does not implement interface IFactoryComponentAttribute&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.InterfaceNotImplemented">
            <summary>
              Looks up a localized string similar to Following Interface is not implemented .
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.InvalidFactoryComponent">
            <summary>
              Looks up a localized string similar to Failed to produce specified factory component: Component Type - {0}, FactoryType  - {1}, InitializedMethod - {2}, Error - {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.InvalidTypeParam">
            <summary>
              Looks up a localized string similar to Passed in Type Parameter does not match Component&apos;s type.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.MethodNotFound">
            <summary>
              Looks up a localized string similar to Cannot find a initializing method.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.NoValidOptionsForMemberMessage">
            <summary>
              Looks up a localized string similar to No options were available for selection. Unable to produce member: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.OptionNotAssigned">
            <summary>
              Looks up a localized string similar to The specified option does not belong to a type having either the FactoryMember or DataSubFactory attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.OptionNotAssignedFactorySetAttribute">
            <summary>
              Looks up a localized string similar to The specified option is not assigned a derivative of the FactorySet attribute: .
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.OptionNotValidForFactoryType">
            <summary>
              Looks up a localized string similar to The specified option does not exist on the factory type or any of its sub-factory types: .
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenCantFindBackRef">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find back reference.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenCantParseMacro">
            <summary>
              Looks up a localized string similar to Cannot parse macro..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenEndRangeNotSpecified">
            <summary>
              Looks up a localized string similar to End of range is not specified..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenExpectedCloseBrace">
            <summary>
              Looks up a localized string similar to Expected &apos;}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenExpectedCloseBracket">
            <summary>
              Looks up a localized string similar to Expected &apos;]&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenExpectedCloseParen">
            <summary>
              Looks up a localized string similar to Expected &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenInvalidBackRefName">
            <summary>
              Looks up a localized string similar to Invalid characters in back reference name..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenInvalidBackRefStart">
            <summary>
              Looks up a localized string similar to Back reference must begin with &apos; or &lt;..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenInvalidCharRange">
            <summary>
              Looks up a localized string similar to Invalid range specified in char set.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenInvalidSetChar">
            <summary>
              Looks up a localized string similar to Invalid character inside set..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenInvalidSetEsc">
            <summary>
              Looks up a localized string similar to Invalid escape inside of set..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenMaxRepeatLessThanMin">
            <summary>
              Looks up a localized string similar to Max repeat is less than min repeat.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenMissingCloseCurlyBrace">
            <summary>
              Looks up a localized string similar to Closing curly brace not found.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenMissingClosingBrace">
            <summary>
              Looks up a localized string similar to Missing closing brace &apos;]&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenMissingSize">
            <summary>
              Looks up a localized string similar to Empty curly brace not allow, please specify size.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenNoElementFound">
            <summary>
              Looks up a localized string similar to Reached end of string. No element found..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenNoNameEnd">
            <summary>
              Looks up a localized string similar to Name end not found..
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenNoValidCharRange">
            <summary>
              Looks up a localized string similar to No valid range specified in char set.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenOnlyPositiveIntForSize">
            <summary>
              Looks up a localized string similar to Only positive integers allowed for size.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenRepeatCantBeParsed">
            <summary>
              Looks up a localized string similar to Repeat values cannot be parsed.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.RegexStringGenStartLessThanEnd">
            <summary>
              Looks up a localized string similar to Start of range must be less than end of range.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerationResources.TypeNotAssignableFactoryComponent">
            <summary>
              Looks up a localized string similar to Type must be assignable to type FactoryComponent.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataGenerator">
            <summary>
            Randomly generates data based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> 
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataGenerator"/> class with a seed spawned from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>
            </summary>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataGenerator"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DataGenerator"/> for random value generation</param>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="seed"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.AllocateSeed">
            <summary>
            Spawns a new <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> from the current <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A newly generated <see cref="T:Microsoft.Test.MaDLybZ.Seed"/></returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateInt">
            <summary>
            Randomly generates an <see cref="T:System.Int32"/> between <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/> and <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Int32"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            int testValue = dataGenerator.GenerateInt();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateInt(System.Int32,System.Int32)">
            <summary>
            Randomly generates an <see cref="T:System.Int32"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Int32"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            int testValue = dataGenerator.GenerateInt(0, 100);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateUInt">
            <summary>
            Randomly generates an <see cref="T:System.UInt32"/> between <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MinValue"/> and <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.UInt32"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            uint testValue = dataGenerator.GenerateUInt();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateUInt(System.UInt32,System.UInt32)">
            <summary>
            Randomly generates an <see cref="T:System.UInt32"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.UInt32"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            uint testValue = dataGenerator.GenerateUInt(0, 100);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateShort">
            <summary>
            Randomly generates a <see cref="T:System.Int16"/> between <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MinValue"/> and <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Int16"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            short testValue = dataGenerator.GenerateShort();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateShort(System.Int16,System.Int16)">
            <summary>
            Randomly generates a <see cref="T:System.Int16"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Int16"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            short testValue = dataGenerator.GenerateShort(0, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateUShort">
            <summary>
            Randomly generates a <see cref="T:System.UInt16"/> between <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MinValue"/> and <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.UInt16"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            ushort testValue = dataGenerator.GenerateUShort();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateUShort(System.UInt16,System.UInt16)">
            <summary>
            Randomly generates a <see cref="T:System.UInt16"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.UInt16"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            ushort testValue = dataGenerator.GenerateUShort(0, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateByte">
            <summary>
            Randomly generates a <see cref="T:System.Byte"/> between <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MinValue"/> and <see cref="T:System.Byte"/>.<see cref="F:System.Byte.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Byte"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            byte testValue = dataGenerator.GenerateByte();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateByte(System.Byte,System.Byte)">
            <summary>
            Randomly generates a <see cref="T:System.Byte"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated byte greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            byte testValue = dataGenerator.GenerateByte(0, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateSByte">
            <summary>
            Randomly generates a <see cref="T:System.SByte"/> between <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MinValue"/> and <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.SByte"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            sbyte testValue = dataGenerator.GenerateSByte();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateSByte(System.SByte,System.SByte)">
            <summary>
            Randomly generates a <see cref="T:System.SByte"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated sbyte greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            sbyte testValue = dataGenerator.GenerateSByte(0, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateByteArray(System.Int32,System.Int32)">
            <summary>
            Randomly generates an <see cref="T:System.Array"/> of type <see cref="T:System.Byte"/> with a legth between the specified <paramref name="minLength"/> and <paramref name="maxLength"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="minLength">The minimum length of the array to be generated</param>
            <param name="maxLength">The maximum length of the array to be generated</param>
            <returns>A randomly generated byte[]</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="minLength"/> is greater than the specified <paramref name="maxLength"/>, or the specified <paramref name="minLength"/> is less than zero.</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            byte[] testValue = dataGenerator.GenerateByteArray(1, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateByteArray(System.Int32)">
            <summary>
            Randomly generates an <see cref="T:System.Array"/> of type <see cref="T:System.Byte"/> and of <paramref name="length"/>, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="length">The length of the array to be generated</param>
            <returns>A randomly generated byte[]</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="length"/> is less than zero</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            byte[] testValue = dataGenerator.GenerateByteArray(10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateLong">
            <summary>
            Randomly generates a <see cref="T:System.Int64"/> between <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MinValue"/> and <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Int64"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            long testValue = dataGenerator.GenerateLong();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateLong(System.Int64,System.Int64)">
            <summary>
            Randomly generates a <see cref="T:System.Int64"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Int64"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            long testValue = dataGenerator.GenerateLong(2147483648, 2147484647);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateULong">
            <summary>
            Randomly generates a <see cref="T:System.UInt64"/> between <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MinValue"/> and <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.UInt64"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            ulong testValue = dataGenerator.GenerateULong();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateULong(System.UInt64,System.UInt64)">
            <summary>
            Randomly generates a <see cref="T:System.UInt64"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.UInt64"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            ulong testValue = dataGenerator.GenerateULong(0, 2147484647);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateChar">
            <summary>
            Randomly generates a <see cref="T:System.Char"/> between <see cref="T:System.Char"/>.<see cref="F:System.Char.MinValue"/> and <see cref="T:System.Char"/>.<see cref="F:System.Char.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Char"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            char testValue = dataGenerator.GenerateChar();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateChar(System.Char,System.Char)">
            <summary>
            Randomly generates a <see cref="T:System.Char"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Char"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            char testValue = dataGenerator.GenerateLong(65, 90); // This will produce a character between 'A' and 'Z'
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateBool">
            <summary>
            Randomly generates a <see cref="T:System.Boolean"/> (true or false) based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Boolean"/> (true or false)</returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            bool testValue = dataGenerator.GenerateBool();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateSqlBool">
            <summary>
            Randomly generates a <see cref="T:System.Data.SqlTypes.SqlBoolean"/> (<see cref="F:System.Data.SqlTypes.SqlBoolean.True"/>, <see cref="F:System.Data.SqlTypes.SqlBoolean.False"/> or <see cref="F:System.Data.SqlTypes.SqlBoolean.Null"/>) based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Data.SqlTypes.SqlBoolean"/> (<see cref="F:System.Data.SqlTypes.SqlBoolean.True"/>, <see cref="F:System.Data.SqlTypes.SqlBoolean.False"/> or <see cref="F:System.Data.SqlTypes.SqlBoolean.Null"/>)</returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            SqlBoolean testValue = dataGenerator.GenerateSqlBool();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDouble">
            <summary>
            Randomly generates a <see cref="T:System.Double"/> between 0.0 and 1.0 inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Double"/> greater than or equal to 0.0 and less than or equal to 1.0</returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            double testValue = dataGenerator.GenerateDouble();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDouble(System.Double,System.Double)">
            <summary>
            Randomly generates a <see cref="T:System.Double"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Double"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum, or the specified maximum or minimum is infinity or is not a number</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            double testValue = dataGenerator.GenerateDouble(0, 1.7E+3);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateFloat">
            <summary>
            Randomly generates a <see cref="T:System.Single"/> between <see cref="T:System.Single"/>.<see cref="F:System.Single.MinValue"/> and <see cref="T:System.Single"/>.<see cref="F:System.Single.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Single"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            float testValue = dataGenerator.GenerateFloat();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateFloat(System.Single,System.Single)">
            <summary>
            Randomly generates a <see cref="T:System.Single"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Single"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum, or the specified maximum or minimum is infinity or is not a number</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            float testValue = dataGenerator.GenerateFloat(0, 4.5f);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDecimal">
            <summary>
            Randomly generates a <see cref="T:System.Decimal"/> between <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MinValue"/> and <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Decimal"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            decimal testValue = dataGenerator.GenerateDecimal();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDecimal(System.Decimal,System.Decimal)">
            <summary>
            Randomly generates a <see cref="T:System.Decimal"/> between <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MinValue"/> and <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Decimal"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            decimal testValue = dataGenerator.GenerateDecimal();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDecimal(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Randomly generates a <see cref="T:System.Decimal"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <param name="precision">The precision value to be truncatedd</param>
            <returns>A randomly generated <see cref="T:System.Decimal"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum, or the specified maximum or minimum is infinity or is not a number</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            decimal testValue = dataGenerator.GenerateDecimal(0, 10000, 5);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDateTime">
            <summary>
            Randomly generates a <see cref="T:System.DateTime"/> between <see cref="T:System.DateTime"/>.<see cref="F:System.DateTime.MinValue"/> and <see cref="T:System.DateTime"/>.<see cref="F:System.DateTime.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.DateTime"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            DateTime testValue = dataGenerator.GenerateDateTime();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDateTime(System.DateTime,System.DateTime)">
            <summary>
            Randomly generates a <see cref="T:System.DateTime"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.DateTime"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            DateTime testValue = dataGenerator.GenerateDateTime(DateTime.Parse("1/1/2000"), DateTime.Parse("1/1/2001"));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateDateTime(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Randomly generates a <see cref="T:System.DateTime"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <param name="interval">The <see cref="T:System.TimeSpan"/> which the produced date must be evenly divisible by</param>
            <returns>A randomly generated <see cref="T:System.DateTime"/> greater than or equal to the specified minimum and less than or equal to the specified maximum and
            evenly divisible by the specified <see cref="T:System.TimeSpan"/>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <exception cref="T:System.ArgumentException">The specified interval is less than 1 tick</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            DateTime testValue = dataGenerator.GenerateDateTime(DateTime.Parse("1/1/2000"), DateTime.Parse("1/1/2001"), TimeSpan.Parse("1.0.0.0"));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateTimeSpan">
            <summary>
            Randomly generates a <see cref="T:System.TimeSpan"/> between <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MinValue"/> and <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MaxValue"/> inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.TimeSpan"/></returns>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            DateTime testValue = dataGenerator.GenerateTimeSpan();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateTimeSpan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Randomly generates a <see cref="T:System.TimeSpan"/> between the specified minimum and maximum inclusively, based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.TimeSpan"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum is greater than the specified maximum</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            DateTime testValue = dataGenerator.GenerateTimeSpan(TimeSpan.FromMinutes(10), TimeSpan.FromMinutes(20));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateString(Microsoft.Test.MaDLybZ.FactorySet{System.Char},System.Int32,System.Int32)">
            <summary>
            Randomly generates a <see cref="T:System.String"/> from the specified character set based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> 
            with a length between the specified minimum and maximum inclusively
            </summary>
            <param name="characterSet">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> producing <see cref="T:System.Char"/> values from which to generate the <see cref="T:System.String"/></param>
            <param name="minLength">The minimum length of the generated <see cref="T:System.String"/></param>
            <param name="maxLength">The maximum length of the generated <see cref="T:System.String"/></param>
            <returns>A randomly generated <see cref="T:System.String"/> generated from the specified character set and between the specified minimum and maximum
            number of characters in length</returns>
            <exception cref="T:System.ArgumentNullException">The specified character set is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified minimum length is less than 0 or greater than the specified maximum length</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            string testValue = dataGenerator.GenerateString(new CharacterRange(Seed.NextSeed(), 'A', 'Z'), 1, 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.GenerateString(Microsoft.Test.MaDLybZ.FactorySet{System.Char},System.Int32)">
            <summary>
            Randomly generates a <see cref="T:System.String"/> of the specified length from the specified character set based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> 
            </summary>
            <param name="characterSet">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> producing <see cref="T:System.Char"/> values from which to generate the <see cref="T:System.String"/></param>
            <param name="length">The length of the generated <see cref="T:System.String"/></param>
            <returns>A randomly generated <see cref="T:System.String"/> generated from the specified character set and comprised of the specified number of characters</returns>
            <exception cref="T:System.ArgumentNullException">The specified character set is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified length is less than 0</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            string testValue = dataGenerator.GenerateString(new CharacterRange(Seed.NextSeed(), 'A', 'Z'), 10);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectListValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly selects an item from the specified list based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <typeparam name="T">The type of items contained in the list</typeparam>
            <param name="list">The list from which to select a value</param>
            <returns>A value selected at random from the specified list</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <exception cref="T:System.ArgumentException">The specified list is empty</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            List&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            int testValue = dataGenerator.SelectListValue&lt;int&gt;(candidates); // This will produce a value between 1 and 5
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.TrySelectListValue``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Attempts to select an item at random from the specified list based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> when the list is not empty
            </summary>
            <typeparam name="T">The type of items contained in the list</typeparam>
            <param name="list">The list from which to select a value</param>
            <param name="value">Contains the selected item if the list is not empty</param>
            <returns>True if the list was not empty, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            List&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            int testValue;
            if (dataGenerator.TrySelectListValue&lt;int&gt;(candidates, out testValue))
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectListValues``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly selects a random number of items from the specified list based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <typeparam name="T">The type of list to select from</typeparam>
            <param name="list">The list of values to select from</param>
            <returns>A list of the randomly selected items in the order of selection</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <exception cref="T:System.ArgumentException">The specified list is empty</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            IList&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            IList&lt;int&gt; testValues = dataGenerator.SelectListValue&lt;int&gt;(candidates); // This will produce a list values containing between 1 and 5 of the values in the list of candidates in random order
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectListValues``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly selects the specified number of items from the specified list based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <typeparam name="T">The type of list to select from</typeparam>
            <param name="list">The list of values to select from</param>
            <param name="selectCount">The number of items to select from the list</param>
            <returns>A list of the randomly selected items in the order of selection</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <exception cref="T:System.ArgumentException">The desired number of items is greater than the size of the specified list</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            IList&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            IList&lt;int&gt; testValues = dataGenerator.SelectListValues&lt;int&gt;(candidates, 3); // This will produce a list values containing exactly 3 of the values in the list of candidates in random order
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectValues``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly selects a random number of items from the specified enumerable object based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <typeparam name="T">The type of collection to select from</typeparam>
            <param name="values">The list of values to select from</param>
            <returns>A list of the randomly selected items in the order of selection</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <exception cref="T:System.ArgumentException">The specified list is empty</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            IList&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            IList&lt;int&gt; testValues = dataGenerator.SelectValues&lt;int&gt;(candidates); // This will produce a list values containing between 1 and 5 of the values in the list of candidates in random order
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectValues``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Randomly selects the specified number of items from the specified enumerable object based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <typeparam name="T">The type of collection to select from</typeparam>
            <param name="values">The list of values to select from</param>
            <param name="selectCount">The number of items to select from the list</param>
            <returns>A list of the randomly selected items in the order of selection</returns>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <exception cref="T:System.ArgumentException">The desired number of items is greater than the size of the specified list</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            IList&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            IList&lt;int&gt; testValues = dataGenerator.SelectValues&lt;int&gt;(candidates, 3); // This will produce a list values containing exactly 3 of the values in the list of candidates in random order
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.SelectEnumValue(System.Type)">
            <summary>
            Randomly selects a value from the specified enumeration based on the current value of <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="enumType">The type of the enumeration to select a value from</param>
            <returns>A value of the enumeration or null if the enumeration has no values</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an enumeration</exception>
            <exception cref="T:System.ArgumentNullException">The specified enumType is null</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            SqlBoolean testValue = (SqlBoolean)dataGenerator.SelectEnumValue(typeof(SqlBoolean));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.ShuffleList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly reorders the items in the specified list
            </summary>
            <typeparam name="T">The type of items contained in the specified list</typeparam>
            <param name="list">The list to shuffle</param>
            <exception cref="T:System.ArgumentNullException">The specified list is null</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            List&lt;int&gt; candidates = new List&lt;int&gt;(new int[] { 1, 2, 3, 4, 5 });
            List&lt;int&gt; testValues = dataGenerator.ShuffleList&lt;int&gt;(candidates);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly chooses from the specified choices based on their weight
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/> to choose from</typeparam>
            <param name="choices">The choices from which to choose</param>
            <returns>The randomly selected choice, or null if there were no choices of weight to be chosen</returns>
            <remarks>Null choices, or choices with a weight of zero or less will never be chosen.</remarks>
            <exception cref="T:System.ArgumentNullException">The list of choices is null</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            List&lt;WeightedChoice&lt;int&gt;&gt; choices = new List&lt;WeightedChoice&lt;int&gt;&gt;();
            choices.Add(new WeightedChoice&lt;int&gt;(1, 0.1));
            choices.Add(new WeightedChoice&lt;int&gt;(2, 0.2));
            choices.Add(new WeightedChoice&lt;int&gt;(3, 0.3));
            choices.Add(new WeightedChoice&lt;int&gt;(4, 0.15));
            choices.Add(new WeightedChoice&lt;int&gt;(5, 0.25));
            int testValue = dataGenerator.Choose&lt;int&gt;(choices); // 30% chance of selecting 3, 25% of selecting 5, etc.
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})">
            <summary>
            Randomly chooses from the specified choices based on their weight
            </summary>
            <param name="choices">The list of choices from which to choose</param>
            <returns>The randomly selected choice, or null if there were no choices of weight to be chosen</returns>
            <remarks>Null choices, or choices with a weight of zero or less will never be chosen.</remarks>
            <exception cref="T:System.ArgumentNullException">The list of choices is null</exception>
            <example>
            <code>
            DataGenerator dataGenerator = new DataGenerator(Seed.NextSeed());
            List&lt;WeightedChoice&lt;int&gt;&gt; choices = new List&lt;WeightedChoice&lt;int&gt;&gt;();
            choices.Add(new WeightedChoice&lt;int&gt;(1, 0.1));
            choices.Add(new WeightedChoice&lt;int&gt;(2, 0.2));
            choices.Add(new WeightedChoice&lt;int&gt;(3, 0.3));
            choices.Add(new WeightedChoice&lt;int&gt;(4, 0.15));
            choices.Add(new WeightedChoice&lt;int&gt;(5, 0.25));
            int testValue = dataGenerator.Choose(choices).Choice; // 30% chance of selecting 3, 25% of selecting 5, etc.
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.NextDecimal">
            <summary>
            Generates a decimal value between 0 and 1 excluding 1
            </summary>
            <returns>Generated decimal value</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.TruncateDecimalToPrecision(System.Decimal,System.Int32)">
            <summary>
            Truncates a decimal to the specified decimal position
            </summary>
            <param name="d">value to truncate</param>
            <param name="precision">desired position to truncate to</param>
            <returns>Truncated decimal value</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.ChooseFiniteRange(System.Double@,System.Double@)">
            <summary>
            Chooses a finite range falling between the specified minimum and maximum
            </summary>
            <param name="min">The inclusive minimum</param>
            <param name="max">The inclusive maximum</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.ChooseFiniteRange(System.Decimal@,System.Decimal@)">
            <summary>
            Chooses a finite range falling between the specified minimum and maximum
            </summary>
            <param name="min">The inclusive minimum</param>
            <param name="max">The inclusive maximum</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.CalculateULongDifference(System.Int64,System.Int64)">
            <summary>
            Subtracts the specified inputs and returns the abs(difference) as a ulong
            </summary>
            <param name="a">Right operand</param>
            <param name="b">Left operand</param>
            <returns>The abs(difference) of the specified inputs as a ulong</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.AddULongOffsetToLongMin(System.Int64,System.UInt64)">
            <summary>
            Adds the specified offset to the specified min.  It is assumed that adding the offset to the min will not result in an overflow.
            </summary>
            <param name="min">Value to add the offset to.</param>
            <param name="offset">Value to be added to the specified min</param>
            <returns>The sum of min and offset as a long</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataGenerator.CalcLongAbsoluteValue(System.Int64)">
            <summary>
            Calculates the absolute value of a long and returns as a ulong without overflow for long.MinValue
            </summary>
            <param name="a">Value to determin the absolute value of</param>
            <returns>The absolute value of the specified parameter as a ulong</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed">
            <summary>
            Gets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> by which data is generated
            </summary>
            <remarks>
            By definition two DataGenerators with the same seed will produce the same data in the same order.  This must be conformed to 
            when implementing data generation functions in deriving classes.
            </remarks>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataSubFactory`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/> that employs another factory to produce its value
            </summary>
            <typeparam name="T">The type of value produced by the subfactory</typeparam>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryMember`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> corresponding to an enumeration which produces a value of type
            <typeparamref name="T"/> by employing the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> decorating one of the
            enumeration's values.
            </summary>
            <typeparam name="T">The type of data produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/>.</typeparam>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryMember">
            <summary>
            An abstract <see cref="T:Microsoft.Test.MaDLybZ.ComplexFactorySet"/> corresponding to an enumeration which produces a value by
            employing the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> decorating one of the enumeration's values
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactoryMemberAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.CreateProductionEventArgs(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption},Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> which will track the current production operation.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the data to be produced.</param>
            <param name="parentEventArgs">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> tracking the parent production operation, if any.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> to track the current production operation.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveSet(System.Enum)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> assigned to the enumeration value <paramref name="optionValue"/>.
            </summary>
            <param name="optionValue">The enumeration value whose assigned <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to retrieve.</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> assigned to the enumeration value <paramref name="optionValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionValue"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.CompareProductionSortKey(Microsoft.Test.MaDLybZ.FactoryMember)">
            <summary>
            Compares the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> based on their <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey"/>s.
            </summary>
            <remarks>
            If <paramref name="other"/> is null it will sort first. If it has no <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey"/> specified it will sort last.
            </remarks>
            <param name="other">The <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> to which to compare the current one.</param>
            <returns>An <see cref="T:System.Int32"/> that indicates whether this instance precedes, follows, or appears in the same
            position in the sort order as the <paramref name="other"/> parameter. Less than zero indicates this instance
            precedes <paramref name="other"/>; zero indicates this instance has the same position in the sort order as
            <paramref name="other"/>; greater than zero indicates this instance follows <paramref name="other"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value by employing the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> decorating one of the values of the enumeration
            to which the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.AssembleData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Assigns the value produced by the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> to the corresponding property
            of the object produced by the parent <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveValidOptions">
            <summary>
            Obsolete. Please use <see cref="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveDefaultOptions"/> instead.
            Creates <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for values of the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s
            corresponding enumeration which are decorated by a <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> with a
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> of 'Valid'.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of valid <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveDefaultOptions">
            <summary>
            Creates <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for values of the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s
            corresponding enumeration which are decorated by a <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> with a
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> of 'ProducedByDefault' or 'Valid', and without a <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> of 'ExcludedByDefault' or 'Invalid'.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of valid <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.</returns>
            <remarks>
            This method is used in factory production to identify options which may be produced when no <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/> are specified by the user.
            This method replaces the obsolete <see cref="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveValidOptions"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveOptionsWithAllUses(Microsoft.Test.MaDLybZ.ProductUses)">
            <summary>
            Creates <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for values of the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s
            corresponding enumeration which are decorated by a <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> with a
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> with all of the specified uses bits set.
            </summary>
            <param name="uses"><see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/> to match on member options.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s with all the specified <see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveOptionsWithAnyUses(Microsoft.Test.MaDLybZ.ProductUses)">
            <summary>
            Creates <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for values of the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s
            corresponding enumeration which are decorated by a <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> with a
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> with any of the specified uses bits set.
            </summary>
            <param name="uses"><see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/> to match on member options.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s with all the specified <see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember.RetrieveOptionsWithoutUses(Microsoft.Test.MaDLybZ.ProductUses)">
            <summary>
            Creates <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for values of the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>'s
            corresponding enumeration which are decorated by a <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> with a
            <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.ProductUse"/> with none of the specified uses bits set.
            </summary>
            <param name="uses"><see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/> to match on member options.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s with none of the specified <see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey">
            <summary>
            Gets or sets the key used to determine the order in which the member is produced.
            </summary>
            <remarks>
            A member without a <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.ProductionSortKey"/> specified will by default be produced after those with specified keys.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMember.PropertyName">
            <summary>
            Gets or sets the name of an object's property to which the value produced by the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>
            will be assigned.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType">
            <summary>
            Gets or sets the type of the enumeration to which the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> is assigned.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMember.ProduceByDefault">
            <summary>
            Gets or sets a value indicating whether the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> should produce a value
            when no <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s of <see cref="P:Microsoft.Test.MaDLybZ.FactoryMember.OptionType"/> are supplied by the user in the call
            to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.Produce(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>. Defaults to true.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactoryMemberAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.Produce">
            <summary>
            Produces a value of type <typeparamref name="T"/> by employing the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> decorating
            one of its corresponding enumeration's values.
            </summary>
            <returns>A valid object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.Produce(System.Enum[])">
            <summary>
            Produces a value of type <typeparamref name="T"/> according to the desired <paramref name="options"/>.
            </summary>
            <param name="options">Enumeration values decorated by <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> that
            describe the desired data.</param>
            <returns>An object of type <typeparamref name="T"/> that matches the desired <paramref name="options"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMember`1.Produce(Microsoft.Test.MaDLybZ.ProductionOption[])">
            <summary>
            Produces a value of type <typeparamref name="T"/> according to the desired <paramref name="options"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the desired data.</param>
            <returns>An object of type <typeparamref name="T"/> that matches the desired <paramref name="options"/>.</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMember`1.ProductType">
            <summary>
            Gets the type of data produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DataSubFactory`1.factory">
            <summary>
            The <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> used to produce the value for this member
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactory`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactory`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.DataSubFactoryAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactory`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactory`1.CreateProductionEventArgs(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption},Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> which will track the current production operation.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s describing the data to be produced.</param>
            <param name="parentEventArgs">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> tracking the parent production operation, if any.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> to track the current production operation.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactory`1.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates the product of the current <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> by calling <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.Produce(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            and <see cref="M:Microsoft.Test.MaDLybZ.ComplexFactorySet.Assemble(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/> on the <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> which produces data
            for the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataSubFactory`1.Factory">
            <summary>
            Gets a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> which is of type <see cref="P:Microsoft.Test.MaDLybZ.DataSubFactory`1.DataFactoryType"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataSubFactory`1.DataFactoryType">
            <summary>
            Gets or sets the type of <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> which produces data for the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> that employs another factory to produce its value.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> for the production of a value by
            employing the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> decorating one of the enumeration's values
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> class which produces a value of type
            <paramref name="memberType"/> corresponding to an enumeration of type <paramref name="optionType"/>.
            </summary>
            <param name="memberType">The type of data which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute produces.</param>
            <param name="optionType">The type of the enumeration to which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute corresponds.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMemberAttribute"/> class which produces a value of type
            <paramref name="memberType"/> corresponding to an enumeration of type <paramref name="optionType"/> assigned
            to the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> of type <paramref name="genericComponentType"/>.
            </summary>
            <param name="genericComponentType">The type of <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> which the attribute describes.</param>
            <param name="memberType">The type of data which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute produces.</param>
            <param name="optionType">The type of the enumeration to which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute corresponds.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.MemberType">
            <summary>
            Gets the type of data which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute produces.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.GenericComponentType">
            <summary>
            Gets the type of <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> which the attribute describes.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.OptionType">
            <summary>
            Gets the type of the enumeration to which the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by this attribute corresponds.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.ProductionSortKey">
            <summary>
            Gets or sets the key used to determine the order in which the member is produced. A member without a ProductionSortKey specified will by default be produced after those with specified keys.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property for which the member produces data
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.ProduceByDefault">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/> described by the attribute should
            produce a value when no <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s of <see cref="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.OptionType"/> are supplied by the user in the call
            to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet.Produce(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>. Defaults to true.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.AssemblingData">
            <summary>
            Gets or sets the name of the delegate method to be attached to the <see cref="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssemblingData"/> event
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.AssembledData">
            <summary>
            Gets or sets the name of the delegate method to be attached to the <see cref="E:Microsoft.Test.MaDLybZ.ComplexFactorySet.AssembledData"/> event
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.AssembleData">
            <summary>
            Gets or sets the name of the delegate method <see cref="P:Microsoft.Test.MaDLybZ.FactoryMemberAttribute.AssembleData"/> used to assemble factory member data 
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute"/> class employing a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/>
            of type <paramref name="dataFactoryType"/> corresponding to an enumeration of type <paramref name="optionType"/>.
            </summary>
            <param name="dataFactoryType">The type of <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> which the <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> will employ to produce its value.</param>
            <param name="optionType">The type of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.<see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/> used to signal the <see cref="T:Microsoft.Test.MaDLybZ.FactoryMember"/>.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute.GetFactoryProductType(System.Type)">
            <summary>
            Gets the type of value produced by a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> of type <paramref name="factoryType"/>.
            </summary>
            <param name="factoryType">The type of <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> whose product type to retrieve.</param>
            <returns>The type of value produced by a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> of type <paramref name="factoryType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="factoryType"/> is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DataSubFactoryAttribute.DataFactoryType">
            <summary>
            Gets or sets the type of <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/> emplyed by the current <see cref="T:Microsoft.Test.MaDLybZ.DataSubFactory`1"/>
            to produce its value.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DateTimeSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type <see cref="T:System.DateTime"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.DateTime"/>. Because minimum and maximum values, increments and kinds are not supplied,
            the value produced will be between <see cref="F:System.DateTime.MinValue"/> and <see cref="F:System.DateTime.MaxValue"/>, will be as little as one "tick" (100 nanoseconds) apart,
            and will be in either local or UTC time:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            DateTime testValue = dateTimeSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Assigning a value to the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.Days"/> property will cause the value produced to fall between <see cref="P:System.DateTime.Now"/> and the
            specified number of days from <see cref="P:System.DateTime.Now"/>, a positive value resulting in a future value, a negative value resulting in
            a past value. Here, the number 7 is assigned to the property, so the produced value will be between <see cref="P:System.DateTime.Now"/> and one
            week from <see cref="P:System.DateTime.Now"/>:
            <code>
            dateTimeSet.Days = 7;
            DateTime testValue = dateTimeSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Alternatively, a range of possible values can be defined using the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MinDate"/> and <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MaxDate"/> properties. In this example,
            the minimum date is set to tonight at midnight, and the maximum date is set to one year from then, resulting in a produced value that
            falls between those dates:
            <code>
            dateTimeSet.MinDate = DateTime.Now.Date.AddDays(1);
            dateTimeSet.MaxDate = dateTimeSet.MinDate.AddYears(1);
            DateTime testValue = dateTimeSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            By assigning a <see cref="T:System.TimeSpan"/> value to the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.Increment"/> property, one can limit how close two produced values can be.
            Here, for example, the minimum date is set to tonight at midnight, and a <see cref="T:System.TimeSpan"/> of one day is assigned to the
            <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.Increment"/> property, so two produced values will be no less than one day apart:
            <code>
            dateTimeSet.MinDate = DateTime.Now.Date.AddDays(1);
            dateTimeSet.Increment = new TimeSpan(24 0, 0);
            DateTime testValue = dateTimeSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Finally, the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeKind"/> property allows for specifying whether the produced value will be in UTC or local time:
            <code>
            dateTimeSet.DateTimeKind = DateTimeKind.Local;
            DateTime testValue = dateTimeSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute"/>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeNow">
            <summary>
            The relative datetime keyword representing the current datetime in local time
            </summary>
            <value>
            [Now]
            </value>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeUtcNow">
            <summary>
            The relative datetime keyword representing the current datetime in UTC
            </summary>
            <value>
            [UtcNow]
            </value>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeToday">
            <summary>
            The relative datetime keyword representing the first hour, minute and second of today
            </summary>
            <value>
            [Today]
            </value>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.NoBracketNow">
            <summary>
            The relative datetime keyword representing the current datetime in local time
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.NoBracketUtcNow">
            <summary>
            The relative datetime keyword representing the current datetime in UTC
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.NoBracketToday">
            <summary>
            The relative datetime keyword representing the first hour, minute and second of today
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.minDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MinDate"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.maxDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MaxDate"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.DateTimeSet.valueDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.Value"/> <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> for random value generation.</param>
            <example>
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.DateTimeSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overriden to produce a DateTime value between <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/>
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.ParseDateTime(System.String)">
            <summary>
            Creates a delegate that returns a datetime by parsing a full datetime string
            </summary>
            <param name="fullString">The full datetime string</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet.CalculateDateTime"/> delegate that parses the datetime string</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.CreateTimeDependentDelegate(System.String,System.TimeSpan)">
            <summary>
            Creates a delegate that returns a relative datetime
            </summary>
            <param name="dateTimeKeyword">The keyword that defines the starting point for the relative datetime</param>
            <param name="offset">The <see cref="T:System.TimeSpan"/> that defines the value of the datetime relative to the starting point</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet.CalculateDateTime"/> delegate that returns the desired datetime</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSet.ParseTimeSpan(System.String)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> by parsing a timespan string
            </summary>
            <param name="timeSpan">A string representing the timespan to create</param>
            <returns>The <see cref="T:System.TimeSpan"/> represented by the timespan string</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.Value">
            <summary>
            Gets or sets the value of the <see cref="T:System.DateTime"/> produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> class
            </summary>
            <example>
            In this example, the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will produce a <see cref="T:System.DateTime"/> representing May 15th, 2009:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.Value = new DateTime(2009, 5, 15);
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.Days">
            <summary>
            Gets or sets the number of days from now between which will fall the <see cref="T:System.DateTime"/> produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
            </summary>
            <remarks>
            The minimum and maximum values are determined based on this value. If positive, the minimum value will be <see cref="P:System.DateTime.Now"/> and
            the maximum value will be <see cref="P:System.DateTime.Now"/> plus the specified number of days. If negative, the maximum value will be
            <see cref="P:System.DateTime.Now"/> and the minimum value will be <see cref="P:System.DateTime.Now"/> minus the specified number of days.
            </remarks>
            <example>
            In this example, the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will produce a value between now and one week from now:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.Days = 7;
            DateTime testValue = dateTimeSet.Produce();
            </code>
            Conversely, the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will produce a value between now and one week ago in this example:
            <code>
            dateTimeSet.Days = -7;
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.Increment">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> between potential candidate values which may produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will produce a value between its <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MinDate"/> and <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MaxDate"/> with potential candidates
            separated by this <see cref="T:System.TimeSpan"/> value. By default, this value is one "tick" or 100 nanoseconds, but if a <see cref="T:System.TimeSpan"/> of
            one month were assigned to this property, then two produced values would never be closer than one month apart.
            <example>
            In this example, the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MinDate"/> is set to May 15th, 2009 at midnight, and the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.MaxDate"/> is set to exactly one month from
            then. Next, the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.Increment"/> is set to 24 hours. The possible values produced, then, would include 5/15/2009 00:00, 5/16/2009 00:00,
            5/17/2009 00:00, and so forth:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.MinDate = new DateTime(2009, 5, 15);
            dateTimeSet.MaxDate = DateTime.Now.Date.AddMonths(1);
            dateTimeSet.Increment = new TimeSpan(24, 0, 0);
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.MinDate">
            <summary>
            Gets or sets the minimum value of the <see cref="T:System.DateTime"/> which is produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
            </summary>
            <example>
            In this example, the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will be now:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.MinDate = DateTime.Now;
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.MaxDate">
            <summary>
            Gets or sets the maximum value of the <see cref="T:System.DateTime"/> which is produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
            </summary>
            <example>
            In this example, the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will be tonight at midnight:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.MaxDate = DateTime.Now.Date.AddDays(1);
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeKind">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSet.DateTimeKind"/> (<see cref="F:System.DateTimeKind.Local"/> versus <see cref="F:System.DateTimeKind.Utc"/>) of the <see cref="T:System.DateTime"/> values produced from the set
            </summary>
            <remarks>
            This is set to <see cref="F:System.DateTimeKind.Unspecified"/> by default
            </remarks>
            <example>
            In this example, the value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> will be in UTC time:
            <code>
            DateTimeSet dateTimeSet = new DateTimeSet(Seed.NextSeed());
            dateTimeSet.DateTimeKind = DateTimeKind.Utc;
            DateTime testValue = dateTimeSet.Produce();
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DateTimeSet.CalculateDateTime">
            <summary>
            Delegate method which produces the <see cref="T:System.DateTime"/> value for the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
            </summary>
            <returns>The calculated date time</returns>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> for the production of values of type <see cref="T:System.DateTime"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.DateTime"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(DateTime))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// January 1st, 1980 at midnight
                /// &lt;/summary&gt;
                [DateTimeSet(Value = "1/1/1980 00:00:00")]
                NineteenEighty,
                <para/>
                /// &lt;summary&gt;
                /// Tomorrow morning at midnight
                /// &lt;/summary&gt;
                [DateTimeSet(Value = "[Today]+1")]
                TomorrowMorningMidnight,
                <para/>
                /// &lt;summary&gt;
                /// Sometime in 2000
                /// &lt;/summary&gt;
                [DateTimeSet(MinDate = "1/1/2000 00:00:00", MaxDate = "12/31/2000 23:59:59")]
                SometimeInTwoThousand,
                <para/>
                /// &lt;summary&gt;
                /// Between this morning at 00:00 and tomorrow at 00:00
                /// &lt;/summary&gt;
                [DateTimeSet(MinDate = "[Today]", MaxDate = "[Today]+1")]
                Today,
                <para/>
                /// &lt;summary&gt;
                /// Between now and one week ago
                /// &lt;/summary&gt;
                [DateTimeSet(Days = -7)]
                SometimeLastWeek,
                <para/>
                /// &lt;summary&gt;
                /// Between tomorrow and one week from then in UTC in increments of one day
                /// &lt;/summary&gt;
                [DateTimeSet(MinDate = "[Today]+1", MaxDate = "[Today]+8", IncrementTimeSpan = "1.00:00:00", DateTimeKind = DateTimeKind.Utc)]
                ZeroHundredHoursUtcBetweenTomorrowAndOneWeekFromTomorrow
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSetAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.IncrementTimeSpan">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> in <see cref="T:System.String"/> form between potential candidate values which may produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> which the attribute describes
            </summary>
            <remarks>
            The value assigned will be parsed using <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/> and should be in the format "{days}.{hours}.{minutes}.{seconds}".
            </remarks>
            <example>
            Here, produced values will be greater than or equal to tomorrow morning at midnight and will be in increments of one day:
            <code>
            /// &lt;summary&gt;
            /// Tomorrow morning at midnight or greater, in increments of one day
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "[Today]+1", IncrementTimeSpan = "1.00:00:00")]
            TomorrowMorningOrLaterOneDayApart
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.Value">
            <summary>
            Gets or sets the value in <see cref="T:System.String"/> form of the <see cref="T:System.DateTime"/> produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> which the attribute describes
            </summary>
            <remarks>
            For an absolute date, the value assigned will be parsed using <see cref="T:System.DateTime"/>.<see cref="M:System.DateTime.Parse(System.String)"/> and should be in the format
            "{month}/{day}/{year} {hour}:{minute}:{second}". For a relative date, the format is expected to be "{token}+{timespan}" where {token} specifies a relative
            date/time (<see cref="P:System.DateTime.Now"/>, <see cref="P:System.DateTime.UtcNow"/> or <see cref="P:System.DateTime.Today"/>) and {timespan} is the offset from that relative point
            in time, parsed by <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/>, in the format "{days}.{hours}.{minutes}.{seconds}".
            </remarks>
            <example>
            <code>
            /// &lt;summary&gt;
            /// January 1st, 1980 at midnight
            /// &lt;/summary&gt;
            [DateTimeSet(Value = "1/1/1980 00:00:00")]
            NineteenEighty,
            <para/>
            /// &lt;summary&gt;
            /// Tomorrow morning at mightnight
            /// &lt;/summary&gt;
            [DateTimeSet(Value = "[Today]+1.12.0.0")]
            TomorrowAtNoon
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.Days">
            <summary>
            Gets or sets the number of days from now between which will fall the <see cref="T:System.DateTime"/> produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> which the attribute describes
            </summary>
            <remarks>
            The minimum and maximum values are determined based on this value. If positive, the minimum value will be <see cref="P:System.DateTime.Now"/> and
            the maximum value will be <see cref="P:System.DateTime.Now"/> plus the specified number of days. If negative, the maximum value will be
            <see cref="P:System.DateTime.Now"/> and the minimum value will be <see cref="P:System.DateTime.Now"/> minus the specified number of days.
            </remarks>
            <example>
            In this example, the produced value will be between now and one week ago:
            <code>
            /// &lt;summary&gt;
            /// Between now and one week ago
            /// &lt;/summary&gt;
            [DateTimeSet(Days = -7)]
            SometimeLastWeek
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.MinDate">
            <summary>
            Gets or sets the minimum value in <see cref="T:System.String"/> form of the <see cref="T:System.DateTime"/> produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> which the attribute describes
            </summary>
            <remarks>
            For an absolute date, the value assigned will be parsed using <see cref="T:System.DateTime"/>.<see cref="M:System.DateTime.Parse(System.String)"/> and should be in the format
            "{month}/{day}/{year} {hour}:{minute}:{second}". For a relative date, the format is expected to be "{token}+{timespan}" where {token} specifies a relative
            date/time (<see cref="P:System.DateTime.Now"/>, <see cref="P:System.DateTime.UtcNow"/> or <see cref="P:System.DateTime.Today"/>) and {timespan} is the offset from that relative point
            in time, parsed by <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/>, in the format "{days}.{hours}.{minutes}.{seconds}".
            </remarks>
            <example>
            <code>
            /// &lt;summary&gt;
            /// Sometime in the year 2000
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "1/1/2000 00:00:00", MaxDate = "12/31/2000 23:59:59")]
            SometimeInTwoThousand,
            <para/>
            /// &lt;summary&gt;
            /// Between this morning at 00:00 and tomorrow at 00:00
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "[Today]", MaxDate = "[Today]+1")]
            Today
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.MaxDate">
            <summary>
            Gets or sets the maximum value in <see cref="T:System.String"/> form of the <see cref="T:System.DateTime"/> produced by the <see cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/> which the attribute describes
            </summary>
            <remarks>
            For an absolute date, the value assigned will be parsed using <see cref="T:System.DateTime"/>.<see cref="M:System.DateTime.Parse(System.String)"/> and should be in the format
            "{month}/{day}/{year} {hour}:{minute}:{second}". For a relative date, the format is expected to be "{token}+{timespan}" where {token} specifies a relative
            date/time (<see cref="P:System.DateTime.Now"/>, <see cref="P:System.DateTime.UtcNow"/> or <see cref="P:System.DateTime.Today"/>) and {timespan} is the offset from that relative point
            in time, parsed by <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/>, in the format "{days}.{hours}.{minutes}.{seconds}".
            </remarks>
            <example>
            <code>
            /// &lt;summary&gt;
            /// Sometime in the year 2000
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "1/1/2000 00:00:00", MaxDate = "12/31/2000 23:59:59")]
            SometimeInTwoThousand,
            <para/>
            /// &lt;summary&gt;
            /// Between this morning at 00:00 and tomorrow at 00:00
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "[Today]", MaxDate = "[Today]+1")]
            Today
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.DateTimeKind">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.MaDLybZ.DateTimeSetAttribute.DateTimeKind"/> of the date times to be produced from the set.  The value is Unspecified by default.
            </summary>
            <remarks>
            This is set to <see cref="F:System.DateTimeKind.Unspecified"/> by default
            </remarks>
            <example>
            <code>
            /// &lt;summary&gt;
            /// Between tomorrow and one week from then in UTC
            /// &lt;/summary&gt;
            [DateTimeSet(MinDate = "[Today]+1", MaxDate = "[Today]+8", DateTimeKind = DateTimeKind.Utc)]
            BetweenTomorrowAndOneWeekFromTomorrow
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DBDataSelector">
            <summary>
            Randomly selects database query data based on its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> 
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DBDataSelector"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValue``1(System.Data.Common.DbCommand)"/> to select a single value from a database:
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            int testValue;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectQueryResultValue&lt;int&gt;(cmd); // Select a single ID at random
                <para/>
                cxn.Close();
            }
            <para/>
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            In cases where more than one value is desired, the <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand)"/>,
            <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand,System.Int32)"/> and <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultValues``1(System.Data.Common.DbCommand)"/>
            methods are available, whose usage is demonstrated here:
            <code>
            IList&lt;int&gt; randomTestValues;
            IList&lt;int&gt; threeTestValues;
            IList&lt;int&gt; allTestValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                randomTestValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd); // Select a random number of ID's
                threeTestValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd, 3); // Select exactly 3 ID's at random
                allTestValues = dbDataSelector.SelectAllQueryResultValues&lt;int&gt;(cmd); // Select all ID's from the database
                <para/>
                cxn.Close();
            }
            </code>
            <br/>
            An overload exists for each of the above methods that takes a parameter of type <see cref="T:System.Data.CommandBehavior"/>, in which
            case the specified behavior will be used when interacting with the database. In this example, the database connection is
            closed automatically after selecting the values:
            <code>
            int testValue;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectQueryResultValue&lt;int&gt;(cmd, CommandBehavior.CloseConnection); // Select a single ID at random and close database connection
            }
            </code>
            Additionally, a record or records with multiple fields can be selected using the similar <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRow(System.Data.Common.DbCommand)"/>,
            <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand)"/>, <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand,System.Int32)"/> and <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultRows(System.Data.Common.DbCommand)"/>
            methods (which also allow specifying <see cref="T:System.Data.CommandBehavior"/>), as follows:
            <code>
            object[] testRow;
            IList&lt;object[]&gt; randomTestRows;
            IList&lt;object[]&gt; threeTestRows;
            IList&lt;object[]&gt; allTestRows
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRow = dbDataSelector.SelectQueryResultRow(cmd); // Select the ID and name of a random customer
                randomTestRows = dbDataSelector.SelectQueryResultRows(cmd); // Select the ID and name of a random number of customers
                threeTestRows = dbDataSelector.SelectQueryResultRows(cmd, 3); // Select the ID and name of exactly three random customers
                allTestRows = dbDataSelector.SelectAllQueryResultRows(cmd); // Select the ID and name of all customers in the database
                <para/>
                cxn.Close();
            }
            </code>
            Finally, a <see cref="T:System.Data.Common.DbDataReader"/> can be used instead of a <see cref="T:System.Data.Common.DbCommand"/> using the <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValue``1(System.Data.Common.DbDataReader)"/>,
            <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValues``1(System.Data.Common.DbDataReader)"/>, <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValues``1(System.Data.Common.DbDataReader,System.Int32)"/>,
            <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllDataReaderValues``1(System.Data.Common.DbDataReader)"/>, <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRow(System.Data.Common.DbDataReader)"/>, <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRows(System.Data.Common.DbDataReader)"/>,
            <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRows(System.Data.Common.DbDataReader,System.Int32)"/>, and <see cref="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllDataReaderRows(System.Data.Common.DbDataReader)"/> methods, as shown below:
            <code>
            int testValue;
            IList&lt;int&gt; randomTestValues;
            IList&lt;int&gt; threeTestValues;
            IList&lt;int&gt; allTestValues;
            object[] testRow;
            IList&lt;object[]&gt; randomTestRows;
            IList&lt;object[]&gt; threeTestRows;
            IList&lt;object[]&gt; allTestRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectDataReaderValue&lt;int&gt;(cmd.ExecuteReader()); // Select the ID of a random customer
                randomTestValues = dbDataSelector.SelectDataReaderValues&lt;int&gt;(cmd.ExecuteReader()); // Select the ID's of a random number of customers
                threeTestValues = dbDataSelector.SelectDataReaderValues&lt;int&gt;(cmd.ExecuteReader(), 3); // Select the ID's of exactly three random customers
                allTestValues = dbDataSelector.SelectAllDataReaderValues&lt;int&gt;(cmd.ExecuteReader()); // Select the ID's of all customers in the database
                <para/>
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                <para/>
                testRow = dbDataSelector.SelectDataReaderRow(cmd.ExecuteReader()); // Select the ID and name of a random customer
                randomTestRows = dbDataSelector.SelectDataReaderRows(cmd.ExecuteReader()); // Select the ID's and names of a random number of customers
                threeTestRows = dbDataSelector.SelectDataReaderRows(cmd.ExecuteReader(), 3); // Select the ID's and names of exactly three random customers
                allTestRows = dbDataSelector.SelectAllDataReaderRows(cmd.ExecuteReader()); // Select the ID's and names of all customers in the database
                <para/>
                cxn.Close();
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DBDataSelector"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> 
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DBDataSelector"/> for random value generation</param>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultValues``1(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and selects all values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <returns>A list of the values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectAllQueryResultValues&lt;int&gt;(cmd); // Select all ID's from the database
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultValues``1(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and selects all values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A list of the values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectAllQueryResultValues&lt;int&gt;(cmd, CommandBehavior.CloseConnection); // Select all ID's from the database and close
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultRows(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and selects all rows from results
            </summary>
            <param name="command">Query to execute</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectAllQueryResultRows(cmd); // Select the ID and name of all customers in the database
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllQueryResultRows(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and selects all rows from the results
            </summary>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectAllQueryResultRows(cmd, CommandBehavior.CloseConnection); // Select the ID and name of all customers in the database and close
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllDataReaderValues``1(System.Data.Common.DbDataReader)">
            <summary>
            Selects all the field values from the data reader
            </summary>
            <typeparam name="T">Type of data expected to be returned from the data reader</typeparam>
            <param name="dataReader">Data reader to select data from</param>
            <returns>A list of field values from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectAllDataReaderValues&lt;int&gt;(cmd.ExecuteReader()); // Select the ID's of all customers in the database via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectAllDataReaderRows(System.Data.Common.DbDataReader)">
            <summary>
            Selects all the rows from the data reader
            </summary>
            <param name="dataReader">Data reader to select data from</param>
            <returns>A list of object arrays corresponding to rows from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectAllDataReaderRows(cmd.ExecuteReader()); // Select the ID and name of all customers in the database via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValue``1(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and randomly selects a single value from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <returns>A randomly selected value from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            int testValue;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectQueryResultValue&lt;int&gt;(cmd); // Select a single ID at random
                <para/>
                cxn.Close();
            }
            <para/>
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValue``1(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and randomly selects a single value from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A randomly selected value from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            int testValue;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectQueryResultValue&lt;int&gt;(cmd, CommandBehavior.CloseConnection); // Select a single ID at random and close
            }
            <para/>
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and selects a random number of values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <returns>A list of randomly selected values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd); // Select a random number of ID's
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and selects a random number of values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A list of randomly selected values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd, CommandBehavior.CloseConnection); // Select a random number of ID's and close
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand,System.Int32)">
            <summary>
            Runs the specified command and randomly selects values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <param name="selectCount">Number of values to select from the query results</param>
            <returns>A list of randomly selected values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd, 3); // Select exactly 3 ID's at random
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultValues``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Int32)">
            <summary>
            Runs the specified command and randomly selects values from results
            </summary>
            <typeparam name="T">Type of data expected to be returned from the query</typeparam>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <param name="selectCount">Number of values to select from the query results</param>
            <returns>A list of randomly selected values from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValues = dbDataSelector.SelectQueryResultValues&lt;int&gt;(cmd, CommandBehavior.CloseConnection, 3); // Select exactly 3 ID's at random and close
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRow(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and randomly selects a row from the results
            </summary>
            <param name="command">Query to execute</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            object[] testRow;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRow = dbDataSelector.SelectQueryResultRow(cmd); // Select a random customer's ID and name
                <para/>
                cxn.Close();
            }
            <para/>
            Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
            Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRow(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and randomly selects a row from results
            </summary>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            object[] testRow;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRow = dbDataSelector.SelectQueryResultRow(cmd, CommandBehavior.CloseConnection); // Select a random customer's ID and name and close
            }
            <para/>
            Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
            Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand)">
            <summary>
            Runs the specified command and randomly selects rows from results
            </summary>
            <param name="command">Query to execute</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectQueryResultRows(cmd); // Select the ID and name of a random number of customers
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Runs the specified command and randomly selects rows from results
            </summary>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <returns>A list of object arrays which correspond to randomly selected rows from the query results</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectQueryResultRows(cmd, CommandBehavior.CloseConnection); // Select the ID and name of a random number of customers and close
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand,System.Int32)">
            <summary>
            Runs the specified command and randomly selects the specified number rows from the results
            </summary>
            <param name="command">Query to execute</param>
            <param name="selectCount">Number of rows to select from the query results</param>
            <returns>A list of randomly selected rows from the query results as object[]</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectQueryResultRows(cmd, 3); // Select the ID and name of exactly 3 customers
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectQueryResultRows(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Int32)">
            <summary>
            Runs the specified command and randomly selects the specified number rows from the results
            </summary>
            <param name="command">Query to execute</param>
            <param name="behavior">Behavior to use when executing the query</param>
            <param name="selectCount">Number of rows to select from the query results</param>
            <returns>A list of randomly selected rows from the query results as object[]</returns>
            <exception cref="T:System.ArgumentNullException">Command is null</exception>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectQueryResultRows(cmd, CommandBehavior.CloseConnection); // Select the ID and name of exactly 3 customers and close
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValue``1(System.Data.Common.DbDataReader)">
            <summary>
            Randomly selects a field value from the data reader
            </summary>
            <typeparam name="T">Type of data expected to be returned from the data reader</typeparam>
            <param name="dataReader">Data reader to select data from</param>
            <returns>A field value from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            int testValue;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectDataReaderValue&lt;int&gt;(cmd.ExecuteReader()); // Select the ID of a random customer via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValues``1(System.Data.Common.DbDataReader)">
            <summary>
            Randomly selects a random number of field values from the data reader
            </summary>
            <typeparam name="T">Type of data expected to be returned from the data reader</typeparam>
            <param name="dataReader">Data reader to select data from</param>
            <returns>A list of field values from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectDataReaderValues&lt;int&gt;(cmd.ExecuteReader()); // Select the ID's of a random number of customers via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderValues``1(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            Randomly selects the specified number of field values from the data reader
            </summary>
            <typeparam name="T">Type of data expected to be returned from the data reader</typeparam>
            <param name="dataReader">Data reader to select data from</param>
            <param name="selectCount">The number of values to select from the data reader</param>
            <returns>A list of field values from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;int&gt; testValues;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id] FROM [Customer]";
                cxn.Open();
                <para/>
                testValue = dbDataSelector.SelectDataReaderValues&lt;int&gt;(cmd.ExecuteReader(), 3); // Select the ID's of exactly customers via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (int testValue in testValues)
            {
                this.apiToTest.Method(testValue);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Randomly selects a row from the data reader
            </summary>
            <param name="dataReader">Data reader to select data from</param>
            <returns>An object array corresponding to a row from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            object[] testRow;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRow = dbDataSelector.SelectDataReaderRow(cmd.ExecuteReader()); // Select a random customer's ID and name via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
            Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRows(System.Data.Common.DbDataReader)">
            <summary>
            Randomly selects a random number rows from the data reader
            </summary>
            <param name="dataReader">Data reader to select data from</param>
            <returns>A list of object arrays corresponding to rows from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectDataReaderRows(cmd.ExecuteReader()); // Select the ID and name of a random number of customers via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.SelectDataReaderRows(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            Randomly selects the specified number rows from the data reader
            </summary>
            <param name="dataReader">Data reader to select data from</param>
            <param name="selectCount">The number of rows to select from the data reader</param>
            <returns>A list of object arrays corresponding to rows from the data reader</returns>
            <example>
            <code>
            DbDataSelector dbDataSelector = new DbDataSelector(Seed.NextSeed());
            IList&lt;object[]&gt; testRows;
            using (SqlConnection cxn = new SqlConnection("server=server;database=database;trusted_connection=yes;"))
            {
                SqlCommand cmd = cxn.CreateCommand();
                cmd.CommandText = "SELECT [Id], [Name] FROM [Customer]";
                cxn.Open();
                <para/>
                testRows = dbDataSelector.SelectDataReaderRows(cmd.ExecuteReader(), 3); // Select the ID and name of exactly 3 customers via a SqlDataReader
                <para/>
                cxn.Close();
            }
            <para/>
            foreach (object[] testRow in testRows)
            {
                Customer testCustomer = this.apiToTest.LoadCustomer(testRow[0]);
                Assert.AreEqual&lt;string&gt;(testRow[1], testCustomer.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.CreateQueryDataReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Creates a data reader by executing the specified command with the specified behavior
            </summary>
            <param name="command">The command to execute</param>
            <param name="behavior">The behavior to execute the command with</param>
            <returns>The data reader created by executing the command</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.BuildDataReaderValuesList``1(System.Data.Common.DbDataReader)">
            <summary>
            Builds a list of all the values returned by the specified data reader
            </summary>
            <typeparam name="T">Type of data expected to be returned by the data reader</typeparam>
            <param name="dataReader">Data reader to compile values from</param>
            <returns>A list of all the values returned by the data reader</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DBDataSelector.BuildDataReaderRowList(System.Data.Common.DbDataReader)">
            <summary>
            Builds a list of all rows returned by the data reader
            </summary>
            <param name="dataReader">Data reader to compiler rows from</param>
            <returns>A list of object arrays corresponding to rows returned from the data reader</returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DecimalRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Decimal"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Decimal"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MinValue"/> and <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MaxValue"/>:
            <code>
            DecimalRange decimalRange = new DecimalRange(Seed.NextSeed());
            decimal testValue = decimalRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DecimalRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> for random value generation</param>
            <example>
            <code>
            DecimalRange decimalRange = new DecimalRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DecimalRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.DecimalRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DecimalRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DecimalRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Decimal"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DecimalRange.Precision">
            <summary>
            Gets or sets the precision value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.
            </summary>        
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> for the production of values of type <see cref="T:System.Decimal"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Decimal"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(decimal))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between decimal.MinValue and decimal.MaxValue
                /// &lt;/summary&gt;
                [DecimalRange(Min = decimal.MinValue, Max = decimal.MaxValue)]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [DecimalRange(Min = 0m, Max = decimal.MaxValue)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [DecimalRange(Min = decimal.MinValue, Max = 0m)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DecimalRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DecimalRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MinValue"/>.
            </remarks>
            <example>
            <code>
            [DecimalRange(Min = 0m, Max = 1.7E+3, Precision = 4)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DecimalRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Decimal"/>.<see cref="F:System.Decimal.MinValue"/>.
            </remarks>
            <example>
            <code>
            [DecimalRange(Min = 0m, Max = 1.7E+3)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DecimalRangeAttribute.Precision">
            <summary>
            Gets or sets the precision value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DecimalRange"/> which the attribute describes
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data from that set using a delegate called through reflection.
            </summary>
            <typeparam name="T">Type of data produced by the set</typeparam>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and assigns values to <see cref="P:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.DelegateMethod"/> and <see cref="P:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.Parameters"/>, then calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce
            a value of type <see cref="T:System.Int32"/>. However, it is not the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> itself that produces the value,
            but rather the delegated specified:
            <code>
            [TestMethod]
            public void SomeTest()
            {
                DelegatedFactorySet&lt;int&gt; factorySet = new DelegatedFactorySet&lt;int&gt;(Seed.NextSeed());
                factorySet.DelegateMethod = this.GetType().GetMethod("DelegateForProduction");
                factorySet.Parameters = new object[] { true };
                this.apiToTest.Method(factorySet.Produce());
            }
            <para/>
            public int DelegateForProduction(bool someBoolean)
            {
                int testValue;
                <para/>
                // Produce random value
                <para/>
                return testValue;
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> for random value generation</param>
            <example>
            <code>
            DelegatedFactorySet&lt;int&gt; factorySet = new DelegatedFactorySet&lt;int&gt;(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute or delegateTarget is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <typeparamref name="T"/> by calling the specified method through reflection.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.DelegateMethod">
            <summary>
            Gets or sets the method which produces the data of the set.
            </summary>
            <example>
            <code>
            DelegatedFactorySet&lt;int&gt; factorySet = new DelegatedFactorySet&lt;int&gt;(Seed.NextSeed());
            factorySet.DelegateMethod = typeof(SomeClass).GetMethod("SomeMethod");
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.Parameters">
            <summary>
            Gets or sets the values of the parameters to be passed into the <see cref="P:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1.DelegateMethod"/>
            </summary>
            <example>
            <code>
            DelegatedFactorySet&lt;int&gt; factorySet = new DelegatedFactorySet&lt;int&gt;(Seed.NextSeed());
            factorySet.DelegateMethod = typeof(SomeClass).GetMethod("SomeMethod");
            factorySet.Parameters = new object[] { param1, param2 };
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> for the production of values through use of a delegate
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Some value produced by a parameter-less instance method
                /// &lt;/summary&gt;
                [DelegatedFactorySet(typeof(int), MethodName = "SomeMethod")]
                SomeValueFromParameterlessInstanceMethod,
                <para/>
                /// &lt;summary&gt;
                /// Some value produced by a parameter-less static method
                /// &lt;/summary&gt;
                [DelegatedFactorySet(typeof(int), MethodName = "SomeStaticMethod", BindingFlags = BindingFlags.Static)]
                SomeValueFromParameterlessStaticMethod,
                <para/>
                /// &lt;summary&gt;
                /// Some value produced by a method with boolean and integer parameters passing true and 0
                /// &lt;/summary&gt;
                [DelegatedFactorySet(typeof(int), MethodName = "SomeBoolIntegerMethod", ParameterTypes = new object[] { typeof(bool), typeof(int) }, Parameters = new object[] { true, 0 })]
                SomeValueFromMethodWithTrueAndZero,
                <para/>
                /// &lt;summary&gt;
                /// Some value produced by a method with boolean and integer parameters passing false and 1
                /// &lt;/summary&gt;
                [DelegatedFactorySet(typeof(int), MethodName = "SomeBoolIntegerMethod", ParameterTypes = new object[] { typeof(bool), typeof(int) }, Parameters = new object[] { false, 1 })]
                SomeValueFromMethodWithFalseAndOne
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute"/> class.
            </summary>
            <param name="productType">The type of data produced by the <see cref="T:Microsoft.Test.MaDLybZ.DelegatedFactorySet`1"/> the attribute describes.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.MethodName">
            <summary>
            Gets or sets the name of the method to be used as a delegate
            </summary>
            <remarks>
            The method specified must exist on the factory class in which this attribute is used
            </remarks>
            <example>
            <code>
            [DelegatedFactorySet(typeof(int), MethodName = "SomeMethod")]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.BindingFlags">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.BindingFlags"/> used to find the delegate method
            </summary>
            <example>
            <code>
            [DelegatedFactorySet(typeof(int), MethodName = "SomeStaticMethod", BindingFlags = BindingFlags.Static)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.Parameters">
            <summary>
            Gets or sets the values of the parameters to be passed to the delegate
            </summary>
            <example>
            <code>
            [DelegatedFactorySet(typeof(int), MethodName = "SomeMethodWithOneBooleanParameter", ParameterTypes = new object[] { typeof(bool) }, Parameters = new object[] { true })]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DelegatedFactorySetAttribute.ParameterTypes">
            <summary>
            Gets or sets the types of the parameters to be passed to the delegate 
            </summary>
            <example>
            <code>
            [DelegatedFactorySet(typeof(int), MethodName = "SomeMethodWithOneBooleanParameter", ParameterTypes = new object[] { typeof(bool) }, Parameters = new object[] { true })]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DoubleRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Double"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Double"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Double"/>.<see cref="F:System.Double.MinValue"/> and <see cref="T:System.Double"/>.<see cref="F:System.Double.MaxValue"/>:
            <code>
            DoubleRange doubleRange = new DoubleRange(Seed.NextSeed());
            double testValue = doubleRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            doubleRange.Min = 0.123;
            doubleRange.Max = 1.7E+3;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DoubleRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> for random value generation</param>
            <example>
            <code>
            DoubleRange doubleRange = new DoubleRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DoubleRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.DoubleRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DoubleRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DoubleRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Double"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> for the production of values of type <see cref="T:System.Double"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Double"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(double))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between double.MinValue and double.MaxValue
                /// &lt;/summary&gt;
                [DoubleRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [DoubleRange(Min = 0D)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [DoubleRange(Max = 0D)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.DoubleRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DoubleRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Double"/>.<see cref="F:System.Double.MinValue"/>.
            </remarks>
            <example>
            <code>
            [DoubleRange(Min = 0D, Max = 1.7E+3)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.DoubleRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Double"/>.<see cref="F:System.Double.MinValue"/>.
            </remarks>
            <example>
            <code>
            [DoubleRange(Min = 0D, Max = 1.7E+3)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryDispatch">
            <summary>
            Class for producing and assembling data
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.FactoryDispatch.attributeDictionary">
            <summary>
            A dictionary mapping an enumeration and its type to the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>
            decorating it.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.FactoryDispatch.enumDictionary">
            <summary>
            A dictionary mapping an enumeration type and its values.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryDispatch.RetrieveEnumValues(System.Type)">
            <summary>
            Retrieves the values for the specified <see cref="T:System.Enum"/> type.
            </summary>
            <param name="enumType">The type of <see cref="T:System.Enum"/> to retreive the values for.</param>
            <returns>The values corresponding to the specified enumeration type.</returns>
            <exception cref="T:System.ArgumentNullException">enumType is null</exception>
            <exception cref="T:System.ArgumentException">enumType is not an enumeration type</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryDispatch.RetrieveFactoryAttribute``1(System.Enum)">
            <summary>
            Retrieves the factory attribute corresponding to the specified enumeration value.
            </summary>
            <typeparam name="T">Type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>.</typeparam>
            <param name="option"><see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> value specifying the set, and model to be used for data production</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the specified enumeration value.</returns>
            <exception cref="T:System.ArgumentNullException">option is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryDispatch.RetrieveFactoryAttribute``1(System.Type)">
            <summary>
            Retrieves the factory attribute corresponding to the specified enumeration type.
            </summary>
            <typeparam name="T">Type of <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/></typeparam>
            <param name="optionType">Type of enumeration on which the member is defined</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the specified enumeration type.</returns>
            <exception cref="T:System.ArgumentNullException">optionType is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryDispatch.AttributeDictionary">
            <summary>
            Gets a dictionary mapping an enumeration and its type to the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>
            decorating it.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryDispatch.EnumDictionary">
            <summary>
            A dictionary mapping an enumeration type and its values.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryDispatch.AttributeDictionaryKeyComparer">
            <summary>
            Used to hash keys in the attribute dictionary.  The attribute dictionary key is a KeyValuePair(object, type)  which is a pair of the object the attribute is marking, and the type of attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryDispatch.AttributeDictionaryKeyComparer.Equals(System.Collections.Generic.KeyValuePair{System.Object,System.Type},System.Collections.Generic.KeyValuePair{System.Object,System.Type})">
            <summary>
            Overrides the standard equal compare to compair both the key and value of the attribute dictionary key.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryDispatch.AttributeDictionaryKeyComparer.GetHashCode(System.Collections.Generic.KeyValuePair{System.Object,System.Type})">
            <summary>
            Overrides the standard hash code to XOR the key's and value's hash code.  Also if the key is an enum type it XOR's this with the type of enum's hashcode to prevent enum values from colliding in the hash.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryException">
            <summary>
            An <see cref="T:System.Exception"/> thrown from handled exceptions in factory classes outside the production lifecycle.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> class with a specified error message.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with a specified error message
            and resulting from the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that led to this exception being thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the data from the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> into the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.FactoryException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryProductionException">
            <summary>
            An exception thrown during the factory production lifecycle
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with a specified error message.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with a specified error message
            and resulting from the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that led to this exception being thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor(System.Type,Microsoft.Test.MaDLybZ.ProductUses,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with a specified error message
            explaining an error occurred while attempting to produce a value of a specified type and for a specified use by
            a specified delegate method.
            </summary>
            <param name="componentType">The type of value being produced at the time of the exception.</param>
            <param name="factoryType">The intended use of the value being produced.</param>
            <param name="delegatedMethod">The name of the delegate method from which the exception was thrown</param>
            <param name="message">A message explaining the reason the exception was thrown</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor(System.Type,Microsoft.Test.MaDLybZ.ProductUses,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with a specified error message
            explaining an error occurred while attempting to produce a value of a specified type and for a specified use by
            a specified delegate method, resulting from a specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="componentType">The type of value being produced at the time of the exception.</param>
            <param name="factoryType">The intended use of the value being produced.</param>
            <param name="delegatedMethod">The name of the delegate method from which the exception was thrown</param>
            <param name="message">A message explaining the reason the exception was thrown</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that led to this exception being thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryProductionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the data from the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> into the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.FactoryProductionException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryProductionException.ComponentType">
            <summary>
            Gets or sets the type of the value being produced at the time of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryProductionException.ProductUse">
            <summary>
            Gets or sets the product use of the set producing the value at the time of the exception
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryProductionException.DelegatedMethod">
            <summary>
            Gets or sets the name of the delegate method from which the exception was thrown
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryUnion`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces values by selecting from a list of other <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s
            and calling its <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.
            </summary>
            <typeparam name="T">The type of value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s in the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.</typeparam>
            <example>
            In the following example, a test case creates two new <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>s and a <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>.
            It defines the first <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> as containing the values 10 to 19 and the second as containing the values 20 to 29, then adds
            them to the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Int32"/> between 10 and 29:
            <code>
            // Set 1 contains the values 10 to 19 
            IntegerRange set1 = new IntegerRange(Seed.NextSeed());
            set1.Min = 10;
            set1.Max = 19;
            <para/>
            // Set 2 contains the values 20 to 29
            IntegerRange set2 = new IntegerRange(Seed.NextSeed());
            set2.Min = 20;
            set2.Max = 29;
            <para/>
            // The union of the two sets contains the values 10 to 29
            FactoryUnion&lt;int&gt; union = new FactoryUnion&lt;int&gt;(Seed.NextSeed());
            union.AddSet(set1);
            union.AddSet(set2);
            this.apiToTest.Method(union.Produce());
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.FactoryUnion`1.weightedList">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> objects from which the current 
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> may choose to produce a value.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> for random value generation.</param>
            <example>
            <code>
            FactoryUnion&lt;int&gt; union = new FactoryUnion&lt;int&gt;(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FactoryUnionAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.IsEmpty">
            <summary>
            Determines if the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> contains no <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s from which to choose.
            </summary>
            <returns>True if the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> contains no <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s; otherwise false.</returns>
            <example>
            <code>
            FactoryUnion&lt;int&gt; union = new FactoryUnion&lt;int&gt;(Seed.NextSeed());
            union.AddSet(FactorySet&lt;int&gt;.Empty);
            return union.IsEmpty(); // This will return true because the union did not accept the empty set and thus contains no sets
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.AddSet(Microsoft.Test.MaDLybZ.FactorySet)">
            <summary>
            Adds the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> to the list from which one will be chosen by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>
            to produce a value when <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> is called.
            </summary>
            <remarks>
            Empty <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s will not be added.
            </remarks>
            <param name="set">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> to be added to the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.</param>
            <exception cref="T:System.NullReferenceException">The specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> is null.</exception>
            <example>
            <code>
            FactoryUnion&lt;int&gt; union = new FactoryUnion&lt;int&gt;(Seed.NextSeed());
            union.AddSet(new IntegerRange(Seed.NextSeed(), 10, 19));
            union.AddSet(new IntegerRange(Seed.NextSeed(), 20, 29));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.RemoveSet(Microsoft.Test.MaDLybZ.FactorySet)">
            <summary>
            Removes the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> from the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>s list so that it will not be
            chosen when <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> is called.
            </summary>
            <param name="set">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> to be removed from the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.</param>
            <exception cref="T:System.NullReferenceException">The specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> is null.</exception>
            <returns>True if the specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> was removed from the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/></returns>
            <example>
            <code>
            // Set 1 contains the values 10 to 19 
            IntegerRange set1 = new IntegerRange(Seed.NextSeed());
            set1.Min = 10;
            set1.Max = 19;
            <para/>
            // Set 2 contains the values 20 to 29
            IntegerRange set2 = new IntegerRange(Seed.NextSeed());
            set2.Min = 20;
            set2.Max = 29;
            <para/>
            // The union of the two sets contains the values 10 to 29
            FactoryUnion&lt;int&gt; union = new FactoryUnion&lt;int&gt;(Seed.NextSeed());
            union.AddSet(set1);
            union.AddSet(set2);
            this.apiToTest.Method(union.Produce());
            <para/>
            // Now re-test using only values 10 to 19
            union.RemoveSet(set2);
            this.apiToTest.Method(union.Produce());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnion`1.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <typeparamref name="T"/> by selecting a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            contained within the current <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryUnion`1.Sets">
            <summary>
            Gets the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> objects from which the current 
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> may choose to produce a value.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> for the production of values by a union of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> for producing specific kinds of values. The
            <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/> is used to combine two of the other <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s, which if specified
            by the user or chosen at random will result in a value contained by one of the two unioned <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Between 0 and 9
                /// &lt;/summary&gt;
                [IntegerRange(Min = 0, Max = 9)]
                ZeroToNine,
                <para/>
                /// &lt;summary&gt;
                /// Between 10 and 19
                /// &lt;/summary&gt;
                [IntegerRange(Min = 10, Max = 19)]
                TenToNineteen,
                <para/>
                /// &lt;summary&gt;
                /// Between 20 and 29
                /// &lt;/summary&gt;
                [IntegerRange(Min = 0)]
                TwentyToTwentyNine,
                <para/>
                /// &lt;summary&gt;
                /// Between 0 and 9 or between 20 and 29
                /// &lt;/summary&gt;
                [FactoryUnion(typeof(int), new object[] { SomeProperty.ZeroToNine, SomeProperty.TwentyToTwentyNine })]
                ZeroToNineOrTwentyToTwentyNine
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnionAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/> class.
            </summary>
            <param name="dataType">The type of data created by the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnion`1"/> which this attribute describes.</param>
            <param name="options">The values of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to include in the union.</param>
            <example>
            <code>
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Between 0 and 9 or between 20 and 29
                /// &lt;/summary&gt;
                [FactoryUnion(typeof(int), new object[] { SomeProperty.ZeroToNine, SomeProperty.TwentyToTwentyNine })]
                ZeroToNineOrTwentyToTwentyNine
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryUnionAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryUnionAttribute"/> class.  This constructor is not intended to work as is.  Callers of this constructor must either set <see cref="P:Microsoft.Test.MaDLybZ.FactoryUnionAttribute.Options"/> as a named parameter, or use the <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Initialize"/> delegate to set this.
            </summary>
            <param name="dataType">Type of the data.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryUnionAttribute.DataType">
            <summary>
            Gets the type of data produced by the sets in the union which this attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryUnionAttribute.Options">
            <summary>
            Gets the list of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> values passed into the attribute
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FloatRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Single"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Single"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Single"/>.<see cref="F:System.Single.MinValue"/> and <see cref="T:System.Single"/>.<see cref="F:System.Single.MaxValue"/>:
            <code>
            FloatRange floatRange = new FloatRange(Seed.NextSeed());
            float testValue = floatRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            floatRange.Min = 0.0f;
            floatRange.Max = 1.0f;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FloatRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.DoubleRange"/> for random value generation.</param>
            <example>
            <code>
            FloatRange floatRange = new FloatRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FloatRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.FloatRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FloatRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FloatRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Single"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/>for the production of values of type <see cref="T:System.Single"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Single"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(float))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between float.MinValue and float.MaxValue
                /// &lt;/summary&gt;
                [FloatRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between zero and one
                /// &lt;/summary&gt;
                [FloatRange(Min = 0.0f, Max = 1.0f)]
                BetweenZeroAndOne,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [FloatRange(Min = 0.0f)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [FloatRange(Max = 0.0f)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.FloatRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FloatRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FloatRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FloatRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Single"/>.<see cref="F:System.Single.MinValue"/>.
            </remarks>
            <example>
            <code>
            [FloatRange(Min = 0.0f, Max = 1.0f)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FloatRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FloatRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Single"/>.<see cref="F:System.Single.MinValue"/>.
            </remarks>
            <example>
            <code>
            [FloatRange(Min = 0.0f, Max = 1.0f)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ICountableSet`1">
            <summary>
            Interface to designate a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> as countable (i.e. the number of values
            it can produce can be calculated).
            </summary>
            <typeparam name="T">The type of value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ICountableSet`1.Produce">
            <summary>
            Produces a value of type <typeparamref name="T"/> from the set.
            </summary>
            <returns>The produced value.</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ICountableSet`1.Count">
            <summary>
            Gets the number of items in the set.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ICountableSet`1.AdjustedWeight">
            <summary>
            Gets the adjusted weight of the set.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.IInvertibleSet`1">
            <summary>
            Interface to designate a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> as invertable (i.e. the set's inverse can be calculated).
            </summary>
            <typeparam name="T">The type of value produced by the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IInvertibleSet`1.Invert">
            <summary>
            Creates the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>'s inverse.
            </summary>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> that is the inverse of the set.</returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.FactoryInitializationEventArgs">
            <summary>
            Provides data for events fired during factory production. Will contain <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> information when event is raised.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.FactoryInitializationEventArgs.#ctor(Microsoft.Test.MaDLybZ.FactorySet,Microsoft.Test.MaDLybZ.FactorySetAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.FactoryInitializationEventArgs"/> class for the
            specified <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.
            </summary>
            <param name="set">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> whose information is contained in the event.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> from which the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is being initialized</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryInitializationEventArgs.Set">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> whose information is contained in the event.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.FactoryInitializationEventArgs.Attribute">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> from which the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is being initialized
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.IntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Int32"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Int32"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/> and <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/>:
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            int testValue = integerRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            integerRange.Min = 0;
            integerRange.Max = 1000;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> for random value generation</param>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> and
            assigns the specified minimum and maximum to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, respectively.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> for random value generation</param>
            <param name="min">The minimum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <param name="max">The maximum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed(), 0, 1000);
            </code>
            </example>
            <exception cref="T:System.ArgumentException">min is greater max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.IntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/></returns>
            <remarks>
            The inverse of an <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> is the range of values between <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/> and
            <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/> which are not included in the original range. For example, if the range is
            defined as 1 to 100, then the inverse will be <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/> to 0 and 101 to
            <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/>.
            </remarks>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            integerRange.Min = 1;
            integerRange.Max = 100;
            integerRange.Invert().Produce(); // This will produce a value between int.MinValue and 0 or between 101 and int.MaxValue
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Int32"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.IntegerRange.Count">
            <summary>
            Gets the number of integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>.
            </summary>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            integerRange.Min = 0;
            integerRange.Max = 1000;
            int range = integerRange.Count; // This will return 1001 (1 to 1000 plus 0)
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> for the production of values of type <see cref="T:System.Int32"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between int.MinValue and int.MaxValue
                /// &lt;/summary&gt;
                [IntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 0 and 1000
                /// &lt;/summary&gt;
                [IntegerRange(Min = 0, Max = 1000)]
                BetweenZeroAndOneThousand,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [IntegerRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [IntegerRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.IntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.IntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [IntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
            
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.IntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [IntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.OptionUse">
            <summary>
            Specifies whether a user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> requested or prohibited
            by the user in the production of a value.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.OptionUse.Requested">
            <summary>
            Specifies that the user requested that the value produced conform to the supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.OptionUse.Prohibited">
            <summary>
            Specifies that the user prohibited the supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> from being considered for production.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ProductionEventArgs">
            <summary>
            Provides data for events fired during factory production.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> class having the
            specified <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.
            </summary>
            <param name="options">User-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for the current production operation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionEventArgs.AddOption(Microsoft.Test.MaDLybZ.ProductionOption)">
            <summary>
            Adds a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> to the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/>'s list of
            user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.
            </summary>
            <param name="option">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> to add.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionEventArgs.AddOptions(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.ProductionOption})">
            <summary>
            Adds the specified <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/>'s list of
            user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s to add.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionEventArgs.FindCallingEventArgs(Microsoft.Test.MaDLybZ.FactorySet)">
            <summary>
            Finds the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> corresponding to an ancestor's production operation.
            </summary>
            <param name="ancestor">The ancestor whose <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> to find.</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> corresponding to <paramref name="ancestor"/>, or
            null if the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> has no caller.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ancestor"/> is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.Product">
            <summary>
            Gets or sets the product of the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.ProductType">
            <summary>
            Gets the type of data to be produced.
            </summary>
            <value>The type of Product event args.</value>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.ProductionArgs">
            <summary>
            Gets or sets arguments to be used in the current production operation.
            </summary>
            <seealso cref="P:Microsoft.Test.MaDLybZ.FactorySet.ProductionArgs"/>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.SelectedOption">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> selected for the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.CallerEventArgs">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> from a calling production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.ProductionSet">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> that will produce the value for the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.Options">
            <summary>
            Gets user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s for the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.RequestedOptions">
            <summary>
            Gets user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s requested by the user for the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.ProhibitedOptions">
            <summary>
            Gets user-supplied <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s prohibited by the user for the current production operation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionEventArgs.Components">
            <summary>
            Gets a dictionary mapping <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> objects to their corresponding <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ProductionException">
            <summary>
            An exception thrown when errors are incurred while producing from a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> or derrived type.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionException"/> class with a specified error message.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionException"/> class with a specified error message
            and resulting from the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">A message explaining the reason the exception was thrown.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that led to this exception being thrown.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.ProductionException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ProductUses">
            <summary>
            Specifies flags that indicate the inteded use of the product of a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>
            which must be greater than zero. The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>s representing a value less than 1 are
            marked as producing invalid data, the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>s representing a value greater than 0 are
            marked as producing valid data, and the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>s representing 0 and 1 are marked as
            producing data at boundaries, all using <see cref="T:Microsoft.Test.MaDLybZ.ProductUses"/> flags:
            <code>
            [FactoryMember(typeof(int))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Less than zero
                /// &lt;/summary&gt;
                [IntegerRange(Max = -1, ProductUses.Invalid)]
                LessThanZero,
                <para/>
                /// &lt;summary&gt;
                /// Zero
                /// &lt;/summary&gt;
                [ConstantSet(typeof(int), Value = 0, ProductUses.Invalid | ProductUses.Boundary)]
                Zero,
                <para/>
                /// &lt;summary&gt;
                /// One
                /// &lt;/summary&gt;
                [ConstantSet(typeof(int), Value = 1, ProductUses.Valid | ProductUses.Boundary)]
                One,
                <para/>
                /// &lt;summary&gt;
                /// Greater than one
                /// &lt;/summary&gt;
                [IntegerRange(Min = 2, ProductUses.Valid)]
                GreaterThanOne
            }
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ProductUses.Valid">
            <summary>
            Specifies that data produced from a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is valid data.
            </summary>
            <remarks>
            All options with the Valid flag specified also have the ProducedByDefault flag specified by definition.
            </remarks>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ProductUses.Invalid">
            <summary>
            Specifies that data produced from a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is invalid data.
            </summary>
            <remarks>
            All options with the Invalid flag specified also have the ExcludedByDefault flag specified by definition.
            </remarks>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ProductUses.Boundary">
            <summary>
            Specifies that data produced from a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> is at a boundary.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> will only choose a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> having this flag specified by default if it the Valid or ProducedByDefault flags are specified as well.
            </remarks>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ProductUses.ProducedByDefault">
            <summary>
            Specifies that a ProductionOption for a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> will be considered for production if no other options of that type are specified.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> can choose a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> having this flag specified by default unless the ExcludedByDefault flag is specified as well.
            </remarks>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.ProductUses.ExcludedByDefault">
            <summary>
            Specifies that a ProductionOption for a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> will be not considered for production unless it is explicitly specified.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Test.MaDLybZ.DataFactory"/> will never choose a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> having this flag specified by default.
            </remarks>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SignedByteRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.SByte"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.SByte"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MinValue"/> and <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MaxValue"/>:
            <code>
            SignedByteRange signedByteRange = new SignedByteRange(Seed.NextSeed());
            sbyte testValue = signedByteRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            signedByteRange.Min = 1;
            signedByteRange.Max = 10;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SignedByteRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> for random value generation</param>
            <example>
            <code>
            SignedByteRange signedByteRange = new SignedByteRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SignedByteRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SignedByteRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SignedByteRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SignedByteRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.SByte"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> for the production of values of type <see cref="T:System.SByte"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.SByte"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(sbyte))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between sbyte.MinValue and sbyte.MaxValue
                /// &lt;/summary&gt;
                [SignedByteRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10
                /// &lt;/summary&gt;
                [SignedByteRange(Min = 1, Max = 10)]
                BetweenOneAndTen,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [SignedByteRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [SignedByteRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MinValue"/>.
            </remarks>
            <example>
            <code>
            [SignedByteRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SignedByteRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SignedByteRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.SByte"/>.<see cref="F:System.SByte.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [SignedByteRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.RandomTimer">
             <summary>
             A timer which asynchronously signals a specified callback at random intervals, between a specified <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval"/> and <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval"/>.
             </summary>
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Action{System.Object},System.Object,System.Int32,System.Int32)">
             <summary>
             Creates a new <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Seed"/>.  The <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will asynchronously signal the <paramref name="callback"/> method, passing it the 
             specified <paramref name="state"/>, at random intervals between <paramref name="minInterval"/> and <paramref name="maxInterval"/>.
             </summary>
             <remarks>T
             he created <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will only signal the <paramref name="callback"/> method once the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> method has been called.  Signalling can be stopped by calling 
             the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Stop"/> method.
             </remarks>
             <param name="seed">The <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Seed"/> which controls the production of the timer intervals.</param>
             <param name="callback">The method to be asynchronously signalled each time the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is fired.</param>
             <param name="state">The state object to be passed to the <paramref name="callback"/> method.</param>
             <param name="minInterval">The minimum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire in milliseconds.</param>
             <param name="maxInterval">The maximum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire in milliseconds.</param>
             <exception cref="T:System.ArgumentNullException">The specified <paramref name="callback"/> method was null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="minInterval"/> was greater than the specified <paramref name="maxInterval"/></exception>
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, 100, 1000))
                {
                    elapsed = DateTime.Now;
                     
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Action{System.Object},System.Object,System.TimeSpan,System.TimeSpan)">
             <summary>
             Creates a new <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Seed"/>.  The <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will asynchronously signal the <paramref name="callback"/> method, passing it the 
             specified <paramref name="state"/>, at random intervals between <paramref name="minInterval"/> and <paramref name="maxInterval"/>.
             </summary>
             <remarks>The created <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will only signal the <paramref name="callback"/> method once the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> method has been called.  Signalling can be stopped by calling the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Stop"/> method.</remarks>
             <param name="seed">The <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Seed"/> which controls the production of the timer intervals.</param>
             <param name="callback">The method to be asynchronously signalled each time the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is fired.</param>
             <param name="state">The state object to be passed to the <paramref name="callback"/> method.</param>
             <param name="minInterval">The minimum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire.</param>
             <param name="maxInterval">The maximum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire.</param>
             <exception cref="T:System.ArgumentNullException">The specified <paramref name="callback"/> method was null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="minInterval"/> was less than zero, or greater than the specified <paramref name="maxInterval"/></exception>
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                   
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Start">
             <summary>
             Starts the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>. Once started the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will asynchronously call back to the specified <see cref="T:System.Action`1"/> at random intervals 
             between <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval"/> and <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval"/>, until either <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Stop"/> is called, or the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Dispose"/>d.
             </summary>
             <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is already <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Running"/>.</exception>
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Stop">
             <summary>
             Stops the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> from signaling.
             </summary>
             <remarks>Signalling can be resumed for the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> by once again calling the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> method.</remarks>
             <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is already <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Running"/>.</exception>
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Change(System.Int32,System.Int32)">
             <summary>
             Changes the <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval"/> and <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval"/> of the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>.
             </summary>
             <param name="minInterval">The new minimum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire in milliseconds.</param>
             <param name="maxInterval">The new maximum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire in milliseconds.</param>
             <remarks>
             If change is called when the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is running, the timer will continue to signal.  If the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is not running 
             <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> must be called for the timer to begin signaling.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="minInterval"/> was less than zero, or greater than the specified <paramref name="maxInterval"/></exception>        
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, 100, 1000))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                    
                    timer.Change(2000, 3000);
                    count = 0;
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Change(System.TimeSpan,System.TimeSpan)">
             <summary>
             Changes the <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval"/> and <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval"/> of the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>.
             </summary>
             <param name="minInterval">The new minimum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire.</param>
             <param name="maxInterval">The new maximum time inverval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will fire.</param>
             <remarks>
             If change is called when the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is running, the timer will continue to signal.  If the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is not running 
             <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> must be called for the timer to begin signaling.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="minInterval"/> was less than zero, or greater than the specified <paramref name="maxInterval"/></exception>        
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                    
                    timer.Change(TimeSpan.FromMilliseconds(2000), TimeSpan.FromMilliseconds(3000));
                    count = 0;
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>, also disposing of the instance <see cref="T:System.Threading.Timer"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.Dispose(System.Boolean)">
            <summary>
            Disposes the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>, also disposing of the <see cref="T:System.Threading.Timer"/> of the set.
            </summary>
            <param name="disposing">Specifies whether to dispose of only native resources or fully dispose all resources</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.SignalAndReset(System.Object)">
            <summary>
            Resets the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> using <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.ResetTimer"/>, and then invokes the <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.Callback"/> method.
            </summary>
            <param name="state">State object passed in on timer creation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RandomTimer.ResetTimer">
            <summary>
            Resets the current timer to the next gerenated value between <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval"/> and <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.Seed">
             <summary>
             The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> by which the timer intervals are randomly determined.
             </summary>
             <remarks>
             Resetting the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/>s seed will result in the timer replaying the signaled intervals.
             </remarks>        
             <example>
             <code>
            static void Main(string[] args)
            {
                AutoResetEvent rEvnt = new AutoResetEvent(false);
                
                using(RandomTimer timer = new RandomTimer(new Seed(), TimerSignal, rEvnt, TimeSpan.FromMilliseconds(100), TimeSpan.FromMilliseconds(1000)))
                {
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                    
                    timer.Seed.Reset();
                    count = 0;
                    elapsed = DateTime.Now;
                    
                    timer.Start();
                    rEvnt.WaitOne();
                    timer.Stop();
                }
            }
            
            public static void TimerSignal(object state)
            {
                Console.WriteLine("Callback #{0} at {1}ms", count, (DateTime.Now - elapsed).Milliseconds);
                
                Interlocked.Increment(ref count);
                
                if (count &gt; 9)
                {
                    ((AutoResetEvent)state).Set();
                }
                
                elapsed = DateTime.Now;
            }
            
            private static DateTime elapsed;
            private static int count;
             </code>
             </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.MinInterval">
            <summary>
            The minimum interval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will signal the callback method.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.MaxInterval">
            <summary>
            The maximum interval in which the <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> will signal the callback method.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.Running">
            <summary>
            Specifies whether the current <see cref="T:Microsoft.Test.MaDLybZ.RandomTimer"/> is currently running and the specified callback can expect signals.  
            </summary>
            <remarks>
            This property is initially set to the value of false.  It is set to true when the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Start"/> method is called, and is set to false when the <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.Stop"/> method is called.
            </remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.DataGenerator">
            <summary>
            The <see cref="P:Microsoft.Test.MaDLybZ.RandomTimer.DataGenerator"/> used to generate random <see cref="T:System.TimeSpan"/>s, as timer intervals.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RandomTimer.Callback">
            <summary>
            The Callback which is signaled when the timer signals <see cref="M:Microsoft.Test.MaDLybZ.RandomTimer.SignalAndReset(System.Object)"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> whose membership is determined by a SQL query
            </summary>
            <typeparam name="T">The type of data which is produced from the set by calling <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></typeparam>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlQuerySet`1.cacheTable">
            <summary>
            <see cref="T:System.Data.DataTable"/> in which the results from the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> will be cached if <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.CacheQueryResults"/> is set to true.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlQuerySet`1.selectCommand">
            <summary>
            The query to be performed to ascertain the contents of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlQuerySet`1.cacheQueryResults">
            <summary>
            A boolean value indicating whether the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> shall cache the results of the query, or perform the query for each call to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.  The default is true.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> which controls the selection of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> and <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/>
            </summary>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> which controls the selection of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/></param>
            <param name="selectCommand">The SQL query which determins the membership of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>, <paramref name="selectQuery"/>, <paramref name="connectionString"/>
            </summary>
            <param name="seed">The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> which controls the selection of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/></param>
            <param name="selectQuery">The SQL query which determins the membership of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>. Used to build the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/></param>
            <param name="connectionString">Connection string to the database on which the <paramref name="selectQuery"/> is performed.  Used to build the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlQuerySetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.ClearCachedQueryResults">
            <summary>
            Clears all cached results from the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/>, forcing the query to be performed again on the next call to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>, also disposing of the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> of the set.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.Dispose(System.Boolean)">
            <summary>
            Disposes the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>, also disposing of the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> of the set.
            </summary>
            <param name="disposing">Specifies whether to dispose of only native resources or fully dispose all resources</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Creates data for the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>, by selecting a returned value from the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> query.
            </summary>
            <remarks>
            If <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.CacheQueryResults"/> is set to true, the data returned from the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> will be cached, and used again on subsequent calls to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.  Otherwise the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> will be performed on each call to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </remarks>
            <param name="e">Event arguments for the current production operation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySet`1.PopulateCacheTable">
            <summary>
            Fills the <see cref="F:Microsoft.Test.MaDLybZ.SqlQuerySet`1.cacheTable"/> using a <see cref="T:System.Data.SqlClient.SqlDataAdapter"/> running of the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.CacheQueryResults">
            <summary>
            A boolean value indicating whether the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> shall cache the results of the query, or perform the query for each call to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.  The default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySet`1.SelectCommand">
            <summary>
            The query to be performed to ascertain the contents of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute">
            <summary>
            Attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute"/> class describing a
            <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> which produces values of type <paramref name="productType"/>
            </summary>
            <param name="productType">The type of value which the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> described 
            by the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute"/> produces.</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.SelectQuery">
            <summary>
            The query to be performed to ascertain the contents of the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> described by the attribute.
            </summary>
            <remarks>If more than one column, or more than one table is returned by the specified query, only the first column of the first table will be considered when selecting a value during calls to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.ConnectionString">
            <summary>
            Connection string to the database on which the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.SelectQuery"/> is performed.
            </summary>
            <remarks>In the case that the connection string is not constant, the <see cref="P:Microsoft.Test.MaDLybZ.FactorySetAttribute.Initialize"/> delegate can be used to set the value at runtime.</remarks>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.CacheQueryResults">
            <summary>
            A boolean value indicating whether the <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySet`1"/> which the current <see cref="T:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute"/> discribes shall cache the results of the query, or perform the query for each call to <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>.  The default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterNames">
            <summary>
            An array of names of parameters specified in the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.SelectQuery"/>.  The length of this array must match that of <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterValues"/>, and the name at any particular index should correspond to the value of the same index of <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterValues"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterValues">
            <summary>
            An array of values for parameters specified in the <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.SelectQuery"/>.  The length of this array must match that of <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterNames"/>, and the value at any particular index should correspond to the name of the same index of <see cref="P:Microsoft.Test.MaDLybZ.SqlQuerySetAttribute.QueryParameterNames"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.TimeSpanRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.TimeSpan"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.TimeSpan"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MinValue"/> and <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MaxValue"/>:
            <code>
            TimeSpanRange timeSpanRange = new TimeSpanRange(Seed.NextSeed());
            TimeSpan testValue = timeSpanRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            timeSpanRange.Min = TimeSpan.FromMinutes(1);
            timeSpanRange.Max = TimeSpan.FromMinutes(10);
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.TimeSpanRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> for random value generation</param>
            <example>
            <code>
            TimeSpanRange timeSpanRange = new TimeSpanRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.TimeSpanRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min or attribute.Max is not formatted properly to be parsable by <see cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.TimeSpanRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.TimeSpanRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.TimeSpan"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> for the production of values of type <see cref="T:System.TimeSpan"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.TimeSpan"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(TimeSpan))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between TimeSpan.MinValue and TimeSpan.MaxValue
                /// &lt;/summary&gt;
                [TimeSpanRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10 minutes
                /// &lt;/summary&gt;
                [TimeSpanRange(Min = "00:01", Max = "00:10")]
                OneToTenMinutes,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10 hours
                /// &lt;/summary&gt;
                [TimeSpanRange(Min = "01:00", Max = "10:00")]
                OneToTenHours,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10 days
                /// &lt;/summary&gt;
                [TimeSpanRange(Min = "1", Max = "10")]
                OneToTenDays,
                <para/>
                /// &lt;summary&gt;
                /// Less than 2 days
                /// &lt;/summary&gt;
                [TimeSpanRange(Min = "0", Max = "1.23:59:59")]
                LessThanTwoDays,
               
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> which the attribute describes
            </summary>
            <remarks>
            The value specified for this property must be a string parsable by <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/>.  An invalidly formated string will result in a runtime exception when the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> is instanciated.  
            By default this is set to <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MinValue"/>.
            </remarks>
            <example>
            <code>
            [TimeSpanRange(Min = "1", Max = "1.23:59:59")]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.TimeSpanRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> which the attribute describes
            </summary>
            <remarks>
            
            The value specified for this property must be a string parsable by <see cref="T:System.TimeSpan"/>.<see cref="M:System.TimeSpan.Parse(System.String)"/>.  An invalidly formated string will result in a runtime exception when the <see cref="T:Microsoft.Test.MaDLybZ.TimeSpanRange"/> is instanciated.  
            By default this is set to <see cref="T:System.TimeSpan"/>.<see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [TimeSpanRange(Min = "1", Max = "1.23:59:59")]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.UInt32"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.UInt32"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MinValue"/> and <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MaxValue"/>:
            <code>
            IntegerRange uintRange = new UnsignedIntegerRange(Seed.NextSeed());
            uint testValue = uintRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            uintRange.Min = 0;
            uintRange.Max = 1000;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> for random value generation</param>
            <example>
            <code>
            UnsignedIntegerRange integerRange = new UnsignedIntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> and
            assigns the specified minimum and maximum to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, respectively.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> for random value generation</param>
            <param name="min">The minimum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <param name="max">The maximum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <example>
            <code>
            UnsignedIntegerRange integerRange = new UnsignedIntegerRange(Seed.NextSeed(), 0, 1000);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/>.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/></returns>
            <remarks>
            The inverse of an <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> is the range of values between <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MinValue"/> and
            <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MaxValue"/> which are not included in the original range. For example, if the range is
            defined as 1 to 100, then the inverse will be <see cref="T:System.UInt32"/>.<see cref="F:System.UInt32.MinValue"/> to 0 and 101 to
            <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/>.
            </remarks>
            <example>
            <code>
            UnsignedIntegerRange integerRange = new UnsignedIntegerRange(Seed.NextSeed());
            integerRange.Min = 1;
            integerRange.Max = 100;
            integerRange.Invert().Produce(); // This will produce a value between int.MinValue and 0 or between 101 and int.MaxValue
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Int32"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedIntegerRange.Count">
            <summary>
            Gets the number of integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/>.
            </summary>
            <example>
            <code>
            UnsignedIntegerRange integerRange = new UnsignedIntegerRange(Seed.NextSeed());
            integerRange.Min = 0;
            integerRange.Max = 1000;
            int range = integerRange.Count; // This will return 1001 (1 to 1000 plus 0)
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> for the production of values of type <see cref="T:System.Int32"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int32"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(uint))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between int.MinValue and int.MaxValue
                /// &lt;/summary&gt;
                [UnsignedIntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 0 and 1000
                /// &lt;/summary&gt;
                [UnsignedIntegerRange(Min = 0, Max = 1000)]
                BetweenZeroAndOneThousand,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [UnsignedIntegerRange(Min = 1000)]
                OneThousandOrGreater,
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.IntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedIntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedIntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.UInt64"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.UInt64"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MinValue"/> and <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MaxValue"/>:
            <code>
            UnsignedLongIntegerRange longIntegerRange = new UnsignedLongIntegerRange(Seed.NextSeed());
            long testValue = longIntegerRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            longIntegerRange.Min = int.MaxValue + 1;
            longIntegerRange.Max = int.MaxValue + 1000;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> for random value generation</param>
            <example>
            <code>
            UnsignedLongIntegerRange longIntegerRange = new UnsignedLongIntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> 
            and assigns the specified minimum and maximum to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, respectively.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> for random value generation</param>
            <param name="min">The minimum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <param name="max">The maximum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <example>
            <code>
            UnsignedLongIntegerRange longIntegerRange = new UnsignedLongIntegerRange(Seed.NextSeed(), int.MaxValue + 1, int.MaxValue + 1000);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute"/> class defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/>.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of long integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/></returns>
            <remarks>
            The inverse of a <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> is the range of values between <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MinValue"/> and
            <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MaxValue"/> which are not included in the original range. For example, if the range is
            defined as 100 to 1000, then the inverse will be <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MinValue"/> to 99 and 1001 to
            <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MaxValue"/>.
            </remarks>
            <example>
            <code>
            UnsignedLongIntegerRange longIntegerRange = new UnsignedLongIntegerRange(Seed.NextSeed());
            longIntegerRange.Min = 100;
            longIntegerRange.Max = 1000;
            longIntegerRange.Invert().Produce(); // This will produce a value between ulong.MinValue and 100 or between 1001 and ulong.MaxValue
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.UInt64"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange.Count">
            <summary>
            Gets the number of long integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/>.
            </summary>
            <example>
            <code>
            UnsignedLongIntegerRange longIntegerRange = new UnsignedLongIntegerRange(Seed.NextSeed());
            longIntegerRange.Min = int.MaxValue + 1;
            longIntegerRange.Max = int.MaxValue + 1000;
            int range = longIntegerRange.Count; // This will return 1000 (2,147,483,648 to 2,147,484,647)
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> for the production of values of type <see cref="T:System.UInt64"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.UInt64"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(ulong))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between long.MinValue and long.MaxValue
                /// &lt;/summary&gt;
                [UnsignedLongIntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between one and one thousand greater than int.MaxValue and 
                /// &lt;/summary&gt;
                [UnsignedLongIntegerRange(Min = 2147483648, Max = 2147484647)]
                BetweenOneAndOneThousandGreaterThanIntegerMaxValue,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [UnsignedLongIntegerRange(Min = 0, Max = 0)]
                Zero,
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MinValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedLongIntegerRange(Min = 2147483648, Max = 2147483748)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedLongIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.UInt64"/>.<see cref="F:System.UInt64.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedLongIntegerRange(Min = 2147483648, Max = 2147483748)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.UInt16"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.UInt16"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MinValue"/> and <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MaxValue"/>:
            <code>
            UnsignedShortIntegerRange ushortIntegerRange = new UnsignedShortIntegerRange(Seed.NextSeed());
            ushort testValue = ushortIntegerRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            ushortIntegerRange.Min = 1;
            ushortIntegerRange.Max = 10;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> for random value generation</param>
            <example>
            <code>
            UnsignedShortIntegerRange ushortIntegerRange = new UnsignedShortIntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.UInt16"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> for the production of values of type <see cref="T:System.UInt16"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.UInt16"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(ushort))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between ushort.MinValue and ushort.MaxValue
                /// &lt;/summary&gt;
                [UnsignedShortIntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10
                /// &lt;/summary&gt;
                [UnsignedShortIntegerRange(Min = 1, Max = 10)]
                BetweenOneAndTen,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [UnsignedShortIntegerRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [UnsignedShortIntegerRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MinValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedShortIntegerRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.UnsignedShortIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.UInt16"/>.<see cref="F:System.UInt16.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [UnsignedShortIntegerRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilties.CategoryDefinition">
            <summary>
            Class to define type of category to display property of the <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilties.CategoryDefinition.Properties">
            <summary>
            property string to set category
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilties.CategoryDefinition.Delegates">
            <summary>
            Delegate string to set category
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilties.CategoryDefinition.Options">
            <summary>
            Option string to set category
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilties.CategoryDefinition.CtorArgs">
            <summary>
            CtorArgs string to set category
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1">
            <summary>
            Data structure internally used to choice between a number of <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> which the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/> contains.</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Seed"/>
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Add(`0)">
            <summary>
            Adds the specified choice to the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
            <param name="choice">The choice to be added to the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Remove(`0)">
            <summary>
            Removes the specified choice from the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
            <param name="choice">The choice to be removed from the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/></param>
            <returns>True if the choice was successfully removed</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Select">
            <summary>
            Randomly chooses a choice from the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.UpdateChoiceListSubtotals">
            <summary>
            Updates the choices list's subtotal properties
            </summary>
            <returns>Returns the total weight of all the choices in the choicelist</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Seed">
            <summary>
            Seed which is used to generate random decisions for the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Count">
            <summary>
            The number of <see cref="P:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Choices"/> contained in the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.Choices">
            <summary>
            Enumerates through the choices contained in the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.ChoiceEntrySearchComparer">
            <summary>
            Comparer for comparing two ChoiceEntries
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ChoiceList`1.ChoiceEntrySearchComparer.Compare(Microsoft.Test.MaDLybZ.Utilities.ChoiceList{`0}.ChoiceEntry{`0},Microsoft.Test.MaDLybZ.Utilities.ChoiceList{`0}.ChoiceEntry{`0})">
            <summary>
            Compares the WeightSubtotal of two ChoiceEntries
            </summary>
            <param name="x">The first weighted choice</param>
            <param name="y">The second weighted choice</param>
            <returns>An indication of the relative WeightSubtotals of the ChoiceEntries</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.RegexNode.Produce">
            <summary>
            Generates a string matching the regex element or not matching if this is RECompiler.invalidNode
            </summary>
            <returns>A string which generated based on the regular expression of this node</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.RegexNode.Seed">
            <summary>
            <see cref="P:Microsoft.Test.MaDLybZ.Utilities.RegexNode.Seed"/> used for data generation.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.RegexNode.Parent">
            <summary>
            The parent node that will call Generate on this node
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.RegexStringSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.RegexStringSet.EmailPattern">
            <summary>
            Regex pattern for producing email addresses using the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.RegexStringSet.DomesticPhonePattern">
            <summary>
            Regex pattern for producing US phone numbers using the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.RegexStringSet.USDatePattern">
            <summary>
            Regex pattern for producing US formated eates <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.RegexStringSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSetAttribute"/> class defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.#ctor(Microsoft.Test.MaDLybZ.Seed,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and the specified <see cref="P:Microsoft.Test.MaDLybZ.RegexStringSet.RegularExpression"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> for random value generation.</param>
            <param name="regularExpression"><see cref="P:Microsoft.Test.MaDLybZ.RegexStringSet.RegularExpression"/> to be used by the newly created <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> for random value generation.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.IsEmpty">
            <summary>
            Returns a boolean value, indicating whether or not the Regular Expression is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overriden to produce a <see cref="T:System.String"/> from the current <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSet.CompileRegex">
            <summary>
            Compiles the current <see cref="P:Microsoft.Test.MaDLybZ.RegexStringSet.RegularExpression"/> to produce the <see cref="P:Microsoft.Test.MaDLybZ.RegexStringSet.CompiledNode"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RegexStringSet.RegularExpression">
            <summary>
            Gets or sets the regular expression which the string will match that is produced <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <example>
            <code>
            RegexStringSet regexStringSet = new RegexStringSet(Seed.NextSeed());
            regexStringSet.RegularExpression = "GB[0-9]{4}";
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RegexStringSet.CompiledNode">
            <summary>
            Compiled <see cref="T:Microsoft.Test.MaDLybZ.Utilities.RegexNode"/> which produces the strings for the current <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RegexStringSet.Compiler">
            <summary>
            <see cref="T:Microsoft.Test.MaDLybZ.Utilities.RegexCompiler"/> used to compile the <see cref="P:Microsoft.Test.MaDLybZ.RegexStringSet.RegularExpression"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.RegexStringSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> for the production of values of type <see cref="T:System.String"/> 
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.RegexStringSetAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.RegexStringSetAttribute.RegularExpression">
            <summary>
            Gets or sets the regular expression which the string will match produced by the <see cref="T:Microsoft.Test.MaDLybZ.RegexStringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [RegexStringSet(RegularExpression = "[0-9]{1,10}")]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.RegexCompiler">
             <summary>
            Transforms given regex into set of connected nodes 
             </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.RegexCompiler.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Constructor
            </summary>
            <param name="seed">The seed to provide data to the new <see cref="T:Microsoft.Test.MaDLybZ.Utilities.RegexCompiler"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="seed"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.RegexCompiler.AssertParse(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <param name="message"></param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.RegexSubExprNode">
            <summary>
            This node represents a subexpression i.e. anything in parentheses. For example (abc) is a subexpression with one node in it 
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.RegexSubExprNode.Produce">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type SqlBigIntegerRange
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>, <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/>, and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/>
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/></param>
            <param name="min"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/></param>
            <param name="max"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overides the base functionality to get integer Min and Max values and randomly generates integer type data
            </summary>
            <returns>Integer type data</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/>
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/></returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlBigIntegerRange.Count">
            <summary>
            The number of integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute.Min">
            <summary>
            The minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlBigIntegerRange"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlBigIntegerRangeAttribute.Max">
            <summary>
            The maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> which the attribute describes
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlBooleanSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type SqlBooleanSet
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBooleanSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBooleanSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <remarks>
            The values of parameters and named properties supplied in the definition of <paramref name="attribute"/>
            will be copied to the corresponding properties of the current <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/>.
            </remarks>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBooleanSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBooleanSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            A weighted represention of a set of data of type bool, which can randomly produce data
            from the set it represents based on a given <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>The bool produced by the set</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSet"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlBooleanSetAttribute"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.CalculateSqlDateTime">
            <summary>
            Used to calculate date times for the sql date time set
            </summary>
            <returns>The calculated sql date time</returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type sqldatetime
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.NoBracketNow">
            <summary>
            The relative datetime keyword representing the current datetime in local time
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.NoBracketUtcNow">
            <summary>
            The relative datetime keyword representing the current datetime in UTC
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.NoBracketToday">
            <summary>
            The relative datetime keyword representing the first hour, minute and second of today
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.DateTimeNow">
            <summary>
            The relative datetime keyword representing the current datetime in local time
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.DateTimeUtcNow">
            <summary>
            The relative datetime keyword representing the current datetime in UTC
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.DateTimeToday">
            <summary>
            The relative datetime keyword representing the first hour, minute and second of today
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.minDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.MinDate"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.maxDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.MaxDate"/>
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.SqlDateTimeSet.valueDateDelegate">
            <summary>
            Delegate used to return the <see cref="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.Value"/> <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            A weighted represention of a set of data of type DateTime, which can randomly produce data
            from the set it represents based on a given <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
            <returns>The SqlDateTime produced by the set</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.ParseDateTime(System.String)">
            <summary>
            Creates a delegate that returns a datetime by parsing a full datetime string
            </summary>
            <param name="fullString">The full datetime string</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CalculateDateTime"/> delegate that parses the datetime string</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateTimeDependentDelegate(System.String,System.TimeSpan)">
            <summary>
            Creates a delegate that returns a relative datetime
            </summary>
            <param name="dateTimeKeyword">The keyword that defines the starting point for the relative datetime</param>
            <param name="offset">The <see cref="T:System.TimeSpan"/> that defines the value of the datetime relative to the starting point</param>
            <returns>The <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CalculateDateTime"/> delegate that returns the desired datetime</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.ParseTimeSpan(System.String)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> by parsing a timespan string
            </summary>
            <param name="timeSpan">A string representing the timespan to create</param>
            <returns>The <see cref="T:System.TimeSpan"/> represented by the timespan string</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.Value">
            <summary>
            The value of the DateTime produced by <see cref="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.Days">
            <summary>
            The number of days from now between which will fall the DateTime produced by <see cref="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.Increment">
            <summary>
            The increment value of the DateTime which is produced by <see cref="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.MinDate">
            <summary>
            The minimum value of the DateTime which is produced by <see cref="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.MaxDate">
            <summary>
            The maximum value of the DateTime which is produced by <see cref="M:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.DateTimeKind">
            <summary>
            Specifies the <see cref="P:Microsoft.Test.MaDLybZ.SqlDateTimeSet.DateTimeKind"/> of the date times to be produced from the set.  The value is Unspecified by default.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet.CalculateDateTime">
            <summary>
            Delegate method which produces the <see cref="T:System.Data.SqlTypes.SqlDateTime"/> value for the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/>
            </summary>
            <returns>The calculated date time</returns>
            <seealso cref="T:Microsoft.Test.MaDLybZ.DateTimeSet"/>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.IncrementTimeSpan">
            <summary>
            Gets or sets the value of the increment of the datetime that will be produced
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.Value">
            <summary>
            The value of the DateTime produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.Days">
            <summary>
            The number of days from now between which will fall the DateTime produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.MinDate">
            <summary>
            The minimum value of the DateTime produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.MaxDate">
            <summary>
            The maximum value of the DateTime produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDateTimeSet"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.DateTimeKind">
            <summary>
            Specifies the <see cref="P:Microsoft.Test.MaDLybZ.SqlDateTimeSetAttribute.DateTimeKind"/> of the date times to be produced from the set.  The value is Unspecified by default.
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlDoubleRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type SqlDoubleRange
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDoubleRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDoubleRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDoubleRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDoubleRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Randomly produce data based on a given values
            </summary>
            <returns>Double value produced by the set</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute.Min">
            <summary>
            The minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlDoubleRangeAttribute.Max">
            <summary>
            The maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlDoubleRange"/> which the attribute describes
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type SqlIntegerRange
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>, <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/>, and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/>
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/></param>
            <param name="min"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/></param>
            <param name="max"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overides the base functionality to get integer Min and Max values and randomly generates integer type data
            </summary>
            <returns>Integer type data</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/>
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/></returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlIntegerRange.Count">
            <summary>
            The number of integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Data.SqlTypes.SqlInt32"/>.<see cref="F:System.Data.SqlTypes.SqlInt32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [SqlIntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Data.SqlTypes.SqlInt32"/>.<see cref="F:System.Data.SqlTypes.SqlInt32.MinValue"/>.
            </remarks>
            <example>
            <code>
            [SqlIntegerRange(Min = 0, Max = 1000)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type SqlSmallIntegerRange
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> with the specified <see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/>, <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/>, and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/>
            </summary>
            <param name="seed"><see cref="P:Microsoft.Test.MaDLybZ.DataGenerator.Seed"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/></param>
            <param name="min"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/></param>
            <param name="max"><see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> for the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overides the base functionality to get integer Min and Max values and randomly generates integer type data
            </summary>
            <returns>Integer type data</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/>
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/></returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange.Count">
            <summary>
            The number of integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/>
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute.#ctor">
            <summary>
            Creates an <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute.Min">
            <summary>
            The minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlSmallIntegerRange"/> which the attribute describes
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.SqlSmallIntegerRangeAttribute.Max">
            <summary>
            The maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.SqlIntegerRange"/> which the attribute describes
            </summary>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.Tracer">
            <summary>
            Utility class containing static methods to help with tracing.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.Tracer.TraceVerbose(System.String,System.String,System.Object[])">
            <summary>
            Writes the specified message to any configured <see cref="T:System.Diagnostics.TraceListener"/> instances if the 
            MaDLybZTraceSwitch <see cref="T:System.Diagnostics.TraceLevel"/> is set to 4 (Verbose).
            </summary>
            <param name="category">A category used to organize traced messages.</param>
            <param name="message">The message to be sent to <see cref="T:System.Diagnostics.TraceListener"/>s</param>
            <param name="formatArgs">Optional objects to be formatted as part of the <paramref name="message"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.Tracer.TraceInfo(System.String,System.String,System.Object[])">
            <summary>
            Writes the specified message to any configured <see cref="T:System.Diagnostics.TraceListener"/> instances if the 
            MaDLybZTraceSwitch <see cref="T:System.Diagnostics.TraceLevel"/> is set to 3 or 4 (Info or Verbose).
            </summary>
            <param name="category">A category used to organize traced messages.</param>
            <param name="message">The message to be sent to <see cref="T:System.Diagnostics.TraceListener"/>s</param>
            <param name="formatArgs">Optional objects to be formatted as part of the <paramref name="message"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.Tracer.TraceWarning(System.String,System.String,System.Object[])">
            <summary>
            Writes the specified message to any configured <see cref="T:System.Diagnostics.TraceListener"/> instances if the 
            MaDLybZTraceSwitch <see cref="T:System.Diagnostics.TraceLevel"/> is set to 2, 3, or 4 (Warning, Info, or Verbose).
            </summary>
            <param name="category">A category used to organize traced messages.</param>
            <param name="message">The message to be sent to <see cref="T:System.Diagnostics.TraceListener"/>s</param>
            <param name="formatArgs">Optional objects to be formatted as part of the <paramref name="message"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.Tracer.TraceError(System.String,System.String,System.Object[])">
            <summary>
            Writes the specified message to any configured <see cref="T:System.Diagnostics.TraceListener"/> instances if the 
            MaDLybZTraceSwitch <see cref="T:System.Diagnostics.TraceLevel"/> is set to 1, 2, 3, or 4 (Error, Warning, Info, or Verbose).
            </summary>
            <param name="category">A category used to organize traced messages.</param>
            <param name="message">The message to be sent to <see cref="T:System.Diagnostics.TraceListener"/>s</param>
            <param name="formatArgs">Optional objects to be formatted as part of the <paramref name="message"/></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.Tracer.TraceIf(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Writes the given <paramref name="message"/> to any configured <see cref="T:System.Diagnostics.TraceListener"/> instances if the
            provided <paramref name="condition"/> is true.
            </summary>
            <param name="category">A category used to organize traced messages.</param>
            <param name="condition">If value of this parameter is true, the message will be written to <see cref="T:System.Diagnostics.TraceListener"/>s
             otherwise no message will be written.</param>
            <param name="message">The message to write to <see cref="T:System.Diagnostics.TraceListener"/>s</param>
            <param name="formatArgs">Optional objects to be formatted as part of the <paramref name="message"/></param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.Tracer.Switch">
             <summary>
             <see cref="T:System.Diagnostics.TraceSwitch"/> that controls the <see cref="T:System.Diagnostics.TraceLevel"/> of the MaDLybzTraceSwitch.
             </summary>
             <example>
             The example below would enable verbose logging in an app.config file
             <code>
             &lt;configuration&gt;
                 &lt;system.diagnostics&gt;
                     &lt;switches&gt;
                         &lt;add name="MaDLybZTraceSwitch" value="4" /&gt;
                     &lt;/switches&gt;
                 &lt;/system.diagnostics&gt;
            &lt;/configuration&gt;
             </code>
             </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2">
            <summary>
            A dictionary whose values can be any derivation of a base type
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys</typeparam>
            <typeparam name="TValueBase">The base type from which the dictionary's values can be derived</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2"/> being constructed.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2.TryGetValue``1(`0,``0@)">
            <summary>
            Attempts to get the value associated with the specified key
            </summary>
            <typeparam name="T">The type of the desired value</typeparam>
            <param name="key">The key with which the value is expected to be associated</param>
            <param name="value">The value if found and able to be cast as the desired output type</param>
            <returns>True if the value was found and able to be cast as the desired output type; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2.RetrieveValue``1(`0)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <typeparam name="T">The type of the desired value</typeparam>
            <param name="key">The key with which the value is expected to be associated</param>
            <returns>The value if found and able to be cast as the desired output type</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`2.CommitValue``1(`0,``0)">
            <summary>
            Associates the specified value with the specified key instead of its previous key
            </summary>
            <typeparam name="T">The type of the value to commit</typeparam>
            <param name="key">The key with which to associated the specified value</param>
            <param name="value">The value to associated with the specified key</param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable"/>
            </summary>
            <param name="routingTableType"><see cref="T:System.Type"/> to create the signal routing table for</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.RetrieveRoutingTable(System.Type)">
            <summary>
            
            </summary>
            <param name="routingTableType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.BuildRoutingTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.MergeRoutingTable(System.Type,Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable)">
            <summary>
            
            </summary>
            <param name="signalType"></param>
            <param name="toMerge"></param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.RetrieveCachedRoutingTable(System.Type)">
            <summary>
            
            </summary>
            <param name="routingTableType"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.routingTable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.routingTableCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.routingTableType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.OptionRoutingTable.Item(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities">
            <summary>
            Class holding internally shared static utility methods
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.CreateProductionDelegate(System.String,System.Object)">
            <summary>
            Creates a delegate of type <see cref="T:System.EventHandler`1"/> which handles production events, taking <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> as input
            </summary>
            <param name="method">Name of the method used by the delegate</param>
            <param name="delegateTarget">Instance on which the method resides</param>
            <returns>Newly created <see cref="T:System.EventHandler`1"/> where T is type <see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> or <paramref name="delegateTarget"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.CreateProductionOptionList(System.Object[],Microsoft.Test.MaDLybZ.OptionUse,System.Type)">
            <summary>
            Create a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s using given values
            </summary>
            <param name="values">The <see cref="T:System.Enum"/> <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>s to include in the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> list</param>
            <param name="use"><see cref="T:Microsoft.Test.MaDLybZ.OptionUse"/> for the created <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s</param>
            <param name="bindingMemberType">The <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType"/> for the newly created <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.DerivesFromGenericBase(System.Type,System.Type)">
            <summary>
            Determines whether or not a type derives a generic base type
            </summary>
            <param name="type">The type whose derivation should be evaluated</param>
            <param name="genericBase">The type from which should be derived</param>
            <returns>True if the specified type derives from the generic base type; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.GetClosedTypeForGenericBase(System.Type,System.Type)">
            <summary>
            Gets a derived type's generic base type
            </summary>
            <param name="type">The type whose generic base type to evaluate</param>
            <param name="genericBase">The generic base type from which should be derived</param>
            <returns>The derived type's generic base type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> or <paramref name="genericBase"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.FindNestedEnums(System.Type)">
            <summary>
            Finds all the nested enum types, recursively through the inheritance chain to get inherited nested types
            </summary>
            <param name="type">Type to search for nested enum types on</param>
            <returns>A list of all nested enum types, including inherited enums</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.ThrowIfNotGenericTypeDefinition(System.Type)">
            <summary>
            Throws an exception if the specified type is not a generic type definition
            </summary>
            <param name="type">The type whose definition to verify</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.StaticUtilities.FindNestedEnums(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Finds all the nested enum types, recursively through the inheritance chain to get inherited nested types
            </summary>
            <param name="type">Type to search for nested enum types on</param>
            <param name="nestedEnums">A list of the nested enums found already</param>
            <returns>A list of all nested enum types, including inherited enums</returns>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.LongIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Int64"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Int64"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MinValue"/> and <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/>:
            <code>
            LongIntegerRange longIntegerRange = new LongIntegerRange(Seed.NextSeed());
            long testValue = longIntegerRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            longIntegerRange.Min = int.MaxValue + 1;
            longIntegerRange.Max = int.MaxValue + 1000;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> for random value generation</param>
            <example>
            <code>
            LongIntegerRange longIntegerRange = new LongIntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> 
            and assigns the specified minimum and maximum to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, respectively.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> for random value generation</param>
            <param name="min">The minimum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <param name="max">The maximum value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/></param>
            <example>
            <code>
            LongIntegerRange longIntegerRange = new LongIntegerRange(Seed.NextSeed(), int.MaxValue + 1, int.MaxValue + 1000);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute"/> class defined at <paramref name="delegateTarget"/>.
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.Invert">
            <summary>
            Returns the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> of long integers which is the inverse of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/></returns>
            <remarks>
            The inverse of a <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> is the range of values between <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MinValue"/> and
            <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/> which are not included in the original range. For example, if the range is
            defined as 1 to 100, then the inverse will be <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MinValue"/> to 0 and 101 to
            <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/>.
            </remarks>
            <example>
            <code>
            LongIntegerRange longIntegerRange = new LongIntegerRange(Seed.NextSeed());
            longIntegerRange.Min = 1;
            longIntegerRange.Max = 100;
            longIntegerRange.Invert().Produce(); // This will produce a value between long.MinValue and 0 or between 101 and long.MaxValue
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Int64"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.LongIntegerRange.Count">
            <summary>
            Gets the number of long integers contained in the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>.
            </summary>
            <example>
            <code>
            LongIntegerRange longIntegerRange = new LongIntegerRange(Seed.NextSeed());
            longIntegerRange.Min = int.MaxValue + 1;
            longIntegerRange.Max = int.MaxValue + 1000;
            int range = longIntegerRange.Count; // This will return 1000 (2,147,483,648 to 2,147,484,647)
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> for the production of values of type <see cref="T:System.Int64"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int64"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(long))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between long.MinValue and long.MaxValue
                /// &lt;/summary&gt;
                [LongIntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between one and one thousand greater than int.MaxValue and 
                /// &lt;/summary&gt;
                [LongIntegerRange(Min = 2147483648, Max = 2147484647)]
                BetweenOneAndOneThousandGreaterThanIntegerMaxValue,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [LongIntegerRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [LongIntegerRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MinValue"/>.
            </remarks>
            <example>
            <code>
            [LongIntegerRange(Min = 2147483648, Max = 2147483748)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.LongIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.LongIntegerRange"/> which the attribute describes.
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [LongIntegerRange(Min = 2147483648, Max = 2147483748)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ProductionOption">
            <summary>
            Represents an option supplied by the user of a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/> describing
            the data it must produce.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.#ctor(System.Enum,Microsoft.Test.MaDLybZ.OptionUse,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> struct.
            </summary>
            <param name="value">The enumeration value supplied by the user.</param>
            <param name="optionUse">The intended use of the product described by this <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.</param>
            <param name="bindingMemberType">The type of the member whose value should be generated according to the option's specifications.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.op_Implicit(System.Enum)~Microsoft.Test.MaDLybZ.ProductionOption">
            <summary>
            Converts an enumeration value into a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> corresponding to it.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance resulting from this operation will have the value
            of <paramref name="value"/> assigned to its <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>.
            </remarks>
            <param name="value">The enumeration value to convert.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance corresponding to the specified enumeration value.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.op_Implicit(Microsoft.Test.MaDLybZ.ProductionOption)~System.Enum">
            <summary>
            Converts a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> into the enumeration value corresponding to it.
            </summary>
            <remarks>
            The enumeration value resulting from this operation will be equal to the value of
            <paramref name="productionOption"/>'s <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>.
            </remarks>
            <param name="productionOption">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance to convert.</param>
            <returns>The <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.FromEnum(System.Enum)">
            <summary>
            Converts an enumeration value into a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> corresponding to it.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance resulting from this operation will have the value
            of <paramref name="value"/> assigned to its <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>.
            </remarks>
            <param name="value">The enumeration value to convert.</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance corresponding to the specified enumeration value.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.ToEnum(Microsoft.Test.MaDLybZ.ProductionOption)">
            <summary>
            Converts a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> into the enumeration value corresponding to it.
            </summary>
            <remarks>
            The enumeration value resulting from this operation will be equal to the value of
            <paramref name="productionOption"/>'s <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>.
            </remarks>
            <param name="productionOption">The <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> instance to convert.</param>
            <returns>The <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.ConvertEnumsToProductionOptions(System.Enum[])">
            <summary>
            Converts the specified array of enumeration values into an array of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.
            </summary>
            <param name="values">The array of enumeration values to convert.</param>
            <returns>An array of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s coresponding to the enumeration values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.op_Equality(Microsoft.Test.MaDLybZ.ProductionOption,Microsoft.Test.MaDLybZ.ProductionOption)">
            <summary>
            Returns true if two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal.
            </summary>
            <remarks>
            Two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal if their values for
            <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>, <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.OptionUse"/> and <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType"/> are equal.
            </remarks>
            <param name="optionA">Left side operand</param>
            <param name="optionB">Right side operand</param>
            <returns>True if the two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.op_Inequality(Microsoft.Test.MaDLybZ.ProductionOption,Microsoft.Test.MaDLybZ.ProductionOption)">
            <summary>
            Returns false if two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal.
            </summary>
            <remarks>
            Two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal if their values for
            <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>, <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.OptionUse"/> and <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType"/> are equal.
            </remarks>
            <param name="optionA">Left side operand</param>
            <param name="optionB">Right side operand</param>
            <returns>False if the two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal; true otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> is equal to the specified object.
            </summary>
            <remarks>
            Two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal if their values for
            <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>, <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.OptionUse"/> and <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType"/> are equal.
            </remarks>
            <param name="obj">An object to compare with the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.</param>
            <returns>True if the two instances of <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> are considered equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ProductionOption.GetHashCode">
            <summary>
            Overriden to return the XOR of <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/>, <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.OptionUse"/>, and <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType"/>
            </summary>
            <returns>The hash code for the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/></returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionOption.BindingMemberType">
            <summary>
            Gets or sets the type of the member whose value should be generated according to the option's specifications.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionOption.OptionUse">
            <summary>
            Gets or sets the intended use of the product described by the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionOption.Value">
            <summary>
            Gets or sets the enumeration value supplied by the user.
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ProductionOption.Weight">
            <summary>
            Gets the current <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>'s "weight" or likelihood of being chosen from
            among several <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/>s.
            </summary>
            <remarks>
            The weight of a <see cref="T:Microsoft.Test.MaDLybZ.ProductionOption"/> is the same as the <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/> 
            which it represents. In the case that its <see cref="P:Microsoft.Test.MaDLybZ.ProductionOption.Value"/> is not decorated with a
            <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> the weight is 0.
            </remarks>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2">
            <summary>
            A dictionary whose keys and values can be reversed
            </summary>
            <typeparam name="TKey">The type of the dictionary keys</typeparam>
            <typeparam name="TValue">The type of the dictionary values</typeparam>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.frontFacingDictionary">
            <summary>
            The front-facing dictionary
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.rearFacingDictionary">
            <summary>
            The rear-facing dictionary
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2"/> class using the
            specified front-facing and rear-facing dictionaries
            </summary>
            <param name="frontFacingDictionary">The front-facing dictionary</param>
            <param name="rearFacingDictionary">The rear-facing dictionary</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether or not the specified key is contained within the dictionary
            </summary>
            <param name="key">The key to check for in the dictionary</param>
            <returns>True if the key is contained; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether or not the specified value is contained within the dictionary
            </summary>
            <param name="value">The value to check for in the dictionary</param>
            <returns>True if the value is contained; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the specified key/value pair is contained within the dictionary
            </summary>
            <param name="item">The key/value pair to check for in the dictionary</param>
            <returns>True if the key and value are contained and associated with one another; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get a value for the specified key
            </summary>
            <param name="key">The key whose value to retrieve</param>
            <param name="value">The value retrieved if the key is present in the dictionary</param>
            <returns>True if the key exists and a value was retrieved; false otherwise</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.RetrieveValue(`0)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key">The key whose value to retrieve</param>
            <returns>The value associated with the specified key</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary
            </summary>
            <param name="key">The key to add to the dictionary</param>
            <param name="value">The value ot associated with the key</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key/value pair to the dictionary
            </summary>
            <param name="item">The key/value pair to add</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key and associated value from the dictionary
            </summary>
            <param name="key">The key to remove from the dictionary</param>
            <returns>True if the key was present and removed; false if it wasn't present</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified key/value pair's key and associated value from the dictionary
            </summary>
            <param name="item">The key/value pair whose key and associated value to remove from the dictionary</param>
            <returns>True if the key was present and removed; false if it wasn't present</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Clear">
            <summary>
            Clears the dictionary of all entries
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.IndexWithValue(`1)">
            <summary>
            Gets the key associated with the specified value
            </summary>
            <param name="value">The value whose key to retrieve</param>
            <returns>The key with which the specified value is associated</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.TryGetKeyWithValue(`1,`0@)">
            <summary>
            Attempts to get the key with which the specified value is associated
            </summary>
            <param name="value">The value whose key to retrieve</param>
            <param name="key">The key with which the value is associated</param>
            <returns>True if the value is present; false otherwise</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.RetrieveKeyWithValue(`1)">
            <summary>
            Gets the key associated with the specified value
            </summary>
            <param name="value">The value whose key to retrieve</param>
            <returns>The key with which the specified value is associated, or null if the value is not present</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.CommitKeyWithValue(`1,`0)">
            <summary>
            Associates the specified value with the specified key instead of its previous key
            </summary>
            <param name="value">The value to associate with the specified key</param>
            <param name="key">The key to associate with the specified value</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> or <paramref name="key"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.RemoveWithValue(`1)">
            <summary>
            Removes the specified value and associated key from the dictionary
            </summary>
            <param name="value">The value to remove from the dictionary</param>
            <returns>True if the value was present and has been removed; false if the value was not present</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Reverse">
            <summary>
            Reverses the dictionary by making its keys its values and its values its keys
            </summary>
            <returns>The reversed dictionary</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the dictionary's contents to the specified array
            </summary>
            <param name="array">The array to which to copy the dictionary's contents</param>
            <param name="arrayIndex">The index in the array at which to copy the dictionary's contents</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the dictionary
            </summary>
            <returns>Enumerator for iterating through the dictionary</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the dictionary
            </summary>
            <returns>Enumerator for iterating through the dictionary</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Count">
            <summary>
            Gets the number of entries in the dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether or not the dictionary is read-only
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Keys">
            <summary>
            Gets the keys contained in the dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Values">
            <summary>
            Gets the values contained in the dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.FrontFacingDictionary">
            <summary>
            Gets the front-facing dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.RearFacingDictionary">
            <summary>
            Gets the rear-facing dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Utilities.ReversibleDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key
            </summary>
            <param name="key">The key whose associated value is desired</param>
            <returns>The desired value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Seed">
            <summary>
            Class which provides minimal functionality for data production and reproducibility
            </summary>
            <example>
            <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>s and <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s require a <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> to facilitate
            random data generation and reproducibility. From test code, <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.<see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/> can
            be used as shown below to seed them using the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>:
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            StringSet stringSet = new IntegerRange(Seed.NextSeed());
            SomeTypeFactory someTypeFactory = new SomeTypeFactory(Seed.NextSeed());
            </code>
            <br/>
            A <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>'s <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> can be reset to its original value using
            <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset"/>, or to a specific value using <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset(System.Int32)"/>, which is useful for
            reproducing data generated previously. In this example, a test framework exposes a seed that is
            generated at random unless the user specifies one in the test framework UI, and the test
            resets the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/> to this value so that if the user supplies a seed
            the same data will be generated as in a previous, failed test run:
            <code>
            [TestMethod]
            private void SomeTest()
            {
                Seed.GlobalSeed.Reset(this.CurrentVariation.Seed());
                IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
                this.apiToTest.Method(integerRange.Produce());
            }
            </code>
            <br/>
            Internally within a <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>, if child factories are required, the parent factory's
            <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> should be used to spawn a seed, rather than using the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>, as follows:
            <code>
            public SomeTypeFactory(Seed seed)
                : base(seed)
            {
                this.someOtherTypeFactory = new SomeOtherTypeFactory(seed.Spawn());
            }
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Seed.globalSeed">
            <summary>
            The global instance of seed used to spawn a seed when none is provided
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Seed.value">
            <summary>
            The seed's current value
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Seed.seedValueGenerator">
            <summary>
            Random number generator for generating random seed values
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Seed.rand">
            <summary>
            Random number generator for generating values based on the current seed
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.Seed.offspring">
            <summary>
            List of all seeds created as offspring of this seed
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> class with a random value generated from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>, but not <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>.
            </summary>
            <remarks>This mechanism for creating <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s without a specified value should be used in lieu of <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/> for <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>s which need not reproduce or who's <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> will be handled by the caller, as the seeds may be garbage collected when they move out of scope.</remarks>
            <example>
            <code>
            Seed seed = new Seed();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> class with the specified value
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> for random value generation</param>
            <example>
            <code>
            Seed seed = new Seed(new Random().Next(int.MinValue, int.MaxValue));
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.NextSeed">
            <summary>
            <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>s a new <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>
            </summary>
            <returns>The newly created <see cref="T:Microsoft.Test.MaDLybZ.Seed"/></returns>
            <remarks>
            <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/> will not be eligable for garbage collection until <see cref="M:Microsoft.Test.MaDLybZ.Seed.Release"/> is called.
            </remarks>
            <example>
            <code>
            //Spawn a new seed from from the GlobalSeed
            Seed seed = Seed.NextSeed();
            
            IntegerRange integerRange = new IntegerRange(seed);
            
            int i = integerRange.Produce();
            
            //Release the Seed so that it can be garbage collected
            seed.Release();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Next">
            <summary>
            Generates a random <see cref="T:System.Int32"/> between <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/> inclusively, based on the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Int32"/></returns>
            <example>
            <code>
            int testValue = Seed.GlobalSeed.Next();
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random <see cref="T:System.Int32"/> between the specified minimum and maximum inclusively, based on the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="min">The minimum value to be generated</param>
            <param name="max">The maximum value to be generated</param>
            <returns>A randomly generated <see cref="T:System.Int32"/> greater than or equal to the specified minimum and less than or equal to the specified maximum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified min is greater than the specified max</exception>
            <example>
            <code>
            int testValue = Seed.GlobalSeed.Next(0, 100);
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.NextDouble">
            <summary>
            Generates a random <see cref="T:System.Double"/> between 0.0 and 1.0 inclusively, based on the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <returns>A randomly generated <see cref="T:System.Double"/> greater than or equal to 0.0 and less than or equal to 1.0</returns>
            <example>
            <code>
            double testValue = Seed.GlobalSeed.NextDouble();
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Reset(System.Int32)">
            <summary>
            Resets the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seedValue">New value for the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/></param>
            <example>
            <code>
            Seed.GlobalSeed.Reset(this.CurrentVariation.Seed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Reset">
            <summary>
            Resets the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> to its orignal value, causing it to produce previously created data
            </summary>
            <example>
            <code>
            Seed.GlobalSeed.Reset();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Spawn">
            <summary>
            Creates a new <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> based on the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <remarks>
            The <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> of the newly created <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> will be updated if the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> changes.  
            It should be noted that once <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed a <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> will remain in memory, as long as it or its <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/> continues to be referenced, or the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> is <see cref="M:Microsoft.Test.MaDLybZ.Seed.Release"/>d.
            </remarks>
            <returns>The newly created <see cref="T:Microsoft.Test.MaDLybZ.Seed"/></returns>
            <example>
            <code>
            //Spawn a Seed from the GlobalSeed
            Seed seed = Seed.GlobalSeed.Spawn();
            
            IntegerRange integerRange = new IntegerRange(seed);
            
            int i = integerRange.Produce();
            
            //Release the seed so that it can be garbage collected
            seed.Release();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.Release">
            <summary>
            Divorces a <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> from its <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/>.
            </summary>
            <remarks>
            A <see cref="M:Microsoft.Test.MaDLybZ.Seed.Release"/>d <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> will no longer be <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset"/> when its <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/> is <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset"/>.  
            Also, the <see cref="M:Microsoft.Test.MaDLybZ.Seed.Release"/>d <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> may become eligable for garbage collection, while its former <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/> is still being referenced.  
            This is especially important in the context of <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>.
            </remarks>
            <example>
            <code>
            //Spawn a new seed from the GlobalSeed
            Seed seed = Seed.NextSeed();
            
            DataGenerator g = new DataGenerator(seed);
            
            int i = g.GenerateInt();
            
            //release the seed so that it may be garbaged collected
            seed.Release();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Seed.NextSeedValue">
            <summary>
            Produces the next seed value to be used when calling the <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/> method
            </summary>
            <returns>The value of the next spawned seed</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed">
            <summary>
            Gets the global instance of <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used to spawn a child <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> when none is provided
            </summary>
            <remarks>
            The <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/> itself should not be supplied as the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> for <see cref="T:Microsoft.Test.MaDLybZ.DataFactory`1"/>s
            and <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>s, and should instead be used to <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/> child <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s.
            Please note that a <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/> will remain in memory until it is <see cref="M:Microsoft.Test.MaDLybZ.Seed.Release"/>d, since the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/> is static.
            if this is unintended please use the default constructor for the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> class, as this will create a seed from the <see cref="P:Microsoft.Test.MaDLybZ.Seed.GlobalSeed"/>, without using <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>
            </remarks>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.GlobalSeed.Spawn());
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Seed.Value">
            <summary>
            Gets the <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>'s current value
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>'s value serves as the seed for a random value generator which produces data for the
            <see cref="M:Microsoft.Test.MaDLybZ.Seed.Next"/>, <see cref="M:Microsoft.Test.MaDLybZ.Seed.Next(System.Int32,System.Int32)"/> and <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextDouble"/> methods, as well as
            for offspring <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>s created by the <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/> and <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/> methods
            </remarks>
            <example>
            <code>
            IntegerRange integerRange = new IntegerRange(Seed.NextSeed());
            Console.WriteLine("API tested using a value produced with the following seed: {0}", Seed.GlobalSeed.Value);
            this.apiToTest.Method(integerRange.Produce());
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.Seed.Parent">
            <summary>
            The <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> from which the current <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> was <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed.
            </summary>
            <remarks>
            <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset"/>ing the <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/> seed's <see cref="P:Microsoft.Test.MaDLybZ.Seed.Value"/> will result in all <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed seeds being <see cref="M:Microsoft.Test.MaDLybZ.Seed.Reset"/> accordingly.  
            Also, it should be noted that once <see cref="M:Microsoft.Test.MaDLybZ.Seed.Spawn"/>ed a <see cref="T:Microsoft.Test.MaDLybZ.Seed"/> will remain in memory, as long as it or its <see cref="P:Microsoft.Test.MaDLybZ.Seed.Parent"/> continues to be referenced.
            </remarks>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ShortIntegerRange">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactoryRange`1"/> which produces data of type <see cref="T:System.Int16"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.Int16"/>, and because no minimum or maximum
            is supplied, the value produced will fall between <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MinValue"/> and <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MaxValue"/>:
            <code>
            ShortIntegerRange shortIntegerRange = new ShortIntegerRange(Seed.NextSeed());
            short testValue = shortIntegerRange.Produce();
            this.apiToTest.Method(testValue);
            </code>
            To constrain the values which the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> can produce, minimum and/or maximum values can be
            assigned to the <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and/or <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> properties, as shown
            in this example:
            <code>
            shortIntegerRange.Min = 1;
            shortIntegerRange.Max = 10;
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ShortIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> for random value generation</param>
            <example>
            <code>
            ShortIntegerRange shortIntegerRange = new ShortIntegerRange(Seed.NextSeed());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ShortIntegerRange.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
            <exception cref="T:System.ArgumentException">attribute.Min is greater than attribute.Max</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ShortIntegerRange.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ShortIntegerRange.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Produces a value of type <see cref="T:System.Int16"/> between the current <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/>'s
            <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Min"/> and <see cref="P:Microsoft.Test.MaDLybZ.FactoryRange`1.Max"/> based on the current value of its <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>.
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production operation.</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> for the production of values of type <see cref="T:System.Int16"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.Int16"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(short))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// Any value between short.MinValue and short.MaxValue
                /// &lt;/summary&gt;
                [ShortIntegerRange()]
                Any,
                <para/>
                /// &lt;summary&gt;
                /// Between 1 and 10
                /// &lt;/summary&gt;
                [ShortIntegerRange(Min = 1, Max = 10)]
                BetweenOneAndTen,
                <para/>
                /// &lt;summary&gt;
                /// Zero or greater
                /// &lt;/summary&gt;
                [ShortIntegerRange(Min = 0)]
                ZeroOrGreater,
                <para/>
                /// &lt;summary&gt;
                /// Zero or less
                /// &lt;/summary&gt;
                [ShortIntegerRange(Max = 0)]
                ZeroOrLess
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute.Min">
            <summary>
            Gets or sets the minimum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MinValue"/>.
            </remarks>
            <example>
            <code>
            [ShortIntegerRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.ShortIntegerRangeAttribute.Max">
            <summary>
            Gets or sets the maximum value produced by the <see cref="T:Microsoft.Test.MaDLybZ.ShortIntegerRange"/> which the attribute describes
            </summary>
            <remarks>
            By default this is set to <see cref="T:System.Int16"/>.<see cref="F:System.Int16.MaxValue"/>.
            </remarks>
            <example>
            <code>
            [ShortIntegerRange(Min = 1, Max = 10)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.StringSet">
            <summary>
            A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> which produces data of type <see cref="T:System.String"/>
            </summary>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>
            and calls <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> to produce a value of type <see cref="T:System.String"/>. Because desired character sets and length values are not supplied,
            the value produced will be comprised of any characters between <see cref="T:System.Char"/>.<see cref="F:System.Char.MinValue"/> and <see cref="T:System.Char"/>.<see cref="F:System.Char.MaxValue"/>
            with a length between 0 and <see cref="T:System.Int32"/>.<see cref="F:System.Int32.MaxValue"/> characters:
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Several properties allow for constraining the value produced. Here, the number 10 is assigned to the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.Length"/> property before calling
            <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>, ensuring that the value produced will be comprised of exactly 10 characters:
            <code>
            stringSet.Length = 10;
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            In some cases the length need not be constant but must fall within a certain range.  In this example, the number 5 is assigned to the
            <see cref="P:Microsoft.Test.MaDLybZ.StringSet.MinLength"/> property and the number 10 is assigned to the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.MaxLength"/> property, causing the value produced to be between
            5 and 10 characters in length:
            <code>
            stringSet.MinLength = 5;
            stringSet.MaxLength = 10;
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Additionally, it is possible to define the characters which may comprise the value produced. A <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> capable of producing
            values of type <see cref="T:System.Char"/> can be assigned to the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.CharacterSet"/> property, in which case the value produced will be comprised
            of only characters that <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> produces. An instance of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class conveniently exposes several
            such character sets which can be assigned to this property as shown below, where the use of <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>.<see cref="P:Microsoft.Test.MaDLybZ.CharacterRange.Alphabetic"/> causes
            the value produced to be comprised of any uppercase or lowercase characters in the English alphabet:
            <code>
            stringSet.CharacterSet = new CharacterRange(Seed.NextSeed()).Alphabetic;
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            Similarly, a two-dimensional array of <see cref="T:System.Char"/> values can be assigned to the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.CharacterRanges"/> property, causing the value
            produced to be comprised of characters chosen at random from within those ranges. Below, an array is assigned to the property which is equivalent
            to the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/>.<see cref="P:Microsoft.Test.MaDLybZ.CharacterRange.Alphabetic"/> character set used in the preceding example:
            <code>
            stringSet.CharacterRanges = new char[][] { new char[] { 'A', 'Z' }, new char[] { 'a', 'z' } };
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            For convenience, a <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/> value can be assigned to the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.NamedCharacterSet"/> property. Each such 
            <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/> represents a familiar set of characters, such as this example's use of 
            <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/>.<see cref="F:Microsoft.Test.MaDLybZ.CommonCharacterSet.LowercaseAlpha"/>, which causes the value produced to be comprised
            of only lowercase characters from the English alphabet:
            <code>
            stringSet.NamedCharacterSet = StringSet.NamedCharacterRange.LowercaseAlpha;
            string testValue = stringSet.Produce();
            this.apiToTest.Method(testValue);
            </code>
            <br/>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.StringSet.characterSet">
            <summary>
            The character set used to generate random characters
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.StringSet.namedCharacterSet">
            <summary>
            Predefined character ranges available for string generation
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.StringSet.characterRanges">
            <summary>
            Ranges of characters used to build the <see cref="P:Microsoft.Test.MaDLybZ.StringSet.CharacterSet"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.#ctor(Microsoft.Test.MaDLybZ.Seed)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> for random value generation.</param>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.GlobalSeed.NextValue());
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.#ctor(Microsoft.Test.MaDLybZ.Seed,Microsoft.Test.MaDLybZ.StringSetAttribute,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> class with the specified <see cref="T:Microsoft.Test.MaDLybZ.Seed"/>
            and corresponding to the specified <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> defined at <paramref name="delegateTarget"/>
            </summary>
            <param name="seed"><see cref="T:Microsoft.Test.MaDLybZ.Seed"/> used by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> for random value generation.</param>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
            <exception cref="T:System.ArgumentNullException">attribute is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.OnInitialize(Microsoft.Test.MaDLybZ.FactorySetAttribute,System.Object)">
            <summary>
            OnInitialize method
            </summary>
            <param name="attribute">The <see cref="T:Microsoft.Test.MaDLybZ.FactorySetAttribute"/> corresponding to the current <see cref="T:Microsoft.Test.MaDLybZ.FactorySet"/>.</param>
            <param name="delegateTarget">The target object at which <paramref name="attribute"/> is defined.</param>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.CreateData(Microsoft.Test.MaDLybZ.ProductionEventArgs)">
            <summary>
            Overriden to produce a <see cref="T:System.String"/> from the current <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/>
            </summary>
            <param name="e"><see cref="T:Microsoft.Test.MaDLybZ.ProductionEventArgs"/> for the current production</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.GetNamedCharacterSet(Microsoft.Test.MaDLybZ.CommonCharacterSet)">
            <summary>
            Gets a character set based upon its name
            </summary>
            <param name="commonCharacterSet">The named character set to use</param>
            <returns>The character set requested</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.ParseCharacterRanges">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> for type char based on
            the specified two-dimensional char array
            </summary>
            <returns>The instantiated character factory</returns>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSet.ParseCharacterRange(System.Char[])">
            <summary>
            Creates a <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> based of the min max pair specified
            </summary>
            <param name="range">A <see cref="T:System.Char"/> array containing the min max pair of the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> to create</param>
            <returns>A <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> based of the min max pair specified</returns>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.CharacterSet">
            <summary>
            Gets or sets the character factory that will be parsed from the incoming character set,
            and which will be used to generate the string
            </summary>
            <example>
            A custom <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/> capable of producing values of type <see cref="T:System.Char"/> can be assigned
            to this property as shown below:
            <code>
            StringSet stringSet = new StringSet(new Seed());
            stringSet.CharacterSet = new CharacterRange(new Seed(), 'a', 'z');
            </code>
            <br/>
            As an alternative, the <see cref="T:Microsoft.Test.MaDLybZ.CharacterRange"/> class exposes several predefined <see cref="T:Microsoft.Test.MaDLybZ.FactorySet`1"/>
            character sets, such as <see cref="P:Microsoft.Test.MaDLybZ.CharacterRange.LowercaseAlpha"/> as shown below, which is equivalent to the preceding example:
            <code>
            stringSet.CharacterSet = new CharacterRange(new Seed()).LowercaseAlpha;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.CharacterRanges">
            <summary>
            Gets or sets the character set comprising the value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            stringSet.CharacterRanges = new char[][] { new char[] { 'A', 'Z' }, new char[] { 'a', 'z' } };
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.NamedCharacterSet">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Test.MaDLybZ.CommonCharacterSet"/> representing the character set comprising the value which is produced by the <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/> method of the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/>
            </summary>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            stringSet.NamedCharacterSet = CommonCharacterSet.LowercaseAlpha;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.MinLength">
            <summary>
            Gets or sets the minimum length of the value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            stringSet.MinLength = 5;
            stringSet.MaxLength = 10;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.MaxLength">
            <summary>
            Gets or sets the maximum length of the value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            stringSet.MinLength = 5;
            stringSet.MaxLength = 10;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSet.Length">
            <summary>
            Gets or sets the length of the value which is produced by <see cref="M:Microsoft.Test.MaDLybZ.FactorySet`1.Produce"/>
            </summary>
            <example>
            <code>
            StringSet stringSet = new StringSet(Seed.NextSeed());
            stringSet.Length = 10;
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.StringSetAttribute">
            <summary>
            An attribute which describes a <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> for the production of values of type <see cref="T:System.String"/>
            </summary>
            <example>
            In the following example, a factory produces an object having a property "SomeProperty" of type <see cref="T:System.String"/>,
            and a variety of options are defined using <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> for producing specific kinds of values:
            <code>
            [FactoryMember(typeof(string))]
            public enum SomeProperty
            {
                /// &lt;summary&gt;
                /// A string comprised of 256 alphabetic characters and digits
                /// &lt;/summary&gt;
                [StringSet(Length = 256, NamedCharacterSet = StringSet.NamedCharacterRange.Alphanumeric)]
                TwoHundredFiftySixAlphanumeric,
                <para/>
                /// &lt;summary&gt;
                /// A string comprised of between 1 and 10 uppercase or lowercase English characters
                /// &lt;/summary&gt;
                [StringSet(MinLength = 1, MaxLength = 10, CharacterRanges = new char[][] { new char[] { 'A', 'Z' }, new char[] { 'a', 'z' } })]
                OneToTenAlphabetic,
                <para/>
                /// &lt;summary&gt;
                /// A string comprised of between 1 and 10 digits
                /// &lt;/summary&gt;
                [RegexStringSet(RegularExpression = "[0-9]{1,10}")]
                OneToTenDigits,
                <para/>
                [ConstantValue(typeof(string), Value = "")]
                Empty,
                <para/>
                [ConstantValue(typeof(object), Value = null)]
                Null
            }
            </code>
            </example>
            <seealso cref="T:Microsoft.Test.MaDLybZ.StringSet"/>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSetAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.StringSetAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/> class.  This constructor is for use by those providing a new implementation of <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/>, and <see cref="T:Microsoft.Test.MaDLybZ.StringSetAttribute"/>.
            </summary>
            <param name="stringSetType">The type of <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> the attribute discribes</param>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSetAttribute.CharacterRanges">
            <summary>
            Gets or sets the character set comprising the string produced by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [StringSet(CharacterRanges = new char[][] { new char[] { 'A', 'Z' }, new char[] { 'a', 'z' } })]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSetAttribute.NamedCharacterSet">
            <summary>
            Gets or sets the character set comprising the string produced by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [StringSet(NamedCharacterSet = CommonCharacterSet.Alphanumeric)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSetAttribute.MinLength">
            <summary>
            Gets or sets the minimum length of the string produced by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [StringSet(MinLength = 1, MaxLength = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSetAttribute.MaxLength">
            <summary>
            Gets or sets the maximum length of the string produced by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [StringSet(MinLength = 1, MaxLength = 10)]
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.StringSetAttribute.Length">
            <summary>
            Gets or sets the length of the string produced by the <see cref="T:Microsoft.Test.MaDLybZ.StringSet"/> which the attribute describes
            </summary>
            <example>
            <code>
            [StringSet(Length = 256)]
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1">
            <summary>
            A dictionary whose values can be of any type
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys</typeparam>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the <see cref="T:Microsoft.Test.MaDLybZ.Utilities.WeaklyTypedDictionary`1"/> being constructed.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.WeightedChoice">
            <summary>
            A value of type <see cref="T:System.Object"/> with a certain "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s
            </summary>
            <remarks>
            This is a generic, weakly-typed implementation of <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> for use with the <see cref="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})"/> method.
            </remarks>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DataGenerator"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>.  
            then and adds two weakly-typed <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice"/>s: one for the value 10 with a weight of 0.25, and a
            second for the value true with a weight of 0.75 to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice"/>s. The test then calls <see cref="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})"/> to select
            between the choices, with a 25% chance of selecting the first value and a 75% chance of selecting the second:
            <code>
            DataGenerator d = new DataGenerator(Seed.NextSeed());
            List&lt;WeightedChoice&gt; choices = new List&lt;WeightedChoice&gt;();
            choices.Add(new WeightedChoice(10, 0.25D));
            choices.Add(new WeightedChoice(true, 0.75D));
            object testValue = d.Choose&lt;WeightedChoice&gt;(choices).Choice;
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Test.MaDLybZ.WeightedChoice`1">
            <summary>
            A value of type T with a certain "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s
            </summary>
            <remarks>
            This is a generic implementation of <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/> for use with the <see cref="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})"/> method.
            </remarks>
            <typeparam name="T">Data type of the choice</typeparam>
            <example>
            In the following example, a test case creates a new <see cref="T:Microsoft.Test.MaDLybZ.DataGenerator"/> using <see cref="M:Microsoft.Test.MaDLybZ.Seed.NextSeed"/>.  
            then and adds two <see cref="T:System.Int32"/>-based <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/>s: one for the value 10 with a weight of 0.25, and a
            second for the value 20 with a weight of 0.75 to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Int32"/>-based <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/>s. The test then calls <see cref="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})"/> to select
            between the choices, with a 25% chance of selecting the first value and a 75% chance of selecting the second:
            <code>
            DataGenerator d = new DataGenerator(Seed.NextSeed());
            List&lt;WeightedChoice&lt;int&gt;&gt; choices = new List&lt;WeightedChoice&lt;int&gt;&gt;();
            choices.Add(new WeightedChoice&lt;int&gt;(10, 0.25D));
            choices.Add(new WeightedChoice&lt;int&gt;(20, 0.75D));
            int testValue = d.Choose&lt;WeightedChoice&lt;int&gt;&gt;(choices).Choice;
            this.apiToTest.Method(testValue);
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.WeightedChoice`1.weight">
            <summary>
            The "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s
            </summary>
        </member>
        <member name="F:Microsoft.Test.MaDLybZ.WeightedChoice`1.choice">
            <summary>
            The value represented by the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.WeightedChoice`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/> class with default 
            values for <see cref="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Choice"/> and <see cref="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Weight"/>
            </summary>
            <example>
            <code>
            WeightedChoice&lt;int&gt; choice = new WeightedChoice&lt;int&gt;();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.WeightedChoice`1.#ctor(`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/> class with the
            specified value and weight
            </summary>
            <param name="choice">The value represented by the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice`1"/></param>
            <param name="weight">The "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s</param>
            <example>
            <code>
            WeightedChoice&lt;int&gt; choice = new WeightedChoice&lt;int&gt;(10, 0.25D);
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Weight">
            <summary>
            Gets or sets the "weight" or likelihood of being chosen from among several
            <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s by the <see cref="M:Microsoft.Test.MaDLybZ.DataGenerator.Choose(System.Collections.Generic.IEnumerable{Microsoft.Test.MaDLybZ.IWeightedChoice})"/> method
            </summary>
            <example>
            <code>
            WeightedChoice&lt;int&gt; choice = new WeightedChoice&lt;int&gt;();
            choice.Choice = 10;
            choice.Weight = 0.25D;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Choice">
            <summary>
            Gets or sets the value represented by the <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>
            </summary>
            <example>
            <code>
            WeightedChoice&lt;int&gt; choice = new WeightedChoice&lt;int&gt;();
            choice.Choice = 10;
            choice.Weight = 0.25D;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.WeightedChoice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice"/> class with default
            values for <see cref="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Choice"/> and <see cref="P:Microsoft.Test.MaDLybZ.WeightedChoice`1.Weight"/>
            </summary>
            <example>
            <code>
            WeightedChoice choice = new WeightedChoice();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Test.MaDLybZ.WeightedChoice.#ctor(System.Object,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice"/> class with the 
            specified value and weight
            </summary>
            <param name="choice">The value represented by the <see cref="T:Microsoft.Test.MaDLybZ.WeightedChoice"/></param>
            <param name="weight">The "weight" or likelihood of being chosen from among several <see cref="T:Microsoft.Test.MaDLybZ.IWeightedChoice"/>s</param>
            <example>
            <code>
            WeightedChoice choice = new WeightedChoice(10, 0.25D);
            </code>
            </example>
        </member>
    </members>
</doc>
