<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Test.Combinatorics</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Test.Combinatorics.ArrayExtensions">
            <summary>
            Contains extension methods for arrays.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ArrayExtensions.Initialize``1(``0[],System.Func{System.Int32,``0})">
            <summary>
            Invokes an user-defined function to generate each of the entries for an array.
            </summary>
            <typeparam name="T">The type of the values in the array.</typeparam>
            <param name="array">The array to initialize.</param>
            <param name="initializer">The initialization function to be invoked.</param>
            <returns><paramref name="array"/> initialized using the <paramref name="initializer"/> function.</returns>
            <remarks>The original array <paramref name="array"/> is returned so that calls to <see cref="M:Modify"/> and <see cref="M:Swap"/> can be chained together.</remarks>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ArrayExtensions.Modify``1(``0[],System.Func{System.Int32,``0,``0})">
            <summary>
            Invokes an user-defined function to modify each of the entries of an array.
            </summary>
            <typeparam name="T">The type of the values in the array.</typeparam>
            <param name="array">The array to modify.</param>
            <param name="modifier">The modification function to be invoked.</param>
            <returns><paramref name="array"/> modified using the <paramref name="modifier"/> function.</returns>
            <remarks>The original array <paramref name="array"/> is returned so that calls to <see cref="M:Modify"/> and <see cref="M:Swap"/> can be chained together.</remarks>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ArrayExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps the items at the specified indicies.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array in which items are to be swapped.</param>
            <param name="i">The index of the first item to swap.</param>
            <param name="j">The index of the second item to be swap with the first.</param>
            <returns><paramref name="array"/> after the swap operation is performed.</returns>
            <remarks>The original array <paramref name="array"/> is returned so that calls to <see cref="M:Modify"/> and <see cref="M:Swap"/> can be chained together.</remarks>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Checks">
            <summary>
            Contains a variety of methods to enforce constraints on parameters, return values
            etc.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Checks.VerifyNotNull``1(``0,System.String)">
            <summary>
            Verifies that the string value <paramref name="value"/> is not null (when <typeparamref name="T"/> is a reference type).
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to verify.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Checks.VerifyNotNullOrEmpty(System.String,System.String)">
            <summary>
            Verifies that the string value <paramref name="value"/> is not null or empty (contains only whitespace).
            </summary>
            <param name="value">The value to verify.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Checks.VerifyInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the value <paramref name="value"/> is within the range {<paramref name="lower"/>, <paramref name="upper"/>}.
            </summary>
            <param name="lower">The lower bound.</param>
            <param name="upper">The upper bound.</param>
            <param name="value">The value to check.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.AsEnumerable`1">
            <summary>
            A lazy conversion enumeration.
            </summary>
            <typeparam name="C">The type to convert IEnumerable&lt;T&gt; instances to.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerable`1.enumerations">
            <summary>The collection of enumerations to convert.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Test.Combinatorics.AsEnumerable`1"/> type.
            </summary>
            <param name="enumerations">The enumeration of enumerations to convert from.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerable`1.GetEnumerator">
            <summary>
            Retrieves an enumerator to enumerate over the items in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator to enumerate over the items in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.AsEnumerator`1">
            <summary>
            A lazy conversion enumerator.
            </summary>
            <typeparam name="C">The type to convert IEnumerable&lt;T&gt; instances to.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerator`1.current">
            <summary>The current subset.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerator`1.enumerations">
            <summary>The collection of enumerations to convert.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerator`1.enumerator">
            <summary>The enumerator of the collection of enumerations to convert.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerator`1.isDisposed">
            <summary>Flag to indicate if this object has been disposed.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.AsEnumerator`1.source">
            <summary>The current source enumeration to convert.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Test.Combinatorics.AsEnumerator`1"/> type.
            </summary>
            <param name="enumerations">The enumeration of enumerations to convert from.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.Dispose">
            <summary>
            Disposes of this enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.MoveNext">
            <summary>
            Computes the next conversion.
            </summary>
            <returns><c>true</c> if there is a subsequent conversion; <c>false</c> if the enumerator has moved beyond the last conversion.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.Reset">
            <summary>
            Resets this enumerator to the start of the conversion sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.CreateArray(System.Type,System.Object)">
            <summary>
            Converts an enumeration into an array.
            </summary>
            <param name="targetType">The type of the elements in the array.</param>
            <param name="enumeration">The enumeration to convert.</param>
            <returns>An array.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.CreateList(System.Type,System.Object)">
            <summary>
            Converts an enumeration into a list.
            </summary>
            <param name="targetType">The type of the elements in the list.</param>
            <param name="enumeration">The enumeration to convert.</param>
            <returns>A list.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.CheckAndThrowIfDisposed">
            <summary>
            Checks if this object has already been disposed and if so throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.Select">
            <summary>
            Uses the current source enumeration to set the current converted object.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.AsEnumerator`1.Update">
            <summary>
            Updates the current source enumeration that is converted.
            </summary>
            <returns><c>true</c> if more items are available to convert; <c>false</c> if the end is reached.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.AsEnumerator`1.Current">
            <summary>
            Retrieves the current conversion.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.AsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Retrieves the current conversion.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.AsEnumerator`1.ConversionType">
            <summary>
            Represents the type of conversion to apply to an IEnumerable&lt;T&gt; in the As method.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.FirstEnumerable`1">
            <summary>
            An enumeration that retrieves a fixed number of items from a potentially
            large collection in a delayed manner.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerable`1.count">
            <summary>The number of items to retrieve.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerable`1.items">
            <summary>The enumeration to retrieve items from.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerable`1.predicate">
            <summary>The (optional) predicate that retrieved items must satisfy.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0},System.Int32)">
            <summary>
            Creates and initializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.FirstEnumerable`1"/> type.
            </summary>
            <param name="items">The original enumeration to retrieve objects from.</param>
            <param name="count">The number of items to retrieve.</param>
            <param name="predicate">The (optional) predicate to be matched.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.FirstEnumerator`1">
            <summary>
            Enumerator that implements delayed bounded iteration over a potentially large
            collection of items.
            </summary>
            <typeparam name="T">The type of the items returned by this iterator.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.count">
            <summary></summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.current">
            <summary>The current item.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.enumerator">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.index">
            <summary>The index of the current item.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.isDisposed">
            <summary>Flag to indicate if this object has been disposed.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.items">
            <summary></summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.FirstEnumerator`1.predicate">
            <summary></summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0},System.Int32)">
            <summary>
            Creates and intializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.FirstEnumerator`1"/> type.
            </summary>
            <param name="items">The enumeration to iterate over.</param>
            <param name="predicate">The optional predicate to be satisfied by retrieved objects.</param>
            <param name="count">The number of items to retrieve.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.Dispose">
            <summary>
            Disposes of this enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.MoveNext">
            <summary>
            Updates the current item.
            </summary>
            <returns><c>true</c>, if more items are available; <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.Reset">
            <summary>
            Reset this enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.CheckAndThrowIfDisposed">
            <summary>
            Checks if this object has already been disposed and if so throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.FirstEnumerator`1.IsValid(`0)">
            <summary>
            Determines whether the specified value should be selected.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if <see cref="F:predicate"/> is <c>null</c> or if <paramref name="value"/> satisfies <see cref="F:predicate"/>; <c>false</c>, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.FirstEnumerator`1.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.FirstEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.EnumerableExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> types.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Compute``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a computation function to each item in an enumeration in turn and returns the result
            of the computation.
            </summary>
            <typeparam name="T">The type of the items on which the computation is performed and the type of the result of the computation.</typeparam>
            <param name="items">The items to perform the computation on.</param>
            <param name="computer">The function that computes the next subresult given the previous subresult and the current value.</param>
            <returns>The result of the computation.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Compute``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``0})">
            <summary>
            Applies a computation function to each item in an enumeration in turn and returns the result
            of the computation.
            </summary>
            <typeparam name="T">The type of the items on which the computation is performed and the type of the result of the computation.</typeparam>
            <param name="items">The items to perform the computation on.</param>
            <param name="initialValue">The initial value of the result.</param>
            <param name="computer">The function that computes the next subresult given the previous subresult and the current value.</param>
            <returns>The result of the computation.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Compute2``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1})">
            <summary>
            Applies a computation function to each item in an enumeration in turn and returns the result
            of the computation.
            </summary>
            <typeparam name="T">The type of the items on which the computation is performed.</typeparam>
            <typeparam name="R">The tyep of the result of the computation.</typeparam>
            <param name="items">The items to perform the computation on.</param>
            <param name="computer">The function that computes the next subresult given the previous subresult and the current value.</param>
            <returns>The result of the computation.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Compute2``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies a computation function to each item in an enumeration in turn and returns the result
            of the computation.
            </summary>
            <typeparam name="T">The type of the items on which the computation is performed.</typeparam>
            <typeparam name="R">The tyep of the result of the computation.</typeparam>
            <param name="items">The items to perform the computation on.</param>
            <param name="computer">The function that computes the next subresult given the previous subresult and the current value.</param>
            <param name="initialValue">The initial value of the result.</param>
            <returns>The result of the computation.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Constructs a new enumeration containing the values from the source enumeration and each
            of the other enumerations.
            </summary>
            <typeparam name="T">The type of the values in the enumerations</typeparam>
            <param name="source">The source enumeration.</param>
            <param name="others">The other enumerations to append from.</param>
            <returns>An enumeration of all the values from the source and other enumerations.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Retrieves the first K items from an enumeration that satisfy a specified condition.
            </summary>
            <param name="items">The enumeration to retrieve items from.</param>
            <param name="count">The number of items to retrieve.</param>
            <param name="predicate">The predicate to match.</param>
            <returns>An enumeration of the first K items of <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for each element in a sequence.
            </summary>
            <typeparam name="T">The type of each element in the sequence.</typeparam>
            <param name="source">An IEnumerable to walk.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Performs an action on each element in a sequence using the element's index.
            </summary>
            <typeparam name="T">The type of each element in the sequence.</typeparam>
            <param name="source">An IEnumerable to walk.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the input sequence was empty, false otherwise.
            </summary>
            <typeparam name="TSource">The type of the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            	<c>true</c> if the source sequence is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Rotate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Rotates an enumeration to the left by a specified amount.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The enumeration to rotate.</param>
            <param name="k">The amount to rotate by.</param>
            <returns><paramref name="items"/> rotated by <paramref name="k"/> steps.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToCountMap``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumeration into a map keyed by the unique items in <paramref name="items"/> where the value
            for each key is the number of times that key occurs in <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the values in <paramref name="items"/>.</typeparam>
            <param name="items">The source enumeration.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
            <remarks>The default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> of the type <typeparamref name="T"/> is used when comparing keys.</remarks>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToCountMap``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts an enumeration into a map keyed by the unique items in <paramref name="items"/> where the value
            for each key is the number of times that key occurs in <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the values in <paramref name="items"/>.</typeparam>
            <param name="items">The source enumeration.</param>
            <param name="comparer">The instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the keys.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToCsvString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves a comma separated value string of a collection of items.
            </summary>
            <typeparam name="T">The type of the items to convert into a CSV string.</typeparam>
            <param name="items">The items to covert into a CSV string.</param>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToCsvString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Retrieves a character separated value string of a collection of items.
            </summary>
            <typeparam name="T">The type of the items to convert into a CSV string.</typeparam>
            <param name="items">The items to covert into a CSV string.</param>
            <param name="separator">The separator.</param>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToCsvString``1(System.Collections.Generic.IEnumerable{``0},System.IFormatProvider,System.String)">
            <summary>
            Retrieves a character separated value string of a collection of items.
            </summary>
            <typeparam name="T">The type of the items to convert into a CSV string.</typeparam>
            <param name="items">The items to covert into a CSV string.</param>
            <param name="provider">The <see cref="T:System.IFormatProvider"/> to use to format the string values of the items in <paramref name="items"/>.</param>
            <param name="separator">The separator.</param>
            <returns>A CSV string.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves a set view of a collection of items.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <param name="items">The original collection of items.</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Retrieves a set view of a collection of items.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <param name="items">The original collection of items.</param>
            <param name="comparer">The comparer to use to sort the items in original enumeration.</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToSortedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves a sorted list view of a collection of items.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <param name="items">The original collection of items.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the items in <paramref name="items"/> in sorted order.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.ToSortedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Retrieves a sorted list view of a collection of items.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <param name="items">The original collection of items.</param>
            <param name="comparer">The comparer to use to sort the items.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the items in <paramref name="items"/> in sorted order.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Transform``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Constructs a new enumeration containing the values from the source enumeration transformed
            into a potentially different type by a transformation function.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <typeparam name="O">The type of the items in the target enumeration.</typeparam>
            <param name="items">The original enumeration to transform.</param>
            <param name="transformer">The transformation functions.</param>
            <returns>An enumeration of the values in <paramref name="items"/> transformed by a transformation function.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensionMethods.Transform``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Constructs a new enumeration containing the values from the source enumeration transformed
            into a potentially different type by a transformation function.
            </summary>
            <typeparam name="T">The type of the items in the original enumeration.</typeparam>
            <typeparam name="O">The type of the items in the target enumeration.</typeparam>
            <param name="items">The original enumeration to transform.</param>
            <param name="transformer">The transformation functions.</param>
            <returns>An enumeration of the values in <paramref name="items"/> transformed by a transformation function.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.EnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.IEnumerable"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensions.Append(System.Collections.IEnumerable,System.Collections.IEnumerable[])">
            <summary>
            Constructs a new enumeration containing the values from the source enumeration and each
            of the other enumerations.
            </summary>
            <param name="source">The source enumeration.</param>
            <param name="others">The other enumerations to append from.</param>
            <returns>An enumeration of all the values from the source and other enumerations.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensions.As``1(System.Collections.IEnumerable)">
            <summary>
            Converts each enumeration of items in a collection into a composite object constructed from the enumeration.
            </summary>
            <typeparam name="C">The type to convert to.</typeparam>
            <param name="enumerations">The collection of enumerations to convert.</param>
            <returns>An enumeration of objects of type <typeparamref name="C"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Returns true if the input sequence was empty, false otherwise.
            </summary>
            <param name="source">The source sequence.</param>
            <returns>
            	<c>true</c> if the source sequence is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensions.ToArray``1(System.Collections.IEnumerable)">
            <summary>
            Converts a non-generic enumeration of objects into a generic array.
            </summary>
            <typeparam name="T">The type of the items in <paramref name="enumeration"/>.</typeparam>
            <param name="enumeration">The enumeration to materialize.</param>
            <returns>An instance of <see cref="T:System.Array"/> of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.EnumerableExtensions.ToList``1(System.Collections.IEnumerable)">
            <summary>
            Converts a non-generic enumeration of objects into a generic list.
            </summary>
            <typeparam name="T">The type of the items in <paramref name="enumeration"/>.</typeparam>
            <param name="enumeration">The enumeration to materialize.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`2">
            <summary>
            Represents a combination of two disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`2"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`2.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`2.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`2.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`3">
            <summary>
            Represents a combination of three disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`3"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`3.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`3.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`3.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`3.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`4">
            <summary>
            Represents a combination of four disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`4"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`4.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`4.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`4.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`4.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`4.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`5">
            <summary>
            Represents a combination of five disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`5"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`5.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`5.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`5.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`5.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`5.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`5.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`5.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`5.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`6">
            <summary>
            Represents a combination of six disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`6"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`6.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`6.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`6.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`6.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`7">
            <summary>
            Represents a combination of seven disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`7"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`7.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`7.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`7.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`7.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`8">
            <summary>
            Represents a combination of eight disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`8"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`8.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`8.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`8.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`8.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`9">
            <summary>
            Represents a combination of nine disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`9"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`9.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`9.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`9.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`9.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`10">
            <summary>
            Represents a combination of ten disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`10"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`10.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`10.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`10.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`10.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`11">
            <summary>
            Represents a combination of eleven disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`11"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`11.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`11.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`11.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`11.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`12">
            <summary>
            Represents a combination of twelve disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
            <typeparam name="T12">The type of object twelve in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`12"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
            <param name="value12">Value 12.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`12.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`12.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`12.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`12.Value12">
            <summary>
            Gets value 12 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`13">
            <summary>
            Represents a combination of thirteen disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
            <typeparam name="T12">The type of object twelve in this combination.</typeparam>
            <typeparam name="T13">The type of object thirteen in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`13"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
            <param name="value12">Value 12.</param>
            <param name="value13">Value 13.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`13.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`13.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`13.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value12">
            <summary>
            Gets value 12 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`13.Value13">
            <summary>
            Gets value 13 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`14">
            <summary>
            Represents a combination of fourteen disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
            <typeparam name="T12">The type of object twelve in this combination.</typeparam>
            <typeparam name="T13">The type of object thirteen in this combination.</typeparam>
            <typeparam name="T14">The type of object fourteen in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`14"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
            <param name="value12">Value 12.</param>
            <param name="value13">Value 13.</param>
            <param name="value14">Value 14.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`14.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`14.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`14.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value12">
            <summary>
            Gets value 12 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value13">
            <summary>
            Gets value 13 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`14.Value14">
            <summary>
            Gets value 14 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`15">
            <summary>
            Represents a combination of fifteen disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
            <typeparam name="T12">The type of object twelve in this combination.</typeparam>
            <typeparam name="T13">The type of object thirteen in this combination.</typeparam>
            <typeparam name="T14">The type of object fourteen in this combination.</typeparam>
            <typeparam name="T15">The type of object fifteen in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`15"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
            <param name="value12">Value 12.</param>
            <param name="value13">Value 13.</param>
            <param name="value14">Value 14.</param>
            <param name="value15">Value 15.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`15.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`15.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`15.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value12">
            <summary>
            Gets value 12 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value13">
            <summary>
            Gets value 13 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value14">
            <summary>
            Gets value 14 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`15.Value15">
            <summary>
            Gets value 15 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Combination`16">
            <summary>
            Represents a combination of sixteen disparate objects.
            </summary>
            <typeparam name="T1">The type of object one in this combination.</typeparam>
            <typeparam name="T2">The type of object two in this combination.</typeparam>
            <typeparam name="T3">The type of object three in this combination.</typeparam>
            <typeparam name="T4">The type of object four in this combination.</typeparam>
            <typeparam name="T5">The type of object five in this combination.</typeparam>
            <typeparam name="T6">The type of object six in this combination.</typeparam>
            <typeparam name="T7">The type of object seven in this combination.</typeparam>
            <typeparam name="T8">The type of object eight in this combination.</typeparam>
            <typeparam name="T9">The type of object nine in this combination.</typeparam>
            <typeparam name="T10">The type of object ten in this combination.</typeparam>
            <typeparam name="T11">The type of object eleven in this combination.</typeparam>
            <typeparam name="T12">The type of object twelve in this combination.</typeparam>
            <typeparam name="T13">The type of object thirteen in this combination.</typeparam>
            <typeparam name="T14">The type of object fourteen in this combination.</typeparam>
            <typeparam name="T15">The type of object fifteen in this combination.</typeparam>
            <typeparam name="T16">The type of object sixteen in this combination.</typeparam>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`16.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Combination`16"/> type.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value3">Value 3.</param>
            <param name="value4">Value 4.</param>
            <param name="value5">Value 5.</param>
            <param name="value6">Value 6.</param>
            <param name="value7">Value 7.</param>
            <param name="value8">Value 8.</param>
            <param name="value9">Value 9.</param>
            <param name="value10">Value 10.</param>
            <param name="value11">Value 11.</param>
            <param name="value12">Value 12.</param>
            <param name="value13">Value 13.</param>
            <param name="value14">Value 14.</param>
            <param name="value15">Value 15.</param>
            <param name="value16">Value 16.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`16.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the values in this combination.
            </summary>
            <returns>An instance of IEnumerator{T}.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Combination`16.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value1">
            <summary>
            Gets value 1 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value2">
            <summary>
            Gets value 2 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value3">
            <summary>
            Gets value 3 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value4">
            <summary>
            Gets value 4 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value5">
            <summary>
            Gets value 5 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value6">
            <summary>
            Gets value 6 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value7">
            <summary>
            Gets value 7 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value8">
            <summary>
            Gets value 8 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value9">
            <summary>
            Gets value 9 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value10">
            <summary>
            Gets value 10 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value11">
            <summary>
            Gets value 11 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value12">
            <summary>
            Gets value 12 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value13">
            <summary>
            Gets value 13 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value14">
            <summary>
            Gets value 14 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value15">
            <summary>
            Gets value 15 from this combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Combination`16.Value16">
            <summary>
            Gets value 16 from this combination.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.CombinatorialExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> types.
            </summary>
            <summary>
            Contains extension methods for enumeration N-wise combinations.
            </summary>
            <summary>
            Contains extension methods for enumeration N-wise combinations.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllKSubsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Retrieves an enumeration of all possible K subsets of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <param name="k">The cardinality of the enumerated subsets.</param>
            <returns>All possible subsets of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllPartitions``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves all possible partitions of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which partitions are created.</param>
            <returns>All possible partitions of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllPermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves all possible permutations of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which permutations are created.</param>
            <returns>All permutations of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllSubsets``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves an enumeration of all possible subsets of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <returns>All possible subsets of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllSubsets``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Test.Combinatorics.EnumerationType)">
            <summary>
            Retrieves an enumeration of all possible subsets of a set of items ordered as specified.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <param name="type">Indicates how the subsets are generated.</param>
            <returns>All possible subsets of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.NWise``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a placeholder to capture N and the first enumeration when generating t-wise combinations.
            </summary>
            <typeparam name="T">The type of the items in the first enumeration.</typeparam>
            <param name="first">The first enumeration.</param>
            <param name="n">The size of the t-way sets to cover.</param>
            <returns>A placeholder instance which exposes With extension methods.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomKSubsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Retrieves an enumeration of random subsets of K items from a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <param name="k">The number of items that each returned subset should have.</param>
            <returns>Random K subsets of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomKSubsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Retrieves an enumeration of random subsets of K items from a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <param name="k">The number of items that each returned subset should have.</param>
            <returns>Random K subsets of the items in <paramref name="items"/>.</returns>
            <param name="seed">The seed to use when generating the random subsets.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomPartitions``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves random partitions of a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which partitions are created.</param>
            <returns>Random partitions of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomPartitions``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Retrieves random partitions of a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which partitions are created.</param>
            <param name="seed">The seed to use to generate random numbers.</param>
            <returns>Random partitions of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomPermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves random permutations of the items in a set.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which permutations are created.</param>
            <returns>Random permutations of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Retrieves random permutations of the items in a set.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which permutations are created.</param>
            <param name="seed">The seed to use when generating the random permutations.</param>
            <returns>Random permutations of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomSubsets``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Retrieves an enumeration of random subsets of a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <returns>Random subsets of the items in <paramref name="items"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.RandomSubsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Retrieves an enumeration of random subsets of a set of items.
            </summary>
            <remarks>
            The returned enumeration is non-terminating. That is, if the enumeration is iterated over, the iterator
            will never terminate.
            </remarks>
            <typeparam name="T">The type of the items in the original set.</typeparam>
            <param name="items">The original set of items over which subsets are created.</param>
            <returns>Random subsets of the items in <paramref name="items"/>.</returns>
            <param name="seed">The seed to use when generating the random subsets.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.AllCombinationsImpl(System.Collections.IEnumerable[])">
            <summary>
            Generates all combinations when more than 32 sets are used since strongly-typed overloads for only 32 parameters sets are provided.
            </summary>
            <param name="enumerations">The parameter sets.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.NWiseCombinationsImpl(System.Int32,System.Collections.IEnumerable[])">
            <summary>
            Generates N-wise combinations when more than 32 parameter sets are used since strongly-typed overloads for only 32 parameters sets are provided.
            </summary>
            <param name="enumerations">The parameter sets.</param>
            <param name="n">The size of the n-way set to cover.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Generates all combinations of values from 2 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Generates all combinations of values from 3 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Generates all combinations of values from 4 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>
            Generates all combinations of values from 5 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5})">
            <summary>
            Generates all combinations of values from 6 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6})">
            <summary>
            Generates all combinations of values from 7 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7})">
            <summary>
            Generates all combinations of values from 8 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8})">
            <summary>
            Generates all combinations of values from 9 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9})">
            <summary>
            Generates all combinations of values from 10 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``11(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10})">
            <summary>
            Generates all combinations of values from 11 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``12(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11})">
            <summary>
            Generates all combinations of values from 12 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``13(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12})">
            <summary>
            Generates all combinations of values from 13 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``14(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13})">
            <summary>
            Generates all combinations of values from 14 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``15(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14})">
            <summary>
            Generates all combinations of values from 15 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <typeparam name="T15">The type of the items in enumeration <paramref name="fifteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <param name="fifteen">Value set 15</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.CombineWith``16(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15})">
            <summary>
            Generates all combinations of values from 16 enumerations with one value from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <typeparam name="T15">The type of the items in enumeration <paramref name="fifteen"/>.</typeparam>
            <typeparam name="T16">The type of the items in enumeration <paramref name="sixteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <param name="fifteen">Value set 15</param>
            <param name="sixteen">Value set 16</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``2(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Generates the minimal combinations of values from 2 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``3(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Generates the minimal combinations of values from 3 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``4(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Generates the minimal combinations of values from 4 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``5(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>
            Generates the minimal combinations of values from 5 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``6(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5})">
            <summary>
            Generates the minimal combinations of values from 6 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``7(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6})">
            <summary>
            Generates the minimal combinations of values from 7 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``8(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7})">
            <summary>
            Generates the minimal combinations of values from 8 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``9(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8})">
            <summary>
            Generates the minimal combinations of values from 9 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``10(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9})">
            <summary>
            Generates the minimal combinations of values from 10 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``11(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10})">
            <summary>
            Generates the minimal combinations of values from 11 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``12(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11})">
            <summary>
            Generates the minimal combinations of values from 12 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``13(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12})">
            <summary>
            Generates the minimal combinations of values from 13 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``14(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13})">
            <summary>
            Generates the minimal combinations of values from 14 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``15(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14})">
            <summary>
            Generates the minimal combinations of values from 15 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <typeparam name="T15">The type of the items in enumeration <paramref name="fifteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <param name="fifteen">Value set 15</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.CombinatorialExtensions.With``16(Microsoft.Test.Combinatorics.NWisePlaceholder{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15})">
            <summary>
            Generates the minimal combinations of values from 16 enumerations such that all t-way combinations of values are covered with one value
            from each enumeration.
            </summary>
            <typeparam name="T1">The type of the items in enumeration <paramref name="one"/>.</typeparam>
            <typeparam name="T2">The type of the items in enumeration <paramref name="two"/>.</typeparam>
            <typeparam name="T3">The type of the items in enumeration <paramref name="three"/>.</typeparam>
            <typeparam name="T4">The type of the items in enumeration <paramref name="four"/>.</typeparam>
            <typeparam name="T5">The type of the items in enumeration <paramref name="five"/>.</typeparam>
            <typeparam name="T6">The type of the items in enumeration <paramref name="six"/>.</typeparam>
            <typeparam name="T7">The type of the items in enumeration <paramref name="seven"/>.</typeparam>
            <typeparam name="T8">The type of the items in enumeration <paramref name="eight"/>.</typeparam>
            <typeparam name="T9">The type of the items in enumeration <paramref name="nine"/>.</typeparam>
            <typeparam name="T10">The type of the items in enumeration <paramref name="ten"/>.</typeparam>
            <typeparam name="T11">The type of the items in enumeration <paramref name="eleven"/>.</typeparam>
            <typeparam name="T12">The type of the items in enumeration <paramref name="twelve"/>.</typeparam>
            <typeparam name="T13">The type of the items in enumeration <paramref name="thirteen"/>.</typeparam>
            <typeparam name="T14">The type of the items in enumeration <paramref name="fourteen"/>.</typeparam>
            <typeparam name="T15">The type of the items in enumeration <paramref name="fifteen"/>.</typeparam>
            <typeparam name="T16">The type of the items in enumeration <paramref name="sixteen"/>.</typeparam>
            <param name="one">Value set 1</param>
            <param name="two">Value set 2</param>
            <param name="three">Value set 3</param>
            <param name="four">Value set 4</param>
            <param name="five">Value set 5</param>
            <param name="six">Value set 6</param>
            <param name="seven">Value set 7</param>
            <param name="eight">Value set 8</param>
            <param name="nine">Value set 9</param>
            <param name="ten">Value set 10</param>
            <param name="eleven">Value set 11</param>
            <param name="twelve">Value set 12</param>
            <param name="thirteen">Value set 13</param>
            <param name="fourteen">Value set 14</param>
            <param name="fifteen">Value set 15</param>
            <param name="sixteen">Value set 16</param>
            <returns>An enumeration of tuples with the first value from the from the first enumeration and the second value from the second enumeration and so on.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1">
            <summary>
            A enumration of all possible partitions of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the set being partitioned.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1.items">
            <summary></summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1"/> type.
            </summary>
            <param name="items">The set of items to be partitioned.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the partitions in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the partitions in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1">
            <summary>
            An enumerator to iterate over the items in an instance of <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the items in the set being partitioned.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.current">
            <summary>The current partition.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.isDisposed">
            <summary>Flag to indicate if this enumerator has been disposed of.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.isFirst">
            <summary>Flag to indicate if this enumerator is in its initial state.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.items">
            <summary>The original set of items over which partitions are created.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.nc">
            <summary>The number of partitions in the current selection.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.p">
            <summary>An array of values indicating the number of values in the partition at the specified index.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.q">
            <summary>An array of indices indicating to which partition the item at the specified index belongs.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1"/> type.
            </summary>
            <param name="items">The original set of items over which partitions are enumerated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.Dispose">
            <summary>
            Disposes of this enumerator and releases all resources held by it.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.MoveNext">
            <summary>
            Selects the next item in the set of all partitions.
            </summary>
            <returns><c>true</c> if an item was selected; <c>false</c> if we are past the last element.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.Reset">
            <summary>
            Resets this enumerator to its initial state.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.CheckIfDisposed">
            <summary>
            Checks and throws an exception if this enumerator has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.Select">
            <summary>
            Selects the items for the current partition.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.Current">
            <summary>
            Gets the current partition.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllPartitionsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current partition.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1">
            <summary>
            An enumeration of all the permutations of a set of items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1.items">
            <summary>The set of items over which all permutations are generated.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which all permutations are generated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate over the items in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to enumerate over the items in this enumeration.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1">
            <summary>
            Enumerators over all possible permutations of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.current">
            <summary>The current permutation.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.even">
            <summary>A state variable used by the permutation algorithm.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.indices">
            <summary>The indicates of the items in the original set that are selected for the current permutation.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.isDisposed">
            <summary>Flag to indicate if this enumerator has been disposed of.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.isFinished">
            <summary>A state variable used by the permutation algorithm to track whether this enumerator is finished.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.isFirst">
            <summary>Flag to indicate if this enumerator is in its initial state.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.originalItems">
            <summary>The set of items over which all permutations are generated.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1"/> type.
            </summary>
            <param name="items">The set of items over which permutations are to be created.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Dispose">
            <summary>
            Disposes of this enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.MoveNext">
            <summary>
            Moves this enumerator to refer to the next item in the enumeration.
            </summary>
            <returns><c>true</c> if a value is available; <c>false</c> if the end has been reached.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Reset">
            <summary>
            Resets this enumerator to the initial state.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Sign(System.Int32,System.Int32)">
            <summary>
            Simulates the fortran SIGN function that computes the absolute of the parameter <paramref name="x"/>
            and then assigns the sign of the parameter <paramref name="y"/> to <paramref name="x"/> and returns
            this new value.
            </summary>
            <param name="x">The value to sign.</param>
            <param name="y">The value that determines the sign.</param>
            <returns><paramref name="x"/> signed by <paramref name="y"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.CheckIfDisposed">
            <summary>
            Checks and throws an exception if this enumerator has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Select">
            <summary>
            Selects the items in the current permutation based on the computed indicies of the items
            to be selected.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.Current">
            <summary>
            Gets the current item referred to by this enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllPermutationsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item referred to by this enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator">
            <summary>
            Generates combinations that cover all possible T-way combinations of values from any number of sets.
            This implementation uses the IPOG (recursive algebraic construction) outlined in 
            http://csrc.nist.gov/groups/SNS/acts/documents/lei-kacker-kuhn-okun-lawrence-08.pdf. It is efficient
            and deterministic.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.current">
            <summary>The current combination.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.isDisposed">
            <summary>Flag to indicate if this enumerator has been disposed off.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.#ctor(System.Int32,System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable"/> class.
            </summary>
            <param name="n">The strenght of coverage. For pair-wise, this is 2, for three-wise it is 3 and so on.</param>
            <param name="enumerations">The enumerations.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.CheckDisposed">
            <summary>
            Checks and throws an exception if this object has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable">
            <summary>
            An enumeration of the T-wise combinations of values from any number of sets.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable.enumerations">
            <summary>The sets to create T-wise combinations from.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable.n">
            <summary>The strength of T-wise coverage.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable.#ctor(System.Int32,System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable"/> class.
            </summary>
            <param name="n">The strenght of coverage. For pair-wise, this is 2, for three-wise it is 3 and so on.</param>
            <param name="enumerations">The enumerations.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator{T}"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.NWiseCombinationsEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.NWisePlaceholder`1">
            <summary>
            An intermediate object to hold the items in the call <code>IEnumerable&lt;T1&gt;.NWise(int);</code>
            </summary>
            <typeparam name="T">The type of the items in the first enumeration when generating NWise combinations.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.NWisePlaceholder`1.first">
            <summary>The source enumeration.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.NWisePlaceholder`1.n">
            <summary>The size of the t-way sets to cover.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.NWisePlaceholder`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes an instance of the <see cref="T:Microsoft.Test.Combinatorics.NWisePlaceholder`1"/> type.
            </summary>
            <param name="n">The size of the t-way sets to cover.</param>
            <param name="first">The first enumeration.</param>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.NWisePlaceholder`1.First">
            <summary>
            Gets the first enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.NWisePlaceholder`1.N">
            <summary>
            Gets the size of the t-way sets to cover.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1">
            <summary>
            Enumeration of random partitions of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the set over which random partitions
            are generated.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1.items">
            <summary>The set of items over which partitions are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1.seed">
            <summary>The seed to use when generating random numbers.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RandomPartitionsEnumerable{T}"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1">
            <summary>
            Enumerator that generates random partitions of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the set over which partitions
            are generated.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.current">
            <summary>The current partition.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.isDisposed">
            <summary>Flag to keep track of the disposed state of this instance.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.items">
            <summary>The items over which partitions are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.numPartitionsGenerator">
            <summary>The random number generator used to generate the number of sets in each partition.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.partitionSelector">
            <summary>The random number generator used to decide which set each item will be placed in, in the 
            current partition.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.seed">
            <summary>The original seed used to initialize the random number generator.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RandomPartitionsEnumerator"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.CheckIfDisposed">
            <summary>
            Checks and throws an exception if this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomPartitionsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1">
            <summary>
            An enumeration of random permutations of a given set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1.items">
            <summary>The original set of items over which the subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1.seed">
            <summary>The seed to use when generating random subsets.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which subsets are generated.</param>
            <param name="seed">The seed used to initialize the random number generator for this enumerator.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1">
            <summary>
            Enumerates random permutations of a set of items.
            </summary>
            <typeparam name="T">The type of the items in the set on which permutations are created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.current">
            <summary>The current permutation.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.indices">
            <summary>The indices of the items generated for each entry in the current permutation.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.isDisposed">
            <summary>Flag to indicate if this object has been disposed.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.items">
            <summary>The underlying items over which permutations are created.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.rng">
            <summary>The random number generator used to generate random numbers for this enumerator.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.seed">
            <summary>The seed to use when generating random permutations.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1"/> type.
            </summary>
            <param name="items">The original collection of items over which subsets are enumerated.</param>
            <param name="seed">The seed used to initialize the random number generator for this enumerator.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.CheckIfDisposed">
            <summary>
            Checks and throws an exception if this enumerator has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.Select">
            <summary>
            Constructs the current permutation based on the current permutation indicies.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.Current">
            <summary>
            Gets the current permutation pointed to by this enumerator.
            </summary>
            <value>The current permutation.</value>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomPermutationsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current permutation pointed to by this enumerator.
            </summary>
            <value>The current permutation.</value>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable">
            <summary>
            An enumeration of the cross-products of any number of sets.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable.enumerations">
            <summary>The sets to create combinations from.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable"/> class.
            </summary>
            <param name="enumerations">The enumerations.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator{T}"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator">
            <summary>
            Generates each individual item in the cross-product of any number of sets.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.current">
            <summary>The current combination.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.enumerations">
            <summary>The individual enumerations.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.enumerators">
            <summary>The individual enumerators.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.isDisposed">
            <summary>Flag to indicate if this enumerator has been disposed off.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.isFirst">
            <summary>Flag to indicate if this enumerator is in the initial state.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.#ctor(System.Collections.IEnumerable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerable"/> class.
            </summary>
            <param name="enumerations">The enumerations.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.CheckDisposed">
            <summary>
            Checks and throws an exception if this object has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.Select">
            <summary>
            Sets the current combination.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.AllCombinationsEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.BitSet">
            <summary>
            Wraps a <see cref="T:System.Collections.BitArray"/> and provides some useful additional methods on top of the
            bit array.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.BitSet.bits">
            <summary>The underlying bit array that this bit set wraps.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.BitSet.count">
            <summary>The count of the number of bits set in this bit set.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.#ctor(System.Int32)">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.BitSet"/> type.
            </summary>
            <param name="length">The number of bits in this bitset.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.Clear">
            <summary>
            Clears all the bits in this bitset.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.Indexes">
            <summary>
            Retrieves a list of the indicies of the bits that are set.
            </summary>
            <returns>A list containing the indices of the bits that are set.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.Initialize(System.Int32,System.Int32[])">
            <summary>
            Sets all the bits at the given indices.
            </summary>
            <param name="indicies">The indices of the bits to set.</param>
            <param name="k">The number of valid indices in <paramref name="indicies"/></param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.NextGraySubset">
            <summary>
            Update this bit set to move to the next Gray subset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.NextKSubset(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Update this bit set to move to the next K subset.
            </summary>
            <param name="k">The cardinality of the next K subset.</param>
            <param name="h">Scratch variable used by this method. This variable is updated and is required
            to be supplied by successive invocations.</param>
            <param name="m">Scratch variable used by this method. This variable is updated and is required
            to be supplied by successive invocations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.NextLexicographicSubset">
            <summary>
            Update this bit set to move to the next Lexicographic subset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.NextRandom(System.Random)">
            <summary>
            Update this bit set to move to the next random subset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.NextStandardSubset">
            <summary>
            Update this bit set to move to the next standard order subset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.DecrementIndices(System.Int32,System.Int32[])">
            <summary>
            Decrements the indices in the specified array by the given increment.
            </summary>
            <param name="decrement"></param>
            <param name="array"></param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.BitSet.IncrementIndices(System.Int32,System.Int32[])">
            <summary>
            Increments the indices in the specified array by the given increment.
            </summary>
            <param name="increment"></param>
            <param name="array"></param>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.BitSet.Count">
            <summary>
            Gets the number of bits that are set in this bitset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.BitSet.Length">
            <summary>
            Gets the number of total bits in this bitset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.BitSet.Item(System.Int32)">
            <summary>
            Gets or sets the bit at the specified index.
            </summary>
            <param name="index">The index of the bit to set or unset.</param>
            <returns><c>true</c> if the bit at <paramref name="index"/> is set; <c>false</c>, otherwise.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1">
            <summary>
            Represents the base enumerator for all combinatorial object enumerators. 
            </summary>
            <typeparam name="T">The type of the items over which combinatorial objects are being created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Empty">
            <summary>The empty collection.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.bitvector">
            <summary>Bitset to keep track of which items are currently selected.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.current">
            <summary>The current subset.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.isDisposed">
            <summary>Flag to indicate if this object has been disposed.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.isFirst">
            <summary>Flag to indicate if the current configuration is the first item.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.items">
            <summary>The underlying items over which subsets are created.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes an instance of <see cref="T:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1"/>.
            </summary>
            <param name="items">The initial set of items over which combinatorial objects are enumerated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Dispose">
            <summary>
            Disposes of this enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.MoveNext">
            <summary>
            Computes the next subset.
            </summary>
            <returns><c>true</c> if there is a next subset; <c>false</c> if the enumerator has moved beyond the last subset.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Reset">
            <summary>
            Resets this enumerator to the start of the subset sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.CheckAndThrowIfDisposed">
            <summary>
            Checks if this object has already been disposed and if so throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Select">
            <summary>
            Uses the current bitset to select the items from the original set and set the current item.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Update">
            <summary>
            Updates the bitset that keeps track of the selected items to move to the next configuration.
            </summary>
            <returns><c>true</c> if more configurations are available; <c>false</c> if the end is reached.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Cardinality">
            <summary>
            The number of items in the original set of objects that we are enumerating over.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Current">
            <summary>
            Retrieves the current subset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Retrieves the current subset.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.Bits">
            <summary>
            Gets the bit set that contains the current configuration of selected items.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.IsDisposed">
            <summary>
            Gets a flag that indicates if this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.CombinatorialObjectEnumerator`1.SupportsDefaultFirst">
            <summary>
            Gets or sets a flag indicating if this enumerator will enumerate the empty set as the 
            first combinatorial object by default.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1">
            <summary>
            An enumeration of random K subsets of a given set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.items">
            <summary>The original set of items over which the subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.k">
            <summary>The cardinality of the returned subsets.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.seed">
            <summary>The seed to use when generating random subsets.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which subsets are generated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.K">
            <summary>
            Gets or sets the cardinality of the generated subsets.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerable`1.Seed">
            <summary>
            Gets or sets the seed for the random number generator to use if this 
            enumerator is enumerating random subsets.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1">
            <summary>
            Base class for all types of subset enumerators.
            </summary>
            <typeparam name="T">The type of the items in the set on which subsets are created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.k">
            <summary>The cardinality of the returned subsets.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.items">
            <summary>The original array over which random K-subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.permutations">
            <summary>Enumerates random permutations of the items over which random K subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.current">
            <summary>The current subset.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.isDisposed">
            <summary>Flag to indicate if this enumerator has been disposed.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1"/> type.
            </summary>
            <param name="items">The original collection of items over which subsets are enumerated.</param>
            <param name="k">the cardinality of the generated subsets.</param>
            <param name="seed">The seed for the random number generator.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.CheckIfDisposed">
            <summary>
            Checks and throws an exception if this enumerator has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomKSubsetsEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1">
            <summary>
            An enumeration of random subsets of a given set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.items">
            <summary>The original set of items over which the subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.k">
            <summary>The cardinality of the returned subsets.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which subsets are generated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerable`1.K">
            <summary>
            Gets or sets the cardinality of the generated subsets.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1">
            <summary>
            Base class for all types of subset enumerators.
            </summary>
            <typeparam name="T">The type of the items in the set on which subsets are created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.h">
            <summary>State variable used b y the NextKSubset algorithm.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.k">
            <summary>The cardinality of the returned subsets.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.m">
            <summary>State variable used b y the NextKSubset algorithm.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1"/> type.
            </summary>
            <param name="items">The original collection of items over which subsets are enumerated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.Update">
            <summary>
            Updates the bitset that keeps track of the selected items to move to the next configuration.
            </summary>
            <returns><c>true</c> if more configurations are available; <c>false</c> if the end is reached.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.KSubsetsEnumerator`1.K">
            <summary>
            Gets or sets the cardinality of the generated subsets.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1">
            <summary>
            An enumeration of random subsets of a given set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.items">
            <summary>The original set of items over which the subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.seed">
            <summary>The seed to use when generating random subsets.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which subsets are generated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerable`1.Seed">
            <summary>
            Gets or sets the seed for the random number generator to use if this 
            enumerator is enumerating random subsets.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1">
            <summary>
            Base class for all types of subset enumerators.
            </summary>
            <typeparam name="T">The type of the items in the set on which subsets are created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.random">
            <summary>The random number generator to use.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.seed">
            <summary>The seed to use when generating random subsets.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1"/> type.
            </summary>
            <param name="items">The original collection of items over which subsets are enumerated.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="includeManagedResources"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.Update">
            <summary>
            Updates the bitset that keeps track of the selected items to move to the next configuration.
            </summary>
            <returns><c>true</c> if more configurations are available; <c>false</c> if the end is reached.</returns>
        </member>
        <member name="P:Microsoft.Test.Combinatorics.Enumerators.RandomSubsetsEnumerator`1.Seed">
            <summary>
            Gets or sets the seed for the random number generator to use if this 
            enumerator is enumerating random subsets.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1">
            <summary>
            An enumeration of all subsets of a given set of items.
            </summary>
            <typeparam name="T">The type of the items in the original set.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1.items">
            <summary>The original set of items over which the subsets are generated.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1.type">
            <summary>The type of the subsets in this enumeration.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1.#ctor(Microsoft.Test.Combinatorics.EnumerationType,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1"/> type.
            </summary>
            <param name="items">The original set of items over which subsets are generated.</param>
            <param name="type">The type of the subsets generated by this enumerable.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1.GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over the items in this enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerator`1">
            <summary>
            Base class for all types of subset enumerators.
            </summary>
            <typeparam name="T">The type of the items in the set on which subsets are created.</typeparam>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerator`1.type">
            <summary>The type of the subsets generated by this enumerator.</summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerator`1.#ctor(Microsoft.Test.Combinatorics.EnumerationType,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates and initializes a new instance of the <see cref="T:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerator`1"/> type.
            </summary>
            <param name="items">The original collection of items over which subsets are enumerated.</param>
            <param name="type">The type of the subsets generated by this enumerable.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.Enumerators.AllSubsetsEnumerator`1.Update">
            <summary>
            Updates the bitset that keeps track of the selected items to move to the next configuration.
            </summary>
            <returns><c>true</c> if more configurations are available; <c>false</c> if the end is reached.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.ComparableExtensions">
            <summary>
            Implements natural language like syntax on types that implement the <see cref="T:System.IComparable{T}"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.GreaterThan``1(``0,``0)">
            <summary>
            Determine if the <paramref name="left"/> is strictly greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">the type of the values being compared</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if left &gt; right; <c>false</c> othewise.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.GreaterThanOrEqual``1(``0,``0)">
            <summary>
            Determine if the <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">the type of the values being compared</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if left &gt;= right; <c>false</c> othewise.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.LessThan``1(``0,``0)">
            <summary>
            Determine if the <paramref name="left"/> is strictly less than <paramref name="right"/>.
            </summary>
            <typeparam name="T">the type of the values being compared</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if left &lt; right; <c>false</c> othewise.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.LessThanOrEqual``1(``0,``0)">
            <summary>
            Determine if the <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">the type of the values being compared</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if left &lt;= right; <c>false</c> othewise.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.Compare``1(Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType,``0,``0)">
            <summary>
            Performs the specified comparison operation on the given pair of values.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <param name="comparison">The comparison operation to perform.</param>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if the comparison operation <paramref name="comparison"/> is satisifed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.CompareReferenceType``1(``0,``0)">
            <summary>
            Implements comparison when <typeparamref name="T"/> is a reference type.
            </summary>
            <typeparam name="T">The type of the value being compared.</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.CompareValueType``1(``0,``0)">
            <summary>
            Implements comparison when <typeparamref name="T"/> is a value type.
            </summary>
            <typeparam name="T">The type of the value being compared.</typeparam>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ComparableExtensions.GetComparer``1">
            <summary>
            Gets the comparison function (either <see cref="M:CompareValueType"/> or <see cref="M:CompareReferenceType"/>)
            depending on whether <typeparamref name="T"/> is a value or reference type respectively.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <returns>An instance of <see cref="T:System.Func{T1,T2,TResult}"/> that can be used to compare two values of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType">
            <summary>
            The type of comparison to perform.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType.None">
            <summary>Placeholder for an invalid value.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType.LessThan">
            <summary>Strictly less than.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType.LessThanOrEqual">
            <summary>Less than or equal to.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType.GreaterThan">
            <summary>Strictly greater than.</summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.ComparableExtensions.ComparisonType.GreaterThanOrEqual">
            <summary>Greater than or equal to.</summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.ICollectionExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},``0,System.Int32)">
            <summary>
            Adds a specific value a specified number of times to the given collection.
            </summary>
            <typeparam name="T">The type of the value in the collection <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="value">The value to add.</param>
            <param name="times">The number of times to add <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Func{``0},System.Int32)">
            <summary>
            Adds a specific value a specified number of times to the given collection using a generator function.
            </summary>
            <typeparam name="T">The type of the value in the collection <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="times">The number of values to add.</param>
            <param name="generator">The generator function to invoke.</param>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Adds a specific value a specified number of times to the given collection using a generator function.
            </summary>
            <typeparam name="T">The type of the value in the collection <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="times">The number of values to add.</param>
            <param name="generator">The generator function to invoke.</param>
        </member>
        <member name="T:System.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ExceptionMessages.NotInRangeException">
            <summary>
              Looks up a localized string similar to Not in range { {0}, {1} }.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.EnumerationType">
            <summary>
            Indicates in what order subsets are enumerated.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.EnumerationType.None">
            <summary>
            Standard order where the index of the item is considered to be its index.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.EnumerationType.Gray">
            <summary>
            Gray code order where each subsequent subset differents from the previous one by
            the inclusion or exclusion of exaclty one item.
            </summary>
        </member>
        <member name="F:Microsoft.Test.Combinatorics.EnumerationType.Lexicographic">
            <summary>
            Lexicographic order where the items are ordered by their natural sort order and then
            subsets are generated such that they are ordered.
            </summary>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.RepeatExtensions">
            <summary>
            Contains the Repeat extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.RepeatExtensions.Repeat``1(``0,System.Int32)">
            <summary>
            Creates an enumeration containing multiple entries of a specific value.
            If <typeparamref name="T"/> is a reference type, the enumeration will
            contain multiple references to the same object.
            </summary>
            <typeparam name="T">The type of the value to repeat.</typeparam>
            <param name="value">The value to repeat</param>
            <param name="times">The number of times to repeat the value. Must be greater than or equal to 0.</param>
            <returns>An enumeration that contains <paramref name="value"/> repeated <paramref name="times"/> times.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.RepeatExtensions.Repeat``1(``0,System.Int32,System.Func{``0,``0})">
            <summary>
            Creates an enumeration containing multiple entries of a specific value.
            If <typeparamref name="T"/> is a reference type, the enumeration will
            contain multiple references to the same object.
            </summary>
            <typeparam name="T">The type of the value to repeat.</typeparam>
            <param name="value">The value to repeat</param>
            <param name="times">The number of times to repeat the value. Must be greater than or equal to 0.</param>
            <returns>An enumeration that contains <paramref name="value"/> repeated <paramref name="times"/> times.</returns>
            <param name="copyFunc">A function to copy <paramref name="value"/>.</param>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.ToExtensions">
            <summary>
            Contains the To extension methods for most primitive types.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Byte,System.Byte)">
            <summary>
            Retrieves an enumeration of all the byte values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting byte value.</param>
            <param name="end">The ending byte value.</param>
            <returns>An enumeration of all byte values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Byte,System.Byte,System.Int32)">
            <summary>
            Retrieves an enumeration of all the byte values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting byte value.</param>
            <param name="end">The ending byte value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all byte values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int16,System.Int16)">
            <summary>
            Retrieves an enumeration of all the 16 bit integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting short value.</param>
            <param name="end">The ending short value.</param>
            <returns>An enumeration of all short values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int16,System.Int16,System.Int16)">
            <summary>
            Retrieves an enumeration of all the 16 bit integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting short value.</param>
            <param name="end">The ending short value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all short values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt16,System.UInt16)">
            <summary>
            Retrieves an enumeration of all the 16 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting ushort value.</param>
            <param name="end">The ending ushort value.</param>
            <returns>An enumeration of all ushort values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt16,System.UInt16,System.Int16)">
            <summary>
            Retrieves an enumeration of all the 16 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting ushort value.</param>
            <param name="end">The ending ushort value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all ushort values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int32,System.Int32)">
            <summary>
            Retrieves an enumeration of all the 32 bit signed integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting int value.</param>
            <param name="end">The ending int value.</param>
            <returns>An enumeration of all int values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves an enumeration of all the 32 bit signed integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting int value.</param>
            <param name="end">The ending int value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all int values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt32,System.UInt32)">
            <summary>
            Retrieves an enumeration of all the 32 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting uint value.</param>
            <param name="end">The ending uint value.</param>
            <returns>An enumeration of all uint values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Retrieves an enumeration of all the 32 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting uint value.</param>
            <param name="end">The ending uint value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all uint values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Char,System.Char)">
            <summary>
            Retrieves an enumeration of all the character values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting character value.</param>
            <param name="end">The ending character value.</param>
            <returns>An enumeration of all character values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Char,System.Char,System.Int16)">
            <summary>
            Retrieves an enumeration of all the character values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting character value.</param>
            <param name="end">The ending character value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all character values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int64,System.Int64)">
            <summary>
            Retrieves an enumeration of all the 64 bit signed integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting long value.</param>
            <param name="end">The ending long value.</param>
            <returns>An enumeration of all long values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Int64,System.Int64,System.Int64)">
            <summary>
            Retrieves an enumeration of all the 32 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting uint value.</param>
            <param name="end">The ending uint value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all uint values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt64,System.UInt64)">
            <summary>
            Retrieves an enumeration of all the 64 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting ulong value.</param>
            <param name="end">The ending ulong value.</param>
            <returns>An enumeration of all ulong values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.UInt64,System.UInt64,System.Int64)">
            <summary>
            Retrieves an enumeration of all the 64 bit unsigned integer values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting ulong value.</param>
            <param name="end">The ending ulong value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all ulong values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Single,System.Single)">
            <summary>
            Retrieves an enumeration of all the single precision floating point values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting float value.</param>
            <param name="end">The ending float value.</param>
            <returns>An enumeration of all float values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Single,System.Single,System.Single)">
            <summary>
            Retrieves an enumeration of all the single precision floating point values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting float value.</param>
            <param name="end">The ending float value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all float values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Double,System.Double)">
            <summary>
            Retrieves an enumeration of all the double precision floating point values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting double value.</param>
            <param name="end">The ending double value.</param>
            <returns>An enumeration of all double values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Double,System.Double,System.Double)">
            <summary>
            Retrieves an enumeration of all the double precision floating point values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting double value.</param>
            <param name="end">The ending double value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all double values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Decimal,System.Decimal)">
            <summary>
            Retrieves an enumeration of all the decimal values from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The starting decimal value.</param>
            <param name="end">The ending decimal value.</param>
            <returns>An enumeration of all decimal values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.To(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Retrieves an enumeration of all the decimal values from <paramref name="start"/> to <paramref name="end"/> at 
            the interval <paramref name="interval"/>.
            </summary>
            <param name="start">The starting decimal value.</param>
            <param name="end">The ending decimal value.</param>
            <param name="interval">The interval.</param>
            <returns>An enumeration of all decimal values from <paramref name="start"/> to <paramref name="end"/>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.ToExtensions.CheckParameters``2(``0,``0,``1)">
            <summary>
            Enforces expected relationships for the start, end and interval parameters of all To 
            extension methods.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <typeparam name="TC">The interval type.</typeparam>
            <param name="start">The start value for the through extensions.</param>
            <param name="end">The end value for the through extensions.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="T:Microsoft.Test.Combinatorics.TryParseExtensions">
            <summary>
            Contains extensions methods for the <see cref="T:System.String"/> type that provide shortcuts to 
            parse the string value into a few built in .NET framework types.
            </summary>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseBool(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Boolean"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseByte(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Byte"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseChar(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Char"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseDateTime(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.DateTime"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseDateTimeOffset(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.DateTimeOffset"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseDecimal(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Decimal"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseDouble(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Double"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseFloat(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Single"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseInt(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.UInt32"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseLong(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Int64"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseShort(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.Int16"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseUnsignedInt(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.UInt32"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseUnsignedLong(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.UInt64"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParseUnsignedShort(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of type <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>If succesful, the parsed value of type <see cref="T:System.UInt16"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.Test.Combinatorics.TryParseExtensions.TryParse``1(System.String)">
            <summary>
            Attempts to parse the string <paramref name="value"/> into a value of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the parsed value.</typeparam>
            <param name="value">The string to parse.</param>
            <returns>If successful, the parsed value of type <typeparamref name="T"/>; otherwise <c>null</c>.</returns>
        </member>
    </members>
</doc>
