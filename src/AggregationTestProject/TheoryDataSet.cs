// <autogenerated/>
// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

using System.Collections;
using System.Collections.Generic;

namespace AggregationTestProject
{
    using System.Diagnostics.CodeAnalysis;

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam">First parameter type</typeparam>
    public class TheoryDataSet<TParam> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p.
        /// </summary>
        /// <param name="p">The p.</param>
        public void Add(TParam p)
        {
            AddItem(p);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">First parameter type</typeparam>
    /// <typeparam name="TParam2">Second parameter type</typeparam>
    public class TheoryDataSet<TParam1, TParam2> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        public void Add(TParam1 p1, TParam2 p2)
        {
            AddItem(p1, p2);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">First parameter type</typeparam>
    /// <typeparam name="TParam2">Second parameter type</typeparam>
    /// <typeparam name="TParam3">Third parameter type</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3)
        {
            AddItem(p1, p2, p3);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">First parameter type</typeparam>
    /// <typeparam name="TParam2">Second parameter type</typeparam>
    /// <typeparam name="TParam3">Third parameter type</typeparam>
    /// <typeparam name="TParam4">Fourth parameter type</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
        {
            AddItem(p1, p2, p3, p4);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">First parameter type</typeparam>
    /// <typeparam name="TParam2">Second parameter type</typeparam>
    /// <typeparam name="TParam3">Third parameter type</typeparam>
    /// <typeparam name="TParam4">Fourth parameter type</typeparam>
    /// <typeparam name="TParam5">Fifth parameter type</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4, TParam5> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        /// <param name="p5">The p5.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
        {
            AddItem(p1, p2, p3, p4, p5);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">The type of the param1.</typeparam>
    /// <typeparam name="TParam2">The type of the param2.</typeparam>
    /// <typeparam name="TParam3">The type of the param3.</typeparam>
    /// <typeparam name="TParam4">The type of the param4.</typeparam>
    /// <typeparam name="TParam5">The type of the param5.</typeparam>
    /// <typeparam name="TParam6">The type of the param6.</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        /// <param name="p5">The p5.</param>
        /// <param name="p6">The p6.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6)
        {
            AddItem(p1, p2, p3, p4, p5, p6);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute"/>-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute"/>.
    /// </summary>
    /// <typeparam name="TParam1">The type of the param1.</typeparam>
    /// <typeparam name="TParam2">The type of the param2.</typeparam>
    /// <typeparam name="TParam3">The type of the param3.</typeparam>
    /// <typeparam name="TParam4">The type of the param4.</typeparam>
    /// <typeparam name="TParam5">The type of the param5.</typeparam>
    /// <typeparam name="TParam6">The type of the param6.</typeparam>
    /// <typeparam name="TParam7">The type of the param7.</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        /// <param name="p5">The p5.</param>
        /// <param name="p6">The p6.</param>
        /// <param name="p7">The p7.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7)
        {
            AddItem(p1, p2, p3, p4, p5, p6, p7);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute" />-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute" />.
    /// </summary>
    /// <typeparam name="TParam1">The type of the param1.</typeparam>
    /// <typeparam name="TParam2">The type of the param2.</typeparam>
    /// <typeparam name="TParam3">The type of the param3.</typeparam>
    /// <typeparam name="TParam4">The type of the param4.</typeparam>
    /// <typeparam name="TParam5">The type of the param5.</typeparam>
    /// <typeparam name="TParam6">The type of the param6.</typeparam>
    /// <typeparam name="TParam7">The type of the param7.</typeparam>
    /// <typeparam name="TParam8">The type of the param8.</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        /// <param name="p5">The p5.</param>
        /// <param name="p6">The p6.</param>
        /// <param name="p7">The p7.</param>
        /// <param name="p8">The p8.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8)
        {
            AddItem(p1, p2, p3, p4, p5, p6, p7, p8);
        }
    }

    /// <summary>
    /// Helper class for generating test data for XUnit's <see cref="Xunit.Extensions.TheoryAttribute" />-based tests.
    /// Should be used in combination with <see cref="Xunit.Extensions.PropertyDataAttribute" />.
    /// </summary>
    /// <typeparam name="TParam1">The type of the param1.</typeparam>
    /// <typeparam name="TParam2">The type of the param2.</typeparam>
    /// <typeparam name="TParam3">The type of the param3.</typeparam>
    /// <typeparam name="TParam4">The type of the param4.</typeparam>
    /// <typeparam name="TParam5">The type of the param5.</typeparam>
    /// <typeparam name="TParam6">The type of the param6.</typeparam>
    /// <typeparam name="TParam7">The type of the param7.</typeparam>
    /// <typeparam name="TParam8">The type of the param8.</typeparam>
    /// <typeparam name="TParam9">The type of the param9.</typeparam>
    [SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "By design.")]
    public class TheoryDataSet<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9> : TheoryDataSet
    {
        /// <summary>
        /// Adds the specified p1.
        /// </summary>
        /// <param name="p1">The p1.</param>
        /// <param name="p2">The p2.</param>
        /// <param name="p3">The p3.</param>
        /// <param name="p4">The p4.</param>
        /// <param name="p5">The p5.</param>
        /// <param name="p6">The p6.</param>
        /// <param name="p7">The p7.</param>
        /// <param name="p8">The p8.</param>
        /// <param name="p9">The p9.</param>
        public void Add(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TParam9 p9)
        {
            AddItem(p1, p2, p3, p4, p5, p6, p7, p8, p9);
        }
    }

    /// <summary>
    /// Base class for <c>TheoryDataSet</c> classes.
    /// </summary>
    public abstract class TheoryDataSet : IEnumerable<object[]>
    {
        private readonly List<object[]> data = new List<object[]>();

        /// <summary>
        /// Adds the item.
        /// </summary>
        /// <param name="values">The values.</param>
        protected void AddItem(params object[] values)
        {
            data.Add(values);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
        /// </returns>
        public IEnumerator<object[]> GetEnumerator()
        {
            return data.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
