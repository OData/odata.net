using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Microsoft.OData.Core.ExperimentalNewWriter;

// Step 1: Writer Interface Definition
internal interface IODataWriter<T>
{
    void Write(
        Utf8JsonWriter writer,
        T instance,
        ODataSelectExpandNode context,
        JsonSerializerOptions options,
        IODataAnnotationProvider annotations);
}

// Step 2: Select/Expand context representation
internal class ODataSelectExpandNode
{
    public HashSet<string> SelectedProperties { get; set; } = new();
    public Dictionary<string, ODataSelectExpandNode> ExpandedProperties { get; set; } = new();
}

// Step 3: Annotation Provider Interface
internal interface IODataAnnotationProvider
{
    IDictionary<string, object> GetAnnotations(object instance);
    IDictionary<string, object> GetPropertyAnnotations(object instance, string propertyName);
}

// Step 4: OData Serializer Interface
internal interface IODataSerializer
{
    object GetWriter(Type type);
}

// Step 5: Default POCO Serializer Factory
internal class PocoODataSerializer : IODataSerializer
{
    private readonly ConcurrentDictionary<Type, object> _cache = new();

    public object GetWriter(Type type)
    {
        return _cache.GetOrAdd(type, CreateWriter);
    }

    private object CreateWriter(Type type)
    {
        var props = type.GetProperties();
        var writerType = typeof(PocoWriter<>).MakeGenericType(type);
        return Activator.CreateInstance(writerType, props, this)!;
    }

    private class PocoWriter<T> : IODataWriter<T>
    {
        private readonly PropertyInfo[] _props;
        private readonly PocoODataSerializer _serializer;
        private JsonConverter<T>? _customConverter;

        public PocoWriter(PropertyInfo[] props, PocoODataSerializer serializer)
        {
            _props = props;
            _serializer = serializer;
        }

        public void Write(Utf8JsonWriter writer, T instance, ODataSelectExpandNode context, JsonSerializerOptions options, IODataAnnotationProvider annotations)
        {
            _customConverter ??= (JsonConverter<T>?)options.GetConverter(typeof(T));
            if (_customConverter is not null && _customConverter.GetType().DeclaringType != typeof(JsonConverter<>))
            {
                _customConverter.Write(writer, instance, options);
                return;
            }

            writer.WriteStartObject();

            var instanceAnnotations = annotations?.GetAnnotations(instance!);
            if (instanceAnnotations != null)
            {
                foreach (var kv in instanceAnnotations)
                {
                    writer.WritePropertyName(kv.Key);
                    JsonSerializer.Serialize(writer, kv.Value, options);
                }
            }

            foreach (var prop in _props)
            {
                if (context.SelectedProperties.Count == 0 || context.SelectedProperties.Contains(prop.Name))
                {
                    var value = prop.GetValue(instance);
                    writer.WritePropertyName(prop.Name);

                    var propAnnotations = annotations?.GetPropertyAnnotations(instance!, prop.Name);
                    if (propAnnotations != null)
                    {
                        foreach (var kv in propAnnotations)
                        {
                            writer.WritePropertyName(kv.Key);
                            JsonSerializer.Serialize(writer, kv.Value, options);
                        }
                    }

                    if (value != null && context.ExpandedProperties.TryGetValue(prop.Name, out var nestedContext))
                    {
                        var nestedWriter = (IODataWriter<object>)_serializer.GetWriter(value.GetType());
                        nestedWriter.Write(writer, value, nestedContext, options, annotations);
                    }
                    else if (value != null)
                    {
                        var valueType = value.GetType();
                        var converter = options.GetConverter(valueType);
                        if (converter is JsonConverter jsonConverter && jsonConverter.GetType().DeclaringType != typeof(JsonConverter<>))
                        {
                            jsonConverter.Write(writer, value, options);
                        }
                        else
                        {
                            JsonSerializer.Serialize(writer, value, options);
                        }
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
            }

            writer.WriteEndObject();
        }
    }
}

// Step 6: Dictionary Serializer
internal class DictionaryODataSerializer : IODataSerializer
{
    public object GetWriter(Type type)
    {
        return new DictionaryWriter();
    }

    private class DictionaryWriter : IODataWriter<IDictionary<string, object>>
    {
        public void Write(Utf8JsonWriter writer, IDictionary<string, object> instance, ODataSelectExpandNode context, JsonSerializerOptions options, IODataAnnotationProvider annotations)
        {
            writer.WriteStartObject();

            var instanceAnnotations = annotations?.GetAnnotations(instance);
            if (instanceAnnotations != null)
            {
                foreach (var kv in instanceAnnotations)
                {
                    writer.WritePropertyName(kv.Key);
                    JsonSerializer.Serialize(writer, kv.Value, options);
                }
            }

            foreach (var kvp in instance)
            {
                if (context.SelectedProperties.Count == 0 || context.SelectedProperties.Contains(kvp.Key))
                {
                    writer.WritePropertyName(kvp.Key);

                    var propAnnotations = annotations?.GetPropertyAnnotations(instance, kvp.Key);
                    if (propAnnotations != null)
                    {
                        foreach (var kv in propAnnotations)
                        {
                            writer.WritePropertyName(kv.Key);
                            JsonSerializer.Serialize(writer, kv.Value, options);
                        }
                    }

                    if (kvp.Value != null && context.ExpandedProperties.TryGetValue(kvp.Key, out var nestedContext))
                    {
                        var nestedWriter = (IODataWriter<object>)GetWriter(kvp.Value.GetType());
                        nestedWriter.Write(writer, kvp.Value, nestedContext, options, annotations);
                    }
                    else
                    {
                        JsonSerializer.Serialize(writer, kvp.Value, options);
                    }
                }
            }

            writer.WriteEndObject();
        }
    }
}

// Step 7: Composite Serializer
internal class CompositeODataSerializer : IODataSerializer
{
    private readonly List<IODataSerializer> _strategies;

    public CompositeODataSerializer(IEnumerable<IODataSerializer> strategies)
    {
        _strategies = strategies.ToList();
    }

    public object GetWriter(Type type)
    {
        foreach (var strategy in _strategies)
        {
            try
            {
                var writer = strategy.GetWriter(type);
                if (writer != null) return writer;
            }
            catch (ODataException ex) { }
        }
        throw new InvalidOperationException($"No serializer found for type {type.FullName}");
    }
}

// Step 8: Usage Wrapper
internal class ODataSerializerService
{
    private readonly IODataSerializer _serializer;
    private readonly IODataAnnotationProvider _annotationProvider;

    public ODataSerializerService(IODataSerializer serializer, IODataAnnotationProvider annotationProvider)
    {
        _serializer = serializer;
        _annotationProvider = annotationProvider;
    }

    public void Serialize(Utf8JsonWriter writer, object instance, ODataSelectExpandNode node, JsonSerializerOptions options)
    {
        var writerImpl = (dynamic)_serializer.GetWriter(instance.GetType());
        writerImpl.Write(writer, (dynamic)instance, node, options, _annotationProvider);
    }
}

// Step 9: Integration with System.Text.Json
internal class ODataJsonConverterFactory : JsonConverterFactory
{
    private readonly ODataSerializerService _serializer;
    private readonly ODataSelectExpandNode _selectExpand;

    public ODataJsonConverterFactory(ODataSerializerService serializer, ODataSelectExpandNode selectExpand)
    {
        _serializer = serializer;
        _selectExpand = selectExpand;
    }

    public override bool CanConvert(Type typeToConvert) => true;

    public override JsonConverter CreateConverter(Type type, JsonSerializerOptions options)
    {
        var converterType = typeof(ODataJsonConverter<>).MakeGenericType(type);
        return (JsonConverter)Activator.CreateInstance(converterType, _serializer, _selectExpand)!;
    }

    private class ODataJsonConverter<T> : JsonConverter<T>
    {
        private readonly ODataSerializerService _serializer;
        private readonly ODataSelectExpandNode _selectExpand;

        public ODataJsonConverter(ODataSerializerService serializer, ODataSelectExpandNode selectExpand)
        {
            _serializer = serializer;
            _selectExpand = selectExpand;
        }

        public override T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            throw new NotSupportedException("OData deserialization not supported.");
        }

        public override void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
        {
            _serializer.Serialize(writer, value!, _selectExpand, options);
        }
    }
}
