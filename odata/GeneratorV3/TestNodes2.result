namespace GeneratorV3
{
    using System.Collections.Generic;
    
    public sealed class firstⲻrule
    {
        public firstⲻrule(GeneratorV3.secondⲻrule secondⲻrule_1)
        {
            this.secondⲻrule_1 = secondⲻrule_1;
        }
        
        public GeneratorV3.secondⲻrule secondⲻrule_1 { get; }
    }
    
    public abstract class secondⲻrule
    {
        private secondⲻrule()
        {
        }
        
        protected abstract TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context);
        
        public abstract class Visitor<TResult, TContext>
        {
            public TResult Visit(secondⲻrule node, TContext context)
            {
                return node.Dispatch(this, context);
            }
            
            protected internal abstract TResult Accept(secondⲻrule.firstⲻrule node, TContext context);
            protected internal abstract TResult Accept(secondⲻrule.firstⲻrule_firstⲻrule node, TContext context);
            protected internal abstract TResult Accept(secondⲻrule.firstⲻrule_жCfirstⲻrule_Ifirstⲻrule꘡Ↄ_жIfirstⲻrule_firstⲻrule꘡_ж1firstⲻrule_1жfirstⲻrule node, TContext context);
            protected internal abstract TResult Accept(secondⲻrule.CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ node, TContext context);
            protected internal abstract TResult Accept(secondⲻrule.firstⲻrule_Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_Ifirstⲻrule_firstⲻrule꘡ node, TContext context);
        }
        
        public sealed class firstⲻrule : secondⲻrule
        {
            public firstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            
            protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
            {
                return visitor.Accept(this, context);
            }
        }
        
        public sealed class firstⲻrule_firstⲻrule : secondⲻrule
        {
            public firstⲻrule_firstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1, GeneratorV3.firstⲻrule firstⲻrule_2)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
                this.firstⲻrule_2 = firstⲻrule_2;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            public GeneratorV3.firstⲻrule firstⲻrule_2 { get; }
            
            protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
            {
                return visitor.Accept(this, context);
            }
        }
        
        public sealed class firstⲻrule_жCfirstⲻrule_Ifirstⲻrule꘡Ↄ_жIfirstⲻrule_firstⲻrule꘡_ж1firstⲻrule_1жfirstⲻrule : secondⲻrule
        {
            public firstⲻrule_жCfirstⲻrule_Ifirstⲻrule꘡Ↄ_жIfirstⲻrule_firstⲻrule꘡_ж1firstⲻrule_1жfirstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1, IEnumerable<Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ> Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1, IEnumerable<Inners.firstⲻrule_firstⲻrule?> firstⲻrule_firstⲻrule_1, IEnumerable<GeneratorV3.firstⲻrule> firstⲻrule_2, IEnumerable<GeneratorV3.firstⲻrule> firstⲻrule_3)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
                this.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 = Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1;
                this.firstⲻrule_firstⲻrule_1 = firstⲻrule_firstⲻrule_1;
                this.firstⲻrule_2 = firstⲻrule_2;
                this.firstⲻrule_3 = firstⲻrule_3;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            public IEnumerable<Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ> Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 { get; }
            public IEnumerable<Inners.firstⲻrule_firstⲻrule?> firstⲻrule_firstⲻrule_1 { get; }
            public IEnumerable<GeneratorV3.firstⲻrule> firstⲻrule_2 { get; }
            public IEnumerable<GeneratorV3.firstⲻrule> firstⲻrule_3 { get; }
            
            protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
            {
                return visitor.Accept(this, context);
            }
        }
        
        public sealed class CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ : secondⲻrule
        {
            public CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ(Inners.CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ_1)
            {
                this.CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ_1 = CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ_1;
            }
            
            public Inners.CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ_1 { get; }
            
            protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
            {
                return visitor.Accept(this, context);
            }
        }
        
        public sealed class firstⲻrule_Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_Ifirstⲻrule_firstⲻrule꘡ : secondⲻrule
        {
            public firstⲻrule_Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_Ifirstⲻrule_firstⲻrule꘡(GeneratorV3.firstⲻrule firstⲻrule_1, Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1, Inners.firstⲻrule_firstⲻrule? firstⲻrule_firstⲻrule_1)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
                this.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 = Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1;
                this.firstⲻrule_firstⲻrule_1 = firstⲻrule_firstⲻrule_1;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            public Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 { get; }
            public Inners.firstⲻrule_firstⲻrule? firstⲻrule_firstⲻrule_1 { get; }
            
            protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
            {
                return visitor.Accept(this, context);
            }
        }
    }
    
    public sealed class Inners
    {
        public sealed class firstⲻrule
        {
            public firstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
        }
        
        public sealed class firstⲻrule_Ifirstⲻrule꘡
        {
            public firstⲻrule_Ifirstⲻrule꘡(GeneratorV3.firstⲻrule firstⲻrule_1, Inners.firstⲻrule? firstⲻrule_2)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
                this.firstⲻrule_2 = firstⲻrule_2;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            public Inners.firstⲻrule? firstⲻrule_2 { get; }
        }
        
        public sealed class Cfirstⲻrule_Ifirstⲻrule꘡Ↄ
        {
            public Cfirstⲻrule_Ifirstⲻrule꘡Ↄ(Inners.firstⲻrule_Ifirstⲻrule꘡ firstⲻrule_Ifirstⲻrule꘡_1)
            {
                this.firstⲻrule_Ifirstⲻrule꘡_1 = firstⲻrule_Ifirstⲻrule꘡_1;
            }
            
            public firstⲻrule_Ifirstⲻrule꘡ firstⲻrule_Ifirstⲻrule꘡_1 { get; }
        }
        
        public sealed class firstⲻrule_firstⲻrule
        {
            public firstⲻrule_firstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1, GeneratorV3.firstⲻrule firstⲻrule_2)
            {
                this.firstⲻrule_1 = firstⲻrule_1;
                this.firstⲻrule_2 = firstⲻrule_2;
            }
            
            public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
            public GeneratorV3.firstⲻrule firstⲻrule_2 { get; }
        }
        
        public abstract class firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ
        {
            private firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ()
            {
            }
            
            protected abstract TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context);
            
            public abstract class Visitor<TResult, TContext>
            {
                public TResult Visit(firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ node, TContext context)
                {
                    return node.Dispatch(this, context);
                }
                
                protected internal abstract TResult Accept(firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ.firstⲻrule node, TContext context);
                protected internal abstract TResult Accept(firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ node, TContext context);
            }
            
            public sealed class firstⲻrule : firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ
            {
                public firstⲻrule(GeneratorV3.firstⲻrule firstⲻrule_1)
                {
                    this.firstⲻrule_1 = firstⲻrule_1;
                }
                
                public GeneratorV3.firstⲻrule firstⲻrule_1 { get; }
                
                protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
                {
                    return visitor.Accept(this, context);
                }
            }
            
            public sealed class Cfirstⲻrule_Ifirstⲻrule꘡Ↄ : firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ
            {
                public Cfirstⲻrule_Ifirstⲻrule꘡Ↄ(Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1)
                {
                    this.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 = Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1;
                }
                
                public Inners.Cfirstⲻrule_Ifirstⲻrule꘡Ↄ Cfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 { get; }
                
                protected sealed override TResult Dispatch<TResult, TContext>(Visitor<TResult, TContext> visitor, TContext context)
                {
                    return visitor.Accept(this, context);
                }
            }
        }
        
        public sealed class CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ
        {
            public CfirstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡ↃↃ(Inners.firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ_1)
            {
                this.firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 = firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ_1;
            }
            
            public firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ firstⲻruleⳆCfirstⲻrule_Ifirstⲻrule꘡Ↄ_1 { get; }
        }
    }
    
}
